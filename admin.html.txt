
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Soundora Films - Boshqaruv Paneli</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- QR Code generatsiyasi uchun kutubxona -->
    <script src="https://cdn.jsdelivr.net/npm/qrcodejs@1.0.0/qrcode.min.js"></script>
    <style>
        body { font-family: 'Inter', sans-serif; background-color: #0a0a0a; color: #F3F4F6; }
        .login-container { background-color: #111827; }
        .form-panel { background-color: #1f2937; border: 1px solid #374151; }
        .form-input, .modal-input, .settings-input { background-color: #374151; border: 1px solid #4b5563; }
        .form-input:focus, .modal-input:focus, .settings-input:focus { outline: none; border-color: #ef4444; box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.5); }
        .submit-btn, .action-btn { background-color: #DC2626; transition: background-color 0.3s; }
        .submit-btn:hover, .action-btn:hover { background-color: #ef4444; }
        .table-header { background-color: #374151; }
        .table-row:nth-child(even) { background-color: #1f2937; }
        .table-row:nth-child(odd) { background-color: #2c3646; }
        #modal-overlay { background-color: rgba(0, 0, 0, 0.8); }
        .sidebar-link { transition: background-color 0.2s, color 0.2s; }
        .sidebar-link.active, .sidebar-link:hover { background-color: #ef4444; color: #ffffff; }
        .sidebar-link.active i, .sidebar-link:hover i { color: #ffffff; }
        .movie-card { background-color: #1f2937; transition: transform 0.3s, box-shadow 0.3s; }
        .movie-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.3); }
        .lang-btn.active { background-color: #DC2626; color: #FFFFFF; font-weight: bold; }
        #toast-notification { transition: opacity 0.3s, transform 0.3s; }
        
        .login-tab {
            width: 50%;
            padding: 1rem;
            background-color: #374151;
            color: #9CA3AF;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s, color 0.3s;
            font-weight: 600;
        }
        .login-tab.active {
            background-color: #1f2937;
            color: #FFFFFF;
        }
        #loading-overlay {
            background-color: rgba(0, 0, 0, 0.7);
        }
        #qrcode-container {
            display: flex;
            justify-content: center;
            align-items: center;
            background: white;
            padding: 1rem;
            border-radius: 0.5rem;
            width: 200px;
            height: 200px;
            margin: 1rem auto 0;
        }
    </style>
</head>
<body class="antialiased">

    <div id="app-container">
        <!-- Dastur shu yerda ishga tushadi -->
    </div>
    
    <div id="modal-overlay" class="hidden fixed inset-0 z-50 flex items-center justify-center p-4"></div>
    
    <div id="toast-notification" class="hidden fixed bottom-5 right-5 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg opacity-0 transform translate-y-4"></div>

    <div id="loading-overlay" class="hidden fixed inset-0 z-[100] flex items-center justify-center">
        <i class="fas fa-spinner fa-spin text-white text-4xl"></i>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signOut, GoogleAuthProvider, signInWithPopup, createUserWithEmailAndPassword, updatePassword, reauthenticateWithCredential, EmailAuthProvider } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, doc, setDoc, addDoc, deleteDoc, updateDoc, onSnapshot, query, where, getDoc, getDocs, runTransaction, writeBatch, serverTimestamp, arrayUnion } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyBeYmiy_FX22I4--UnNTRxjWiAh--sX9Ug",
            authDomain: "soundora-music.firebaseapp.com",
            projectId: "soundora-music",
            storageBucket: "soundora-music.appspot.com",
            messagingSenderId: "92363153683",
            appId: "1:92363153683:web:16feda8fb9607d8da97ae6",
            measurementId: "G-KP08NSCRD6"
        };

        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // --- GLOBAL HOLAT ---
        let allUsers = [], movies = [], partners = [], users = [], archivedUsers = [], paymentHistory = [], terminationRequests = [];
        // Support chats management
        let supportChats = [];
        let unsubSupportChatsList = null;
        let adminChatUnsub = null;
        let activeAdminChatId = null;
        let settings = { royaltyPerView: 0.05 };
        let currentDashboardLanguage = 'ru', currentPartnerId = null, currentUserRole = null, currentUserData = null;
        let unsubMovies, unsubAllUsers, unsubArchivedUsers, unsubRequests, unsubPayments, unsubSettings;
        let statsChart = null;
        const loadingOverlay = document.getElementById('loading-overlay');
        let tempCodeInterval = null; // Vaqtinchalik kod uchun interval
        
        const dashboardTranslations = {
            ru: {
                content: "Контент", royalty: "Роялти", statistics: "Статистика", settings: "Профиль и Настройки",
                partners: "Партнеры", users: "Пользователи", welcome: "Добро пожаловать",
                addMovie: "Добавить фильм", addPartner: "Добавить партнера",
                royaltyReport: "Отчет по роялти", totalIncome: "Общий доход", lastPayment: "Последняя выплата",
                nextPayment: "Следующая выплата", contentDetails: "Детализация по контенту",
                title: "Название", views: "Просмотры", income: "Доход",
                viewStats: "Статистика просмотров", totalViews: "Всего просмотров", watchTime: "Время просмотра (часы)",
                topContent: "Топ контент", viewsLast30Days: "Просмотры за последние 30 дней",
                partnerAccountSettings: "Настройки аккаунта партнера", profileInfo: "Информация о профиле",
                name: "Имя", contactEmail: "Контактный Email", paymentInfo: "Платежная информация",
                saveSettings: "Сохранить настройки", languageSettings: "Язык интерфейса",
                country: "Страна", recipientName: "Имя получателя", cardNumber: "Номер карты", phoneNumber: "Номер телефона",
                paymentHistory: "История выплат", date: "Дата", amount: "Сумма", status: "Статус",
                pendingPayments: "Ожидающие выплаты", pay: "Выплатить", paymentSuccessful: "Выплата успешно зарегистрирована!",
                uploadedMovies: "Загруженные фильмы", royaltyPerMovie: "Роялти за фильм",
                confirmDelete: "Вы уверены?", messageDelete: "Вы действительно хотите удалить этот элемент? Это действие необратимо.",
                cancel: "Отмена", delete: "Удалить",
                faq: "FAQ", privacyPolicy: "Политика конфиденциальности", requests: "Запросы",
                agreementTitle: "Партнерское соглашение", agreeAndContinue: "Я принимаю условия и продолжаю",
                requestTermination: "Запросить расторжение", terminationRequest: "Запрос на расторжение",
                sendRequest: "Отправить запрос",
                studioName: "Название студии", partnerId: "ID Партнера", copy: "Копировать",
                changePassword: "Сменить пароль", currentPassword: "Текущий пароль", newPassword: "Новый пароль",
                customId: "Кастомный ID", actions: "Действия", editUser: "Редактировать пользователя", save: "Сохранить",
                userUpdateSuccess: "Данные пользователя успешно обновлены!", userUpdateError: "Ошибка при обновлении данных пользователя.",
                userSearchPlaceholder: "Поиск по ID, имени или email...", userDetails: "Данные пользователя", back: "Назад",
                accountStatus: "Статус аккаунта", registrationDate: "Дата регистрации", assignedId: "Присвоенный ID",
                noPaymentHistory: "История платежей пуста.", userNotFound: "Пользователь не найден.",
                archiveUser: "Архивировать пользователя", 
                archiveUserConfirmTitle: "Архивировать пользователя?",
                archiveUserConfirmMessage: "Вы уверены, что хотите архивировать этого пользователя? Его аккаунт будет заблокирован, а данные перемещены в архив.",
                userArchivedSuccess: "Пользователь успешно заблокирован и архивирован.",
                archive: "Архив",
                restoreUser: "Восстановить",
                restoreUserConfirmTitle: "Восстановить пользователя?",
                restoreUserConfirmMessage: "Вы уверены, что хотите восстановить этого пользователя? Его аккаунт будет разблокирован и он снова появится в общем списке.",
                userRestoredSuccess: "Пользователь успешно восстановлен.",
                archiveEmpty: "Архив пуст.",
                archivedDate: "Дата архивации",
                premiumStatus: "Статус Premium",
                premiumEnabled: "Premium статус включен.",
                premiumDisabled: "Premium статус выключен.",
                idUpdated: "ID успешно обновлен.",
                selectTariff: "Выберите тариф",
                editPremium: "Изменить Premium",
                partnerDetails: "Данные партнера",
                partnerSearchPlaceholder: "Поиск по ID, имени или email...",
                partnerCreatedSuccess: "Партнер успешно создан!",
                password: "Пароль",
                deletePartner: "Удалить партнера",
                deletePartnerConfirmTitle: "Удалить партнера?",
                deletePartnerConfirmMessage: "Вы уверены, что хотите удалить этого партнера? Это действие необратимо и удалит его аккаунт из системы.",
                partnerDeletedSuccess: "Партнер успешно удален.",
                noNewRequests: "Новых запросов нет.",
                requestDate: "Дата запроса",
                accept: "Принять",
                decline: "Отклонить",
                acceptRequestTitle: "Принять запрос?",
                acceptRequestMessage: "Вы уверены, что хотите расторгнуть соглашение с этим партнером? Его аккаунт будет удален.",
                declineRequestTitle: "Отклонить запрос?",
                declineRequestMessage: "Вы уверены, что хотите отклонить этот запрос?",
                requestAccepted: "Запрос принят. Партнер удален.",
                requestDeclined: "Запрос отклонен.",
                totalRoyalty: "Общее роялти",
                totalPaid: "Всего выплачено",
                balance: "Баланс",
                royaltyDetails: "Детализация роялти",
                moviesOfPartner: "Фильмы партнера",
                registerPayment: "Зарегистрировать выплату",
                paymentAmount: "Сумма выплаты",
                noPartnersForRoyalty: "Нет партнеров для расчета роялти.",
                totalMovies: "Всего фильмов",
                newUsersLast7Days: "Новые пользователи за 7 дней",
                top10MoviesByViews: "Топ-10 фильмов по просмотрам",
                royaltySettings: "Настройки роялти",
                royaltyPerView: "Ставка за просмотр ($)",
                settingsUpdateSuccess: "Настройки успешно обновлены!",
                passwordUpdateSuccess: "Пароль успешно изменен!",
                passwordUpdateError: "Ошибка при смене пароля. Проверьте текущий пароль.",
                accountRecovery: "Восстановление аккаунта",
                enterSecretWord: "Введите секретное слово пользователя для доступа",
                secretWord: "Секретное слово",
                confirm: "Подтвердить",
                wrongSecretWord: "Неверное секретное слово!",
                tempCodeForLogin: "Временный код для входа",
                codeWillUpdateIn: "Код обновится через:",
                seconds: "секунд",
                qrCodeForLogin: "QR-код для входа",
                promoCodes: "Промокоды",
                supportChats: "Чаты поддержки",
                createPromoCode: "Создать промокод",
                duration: "Длительность",
                generateCode: "Сгенерировать код",
                codeGenerated: "Код сгенерирован!",
                durationDays: "дней",
                durationMonths: "месяцев",
                deleteChat: "Удалить чат",
                deleteChatConfirmTitle: "Удалить чат?",
                deleteChatConfirmMessage: "Вы уверены, что хотите удалить этот чат? Это действие необратимо.",
                chatDeletedSuccess: "Чат успешно удален.",
                admins: "Администраторы",
                addAdmin: "Добавить администратора",
                editAdmin: "Редактировать администратора",
                permissions: "Права доступа",
                role: "Роль",
                agent: "Агент",
                admin: "Админ",
                manageContent: "Управление контентом",
                manageUsers: "Управление пользователями",
                managePartners: "Управление партнерами",
                manageAdmins: "Управление администраторами",
                accessSupport: "Доступ к чатам поддержки",
                adminCreatedSuccess: "Администратор успешно создан!",
                adminUpdatedSuccess: "Данные администратора обновлены!"
            },
            uz: {
                content: "Kontent", royalty: "Royalti", statistics: "Statistika", settings: "Profil va Sozlamalar",
                partners: "Hamkorlar", users: "Foydalanuvchilar", welcome: "Xush kelibsiz",
                addMovie: "Kino qo'shish", addPartner: "Hamkor qo'shish",
                royaltyReport: "Royalti hisoboti", totalIncome: "Umumiy daromad", lastPayment: "Oxirgi to'lov",
                nextPayment: "Keyingi to'lov", contentDetails: "Kontent bo'yicha tafsilotlar",
                title: "Nomi", views: "Ko'rishlar", income: "Daromad",
                viewStats: "Ko'rishlar statistikasi", totalViews: "Jami ko'rishlar", watchTime: "Ko'rish vaqti (soat)",
                topContent: "Top kontent", viewsLast30Days: "Oxirgi 30 kundagi ko'rishlar",
                partnerAccountSettings: "Hamkor akkaunti sozlamalari", profileInfo: "Profil ma'lumotlari",
                name: "Ism", contactEmail: "Aloqa uchun Email", paymentInfo: "To'lov ma'lumotlari",
                saveSettings: "Sozlamalarni saqlash", languageSettings: "Interfeys tili",
                country: "Davlat", recipientName: "Qabul qiluvchi ismi", cardNumber: "Karta raqami", phoneNumber: "Telefon raqami",
                paymentHistory: "To'lovlar tarixi", date: "Sana", amount: "Summa", status: "Holat",
                pendingPayments: "Kutilayotgan to'lovlar", pay: "To'lash", paymentSuccessful: "To'lov muvaffaqiyatli qayd etildi!",
                uploadedMovies: "Yuklangan kinolar", royaltyPerMovie: "Har bir kino uchun royalti",
                confirmDelete: "Ishonchingiz komilmi?", messageDelete: "Haqiqatan ham bu elementni oʻchirib tashlamoqchimisiz? Bu amalni bekor qilib boʻlmaydi.",
                cancel: "Bekor qilish", delete: "O'chirish",
                faq: "FAQ", privacyPolicy: "Maxfiylik siyosati", requests: "So'rovlar",
                agreementTitle: "Hamkorlik shartnomasi", agreeAndContinue: "Shartlarni qabul qilaman va davom etaman",
                requestTermination: "Hamkorlikni bekor qilish", terminationRequest: "Bekor qilish so'rovi",
                sendRequest: "So'rov yuborish",
                studioName: "Studiya nomi", partnerId: "Hamkor IDsi", copy: "Nusxalash",
                changePassword: "Parolni o'zgartirish", currentPassword: "Joriy parol", newPassword: "Yangi parol",
                customId: "Maxsus ID", actions: "Harakatlar", editUser: "Foydalanuvchini tahrirlash", save: "Saqlash",
                userUpdateSuccess: "Foydalanuvchi ma'lumotlari muvaffaqiyatli yangilandi!", userUpdateError: "Foydalanuvchi ma'lumotlarini yangilashda xatolik.",
                userSearchPlaceholder: "ID, ism yoki email bo'yicha qidirish...", userDetails: "Foydalanuvchi ma'lumotlari", back: "Orqaga",
                accountStatus: "Hisob holati", registrationDate: "Ro'yxatdan o'tgan sana", assignedId: "Biriktirilgan ID",
                noPaymentHistory: "To'lovlar tarixi mavjud emas.", userNotFound: "Foydalanuvchi topilmadi.",
                archiveUser: "Foydalanuvchini arxivlash",
                archiveUserConfirmTitle: "Foydalanuvchini arxivlash?",
                archiveUserConfirmMessage: "Haqiqatan ham bu foydalanuvchini arxivlamoqchimisiz? Uning hisobi bloklanadi va ma'lumotlari arxivga ko'chiriladi.",
                userArchivedSuccess: "Foydalanuvchi muvaffaqiyatli bloklandi va arxivlandi.",
                archive: "Arxiv",
                restoreUser: "Qayta tiklash",
                restoreUserConfirmTitle: "Foydalanuvchini tiklash?",
                restoreUserConfirmMessage: "Haqiqatan ham bu foydalanuvchini qayta tiklamoqchimisiz? Uning hisobi blokdan chiqariladi va u yana umumiy ro'yxatda paydo bo'ladi.",
                userRestoredSuccess: "Foydalanuvchi muvaffaqiyatli qayta tiklandi.",
                archiveEmpty: "Arxiv bo'sh.",
                archivedDate: "Arxivlangan sana",
                premiumStatus: "Premium Holati",
                premiumEnabled: "Premium holati yoqildi.",
                premiumDisabled: "Premium holati o'chirildi.",
                idUpdated: "ID muvaffaqiyatli yangilandi.",
                selectTariff: "Tarifni tanlang",
                editPremium: "Premium'ni o'zgartirish",
                partnerDetails: "Hamkor ma'lumotlari",
                partnerSearchPlaceholder: "ID, ism yoki email bo'yicha qidirish...",
                partnerCreatedSuccess: "Hamkor muvaffaqiyatli yaratildi!",
                password: "Parol",
                deletePartner: "Hamkorni o'chirish",
                deletePartnerConfirmTitle: "Hamkorni o'chirish?",
                deletePartnerConfirmMessage: "Haqiqatan ham bu hamkorni o'chirib tashlamoqchimisiz? Bu amal qaytarib bo'lmaydi va uning hisobini tizimdan o'chiradi.",
                partnerDeletedSuccess: "Hamkor muvaffaqiyatli o'chirildi.",
                noNewRequests: "Yangi so'rovlar yo'q.",
                requestDate: "So'rov sanasi",
                accept: "Qabul qilish",
                decline: "Rad etish",
                acceptRequestTitle: "So'rovni qabul qilish?",
                acceptRequestMessage: "Haqiqatan ham ushbu hamkor bilan shartnomani bekor qilmoqchimisiz? Uning hisobi o'chiriladi.",
                declineRequestTitle: "So'rovni rad etish?",
                declineRequestMessage: "Haqiqatan ham ushbu so'rovni rad etmoqchimisiz?",
                requestAccepted: "So'rov qabul qilindi. Hamkor o'chirildi.",
                requestDeclined: "So'rov rad etildi.",
                totalRoyalty: "Jami royalti",
                totalPaid: "Jami to'langan",
                balance: "Balans",
                royaltyDetails: "Royalti tafsilotlari",
                moviesOfPartner: "Hamkor filmlari",
                registerPayment: "To'lovni qayd etish",
                paymentAmount: "To'lov miqdori",
                noPartnersForRoyalty: "Royalti hisoblash uchun hamkorlar yo'q.",
                totalMovies: "Jami filmlar",
                newUsersLast7Days: "Oxirgi 7 kundagi yangi foydalanuvchilar",
                top10MoviesByViews: "Ko'rishlar soni bo'yicha top 10 film",
                royaltySettings: "Royalti sozlamalari",
                royaltyPerView: "Har bir ko'rish uchun stavka ($)",
                settingsUpdateSuccess: "Sozlamalar muvaffaqiyatli yangilandi!",
                passwordUpdateSuccess: "Parol muvaffaqiyatli o'zgartirildi!",
                passwordUpdateError: "Parolni o'zgartirishda xatolik. Joriy parolni tekshiring.",
                accountRecovery: "Hisobni tiklash",
                enterSecretWord: "Kirish uchun foydalanuvchining maxfiy so'zini kiriting",
                secretWord: "Maxfiy so'z",
                confirm: "Tasdiqlash",
                wrongSecretWord: "Maxfiy so'z noto'g'ri!",
                tempCodeForLogin: "Kirish uchun vaqtinchalik kod",
                codeWillUpdateIn: "Kod quyidagi vaqtdan so'ng yangilanadi:",
                seconds: "soniya",
                qrCodeForLogin: "Kirish uchun QR-kod",
                promoCodes: "Promokodlar",
                supportChats: "Qo'llab-quvvatlash chatlari",
                createPromoCode: "Promokod yaratish",
                duration: "Davomiyligi",
                generateCode: "Kod yaratish",
                codeGenerated: "Kod yaratildi!",
                durationDays: "kun",
                durationMonths: "oy",
                deleteChat: "Chatni o'chirish",
                deleteChatConfirmTitle: "Chatni o'chirish?",
                deleteChatConfirmMessage: "Haqiqatan ham bu chatni oʻchirib tashlamoqchimisiz? Bu amalni bekor qilib boʻlmaydi.",
                chatDeletedSuccess: "Chat muvaffaqiyatli oʻchirildi.",
                admins: "Adminlar",
                addAdmin: "Admin qo'shish",
                editAdmin: "Adminni tahrirlash",
                permissions: "Ruxsatlar",
                role: "Rol",
                agent: "Agent",
                admin: "Admin",
                manageContent: "Kontentni boshqarish",
                manageUsers: "Foydalanuvchilarni boshqarish",
                managePartners: "Hamkorlarni boshqarish",
                manageAdmins: "Adminlarni boshqarish",
                accessSupport: "Qo'llab-quvvatlash chatlariga kirish",
                adminCreatedSuccess: "Admin muvaffaqiyatli yaratildi!",
                adminUpdatedSuccess: "Admin ma'lumotlari yangilandi!"
            }
        };

        // --- YORDAMCHI FUNKSIYALAR ---
        function showToast(message, isError = false) {
            const toast = document.getElementById('toast-notification');
            toast.textContent = message;
            toast.className = `fixed bottom-5 right-5 text-white px-4 py-2 rounded-lg shadow-lg opacity-0 transform translate-y-4 ${isError ? 'bg-red-600' : 'bg-gray-800'}`;
            toast.classList.remove('hidden');
            setTimeout(() => toast.classList.remove('opacity-0', 'translate-y-4'), 10);
            setTimeout(() => {
                toast.classList.add('opacity-0', 'translate-y-4');
                setTimeout(() => toast.classList.add('hidden'), 3000);
            }, 3000);
        }

        function closeModal() {
            const modal = document.getElementById('modal-overlay');
            modal.classList.add('hidden');
            modal.innerHTML = '';
        }

        function setDashboardLanguage(lang) {
            currentDashboardLanguage = lang;
            document.querySelectorAll('[data-lang-key]').forEach(el => {
                const key = el.getAttribute('data-lang-key');
                const translation = dashboardTranslations[lang]?.[key];
                if (translation) {
                    if (el.tagName === 'INPUT' || el.tagName === 'TEXTAREA') {
                        el.placeholder = translation;
                    } else if (el.id === 'welcome-message') {
                        const name = currentUserData?.displayName || (currentUserRole === 'admin' ? 'Администратор' : 'Партнер');
                        el.textContent = `${translation}, ${name}!`;
                    } else {
                        el.textContent = translation;
                    }
                }
            });
            document.querySelectorAll('.lang-btn').forEach(btn => btn.classList.toggle('active', btn.dataset.lang === lang));
        }
        
        // --- MODAL OYNA FUNKSIYALARI ---
        function openMovieModal(movie = null) {
            const isEditing = movie !== null;
            const modalTitle = isEditing ? 'Редактировать фильм' : 'Добавить новый фильм';
            const buttonText = isEditing ? 'Сохранить изменения' : 'Добавить фильм';
            const m = isEditing ? movie : {};
            // Til variantlari uchun ro'yxat (audio va subtitr tillari). Bu yerda tizimda ruxsat etilgan tillarni sanab o'tamiz.
            const languageOptions = ['uz','ru','tj','kz','kg','en'];
            // Audio tillari uchun tugmalar HTML. Agar m.audioLangs mavjud bo'lsa, faollashtirilgan holatda.
            const audioLangButtonsHTML = languageOptions.map(lang => {
                const isActive = Array.isArray(m.audioLangs) && m.audioLangs.includes(lang);
                return `<button type="button" class="audio-lang-btn px-2 py-1 rounded-md border border-gray-600 ${isActive ? 'bg-red-500 text-white' : 'bg-gray-700 text-gray-300'}" data-lang="${lang}">${lang.toUpperCase()}</button>`;
            }).join('');
            // Subtitr tillari uchun tugmalar HTML. Agar m.subtitleLangs mavjud bo'lsa, faollashtirilgan holatda.
            const subtitleLangButtonsHTML = languageOptions.map(lang => {
                const isActive = Array.isArray(m.subtitleLangs) && m.subtitleLangs.includes(lang);
                return `<button type="button" class="subtitle-lang-btn px-2 py-1 rounded-md border border-gray-600 ${isActive ? 'bg-red-500 text-white' : 'bg-gray-700 text-gray-300'}" data-lang="${lang}">${lang.toUpperCase()}</button>`;
            }).join('');

            const modalHTML = `
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-2xl p-6 relative">
                <div class="max-h-[80vh] overflow-y-auto pr-2">
                    <button id="close-modal-btn" class="absolute top-3 right-4 text-gray-400 hover:text-white text-2xl z-10">&times;</button>
                    <h3 class="text-2xl font-bold mb-6">${modalTitle}</h3>
                    <form id="movie-form">
                        <input type="hidden" id="movie-id" value="${m.id || ''}">
                        <h4 class="text-lg font-semibold mb-2 border-b border-gray-700 pb-1">Основная информация</h4>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                            <input type="text" id="movie-title" class="modal-input w-full p-2 rounded-md" placeholder="Название" value="${m.title || ''}" required>
                            <input type="text" id="movie-original-title" class="modal-input w-full p-2 rounded-md" placeholder="Оригинальное название" value="${m.originalTitle || ''}">
                            <input type="number" id="movie-year" class="modal-input w-full p-2 rounded-md" placeholder="Год" value="${m.year || ''}" required>
                            <input type="text" id="movie-genre" class="modal-input w-full p-2 rounded-md" placeholder="Жанр" value="${m.genre || ''}" required>
                            <input type="text" id="movie-country" class="modal-input w-full p-2 rounded-md" placeholder="Страна" value="${m.country || ''}">
                            <!-- Filmning asosiy tili. Kiritish maydoni (UZ, RU, TJ kabi) -->
                            <input type="text" id="movie-language" class="modal-input w-full p-2 rounded-md" placeholder="Язык фильма (напр. UZ)" value="${m.language || ''}">
                            <input type="text" id="movie-duration" class="modal-input w-full p-2 rounded-md" placeholder="Длительность (напр. 120 мин)" value="${m.duration || ''}">
                            <input type="text" id="movie-rating" class="modal-input w-full p-2 rounded-md" placeholder="Рейтинг (напр. 7.5/10)" value="${m.rating || ''}">
                            <input type="url" id="movie-poster" class="modal-input w-full p-2 rounded-md" placeholder="URL постера" value="${m.poster || ''}" required>
                            <input type="text" id="movie-studio" class="modal-input w-full p-2 rounded-md" placeholder="Название студии" value="${m.studio || ''}">
                            <select id="movie-type" class="modal-input w-full p-2 rounded-md">
                                <option value="movie" ${m.type === 'movie' ? 'selected' : ''}>Фильм</option>
                                <option value="series" ${m.type === 'series' ? 'selected' : ''}>Сериал</option>
                            </select>
                            <div class="flex items-center">
                                <input type="checkbox" id="movie-premium" class="h-4 w-4 text-red-600 border-gray-300 rounded focus:ring-red-500" ${m.isPremium ? 'checked' : ''}>
                                <label for="movie-premium" class="ml-2 block text-sm text-gray-300">Премиум контент</label>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="movie-producer" class="block text-sm font-medium text-gray-400 mb-1">Продюсер</label>
                            <input type="text" id="movie-producer" class="modal-input w-full p-2 rounded-md" placeholder="Имя продюсера" value="${m.producer || ''}">
                        </div>
                        <div class="mb-4">
                            <label for="movie-cast" class="block text-sm font-medium text-gray-400 mb-1">В ролях (через запятую)</label>
                            <input type="text" id="movie-cast" class="modal-input w-full p-2 rounded-md" placeholder="Актер 1, Актер 2, ..." value="${Array.isArray(m.cast) ? m.cast.join(', ') : ''}">
                        </div>
                        <div class="mb-6">
                            <label for="movie-description" class="block text-sm font-medium text-gray-400 mb-1">Описание</label>
                            <textarea id="movie-description" class="modal-input w-full p-2 rounded-md" rows="4" placeholder="Описание фильма...">${m.description || ''}</textarea>
                        </div>
                        <h4 class="text-lg font-semibold mb-2 border-b border-gray-700 pb-1">Источники видео (URL)</h4>
                        <div class="space-y-4">
                            <div><label for="source-480p" class="block text-sm font-medium text-gray-400 mb-1">480p</label><input type="url" id="source-480p" class="modal-input w-full p-2 rounded-md" placeholder="https://..." value="${m.sources ? (m.sources['480p'] || '') : ''}"></div>
                            <div><label for="source-720p" class="block text-sm font-medium text-gray-400 mb-1">720p</label><input type="url" id="source-720p" class="modal-input w-full p-2 rounded-md" placeholder="https://..." value="${m.sources ? (m.sources['720p'] || '') : ''}"></div>
                            <div><label for="source-1080p" class="block text-sm font-medium text-gray-400 mb-1">1080p</label><input type="url" id="source-1080p" class="modal-input w-full p-2 rounded-md" placeholder="https://..." value="${m.sources ? (m.sources['1080p'] || '') : ''}"></div>
                            <div><label for="source-4k" class="block text-sm font-medium text-gray-400 mb-1">4K</label><input type="url" id="source-4k" class="modal-input w-full p-2 rounded-md" placeholder="https://..." value="${m.sources ? (m.sources['4K'] || '') : ''}"></div>
                        </div>
                        <!-- Qo'shimcha sozlamalar: oqim turi, audio va subtitr tillari, region va muddatlar -->
                        <h4 class="text-lg font-semibold mb-2 border-b border-gray-700 pb-1">Настройки потока и прав</h4>
                        <div class="space-y-4 mb-4">
                            <div>
                                <label for="movie-stream-type" class="block text-sm font-medium text-gray-400 mb-1">Тип потока</label>
                                <select id="movie-stream-type" class="modal-input w-full p-2 rounded-md">
                                    <option value="hls" ${m.streamType === 'hls' ? 'selected' : ''}>HLS</option>
                                    <option value="dash" ${m.streamType === 'dash' ? 'selected' : ''}>DASH</option>
                                    <option value="mp4" ${!m.streamType || m.streamType === 'mp4' ? 'selected' : ''}>MP4</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-400 mb-1">Аудио языки</label>
                                <div id="audio-lang-options" class="flex flex-wrap gap-2">
                                    ${audioLangButtonsHTML}
                                </div>
                                <!-- Audio dublaj fayllarni yuklash -->
                                <input type="file" id="movie-audio-files" class="modal-input w-full p-2 rounded-md mt-2" multiple accept="audio/*">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-400 mb-1">Субтитры языки</label>
                                <div id="subtitle-lang-options" class="flex flex-wrap gap-2">
                                    ${subtitleLangButtonsHTML}
                                </div>
                                <!-- Subtitr fayllarni yuklash -->
                                <input type="file" id="movie-subtitle-files" class="modal-input w-full p-2 rounded-md mt-2" multiple accept=".srt,.vtt">
                            </div>
                            <div>
                                <label for="movie-regions" class="block text-sm font-medium text-gray-400 mb-1">Разрешённые регионы (через запятую)</label>
                                <input type="text" id="movie-regions" class="modal-input w-full p-2 rounded-md" placeholder="UZ,RU,TJ" value="${m.rights?.regionsAllow ? m.rights.regionsAllow.join(',') : ''}">
                            </div>
                            <div class="grid grid-cols-2 gap-4">
                                <div>
                                    <label for="movie-rights-from" class="block text-sm font-medium text-gray-400 mb-1">Права с</label>
                                    <input type="date" id="movie-rights-from" class="modal-input w-full p-2 rounded-md" value="${m.rights?.from || ''}">
                                </div>
                                <div>
                                    <label for="movie-rights-to" class="block text-sm font-medium text-gray-400 mb-1">Права до</label>
                                    <input type="date" id="movie-rights-to" class="modal-input w-full p-2 rounded-md" value="${m.rights?.to || ''}">
                                </div>
                            </div>
                            <div>
                                <label for="movie-status" class="block text-sm font-medium text-gray-400 mb-1">Статус</label>
                                <select id="movie-status" class="modal-input w-full p-2 rounded-md">
                                    <option value="draft" ${!m.status || m.status === 'draft' ? 'selected' : ''}>Черновик</option>
                                    <option value="qc" ${m.status === 'qc' ? 'selected' : ''}>Проверка</option>
                                    <option value="published" ${m.status === 'published' ? 'selected' : ''}>Опубликован</option>
                                </select>
                            </div>
                        </div>
                        <button type="submit" class="action-btn w-full text-white font-bold py-3 px-6 rounded-lg mt-8">${buttonText}</button>
                    </form>
                </div>
            </div>`;
            document.getElementById('modal-overlay').innerHTML = modalHTML;
            document.getElementById('modal-overlay').classList.remove('hidden');
            document.getElementById('close-modal-btn').addEventListener('click', closeModal);
            document.getElementById('modal-overlay').addEventListener('click', (e) => { if(e.target === document.getElementById('modal-overlay')) closeModal(); });
            document.getElementById('movie-form').addEventListener('submit', (e) => { e.preventDefault(); saveMovie(); });

            // Tilni tanlash tugmalariga click eventini bog'lash: faollashtirilgan/söndirilgan holatini belgilash
            const audioButtons = document.querySelectorAll('#audio-lang-options .audio-lang-btn');
            audioButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    btn.classList.toggle('bg-red-500');
                    btn.classList.toggle('text-white');
                    btn.classList.toggle('bg-gray-700');
                    btn.classList.toggle('text-gray-300');
                });
            });
            const subtitleButtons = document.querySelectorAll('#subtitle-lang-options .subtitle-lang-btn');
            subtitleButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    btn.classList.toggle('bg-red-500');
                    btn.classList.toggle('text-white');
                    btn.classList.toggle('bg-gray-700');
                    btn.classList.toggle('text-gray-300');
                });
            });
        }

        function openConfirmationModal(title, message, onConfirm, actionTextKey = "delete") {
            const modalHTML = `
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-sm p-6 text-center">
                <h3 class="text-xl font-bold mb-4">${title}</h3>
                <p class="text-gray-400 mb-6">${message}</p>
                <div class="flex justify-center gap-4">
                    <button id="confirm-cancel-btn" class="bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-6 rounded-lg"><span data-lang-key="cancel"></span></button>
                    <button id="confirm-action-btn" class="action-btn text-white font-bold py-2 px-6 rounded-lg"><span data-lang-key="${actionTextKey}"></span></button>
                </div>
            </div>`;
            document.getElementById('modal-overlay').innerHTML = modalHTML;
            setDashboardLanguage(currentDashboardLanguage);
            document.getElementById('modal-overlay').classList.remove('hidden');
            document.getElementById('confirm-cancel-btn').addEventListener('click', closeModal);
            document.getElementById('confirm-action-btn').addEventListener('click', () => { onConfirm(); closeModal(); });
        }

        function openPremiumModal(user) {
            const tariffs = ["1 Месяц", "3 Месяца", "7 Месяцев", "12 Месяцев"];
            const tariffOptions = tariffs.map(t => `<option value="${t}" ${user.tariff === t ? 'selected' : ''}>${t}</option>`).join('');

            const modalHTML = `
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6 relative">
                <button id="close-modal-btn" class="absolute top-3 right-4 text-gray-400 hover:text-white text-2xl z-10">&times;</button>
                <h3 class="text-2xl font-bold mb-6" data-lang-key="editPremium"></h3>
                <form id="premium-form">
                    <div class="mb-4 flex items-center justify-between">
                        <label for="premium-toggle-modal" class="text-lg font-medium text-gray-300" data-lang-key="premiumStatus"></label>
                        <label class="relative inline-flex items-center cursor-pointer">
                            <input type="checkbox" id="premium-toggle-modal" class="sr-only peer" ${user.isPremium ? 'checked' : ''}>
                            <div class="w-11 h-6 bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-red-800 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                        </label>
                    </div>
                    <div id="tariff-selection" class="${user.isPremium ? '' : 'hidden'}">
                        <label for="tariff-select" class="block text-sm font-medium text-gray-400 mb-2" data-lang-key="selectTariff"></label>
                        <select id="tariff-select" class="modal-input w-full p-2 rounded-md">
                            ${tariffOptions}
                        </select>
                    </div>
                    <button type="submit" class="action-btn w-full text-white font-bold py-3 px-6 rounded-lg mt-8">
                        <span data-lang-key="save"></span>
                    </button>
                </form>
            </div>`;
            document.getElementById('modal-overlay').innerHTML = modalHTML;
            document.getElementById('modal-overlay').classList.remove('hidden');
            document.getElementById('close-modal-btn').addEventListener('click', closeModal);
            
            const premiumToggle = document.getElementById('premium-toggle-modal');
            const tariffSelection = document.getElementById('tariff-selection');
            premiumToggle.addEventListener('change', () => {
                tariffSelection.classList.toggle('hidden', !premiumToggle.checked);
            });

            document.getElementById('premium-form').addEventListener('submit', (e) => {
                e.preventDefault();
                const isPremium = premiumToggle.checked;
                const tariff = document.getElementById('tariff-select').value;
                updatePremiumAndTariff(user.uid, isPremium, tariff);
            });
            setDashboardLanguage(currentDashboardLanguage);
        }

        function openPartnerModal() {
            const modalHTML = `
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-md p-6 relative">
                <button id="close-modal-btn" class="absolute top-3 right-4 text-gray-400 hover:text-white text-2xl z-10">&times;</button>
                <h3 class="text-2xl font-bold mb-6" data-lang-key="addPartner"></h3>
                <form id="partner-form">
                    <div class="space-y-4">
                        <input type="text" id="partner-name" class="modal-input w-full p-2 rounded-md" placeholder="Имя партнера" required>
                        <input type="email" id="partner-email" class="modal-input w-full p-2 rounded-md" placeholder="Email" required>
                        <input type="password" id="partner-password" class="modal-input w-full p-2 rounded-md" placeholder="Пароль" required>
                    </div>
                    <button type="submit" class="action-btn w-full text-white font-bold py-3 px-6 rounded-lg mt-8">
                        <span data-lang-key="addPartner"></span>
                    </button>
                </form>
            </div>`;
            document.getElementById('modal-overlay').innerHTML = modalHTML;
            document.getElementById('modal-overlay').classList.remove('hidden');
            document.getElementById('close-modal-btn').addEventListener('click', closeModal);
            document.getElementById('partner-form').addEventListener('submit', (e) => {
                e.preventDefault();
                savePartner();
            });
            setDashboardLanguage(currentDashboardLanguage);
        }
        
        async function savePartner() {
            const name = document.getElementById('partner-name').value;
            const email = document.getElementById('partner-email').value;
            const password = document.getElementById('partner-password').value; 

            if (!name || !email || !password) {
                showToast("Iltimos, barcha maydonlarni to'ldiring.", true);
                return;
            }

            loadingOverlay.classList.remove('hidden');
            
            const tempAppName = 'temp-auth-app-' + Date.now();
            const tempApp = initializeApp(firebaseConfig, tempAppName);
            const tempAuth = getAuth(tempApp);

            try {
                const userCredential = await createUserWithEmailAndPassword(tempAuth, email, password);
                const newPartnerUser = userCredential.user;

                await setDoc(doc(db, "users", newPartnerUser.uid), {
                    uid: newPartnerUser.uid,
                    displayName: name,
                    email: email,
                    password: password,
                    role: 'partner',
                    createdAt: new Date().toISOString(),
                });

                showToast(dashboardTranslations[currentDashboardLanguage].partnerCreatedSuccess);
                closeModal();

            } catch (error) {
                console.error("Hamkor yaratishda xatolik:", error);
                let errorMessage = "Hamkor yaratishda xatolik.";
                if (error.code === 'auth/email-already-in-use') {
                    errorMessage = "Bu email allaqachon ro'yxatdan o'tgan.";
                } else if (error.code === 'auth/weak-password') {
                    errorMessage = "Parol juda oddiy. Kamida 6 ta belgidan iborat bo'lishi kerak.";
                }
                showToast(errorMessage, true);
            } finally {
                await signOut(tempAuth);
                loadingOverlay.classList.add('hidden');
            }
        }

        async function showPartnerDetails(partnerId) {
            document.getElementById('partner-list-view').classList.add('hidden');
            const detailsView = document.getElementById('partner-details-view');
            detailsView.classList.remove('hidden');
            detailsView.innerHTML = `<div class="flex items-center justify-center h-full"><i class="fas fa-spinner fa-spin text-white text-3xl"></i></div>`;

            const partner = partners.find(p => p.uid === partnerId);
            if (!partner) {
                detailsView.innerHTML = `<p data-lang-key="userNotFound"></p>`;
                setDashboardLanguage(currentDashboardLanguage);
                return;
            }

            const partnerMovies = movies.filter(m => m.partnerId === partnerId);
            const moviesHtml = partnerMovies.length > 0
                ? partnerMovies.map(m => `<li class="text-sm p-1 hover:bg-gray-800 rounded">${m.title} (${m.year})</li>`).join('')
                : `<p class="text-gray-400 mt-2">Bu hamkor tomonidan hali film yuklanmagan.</p>`;

            const paymentsRef = collection(db, "paymentHistory");
            const q = query(paymentsRef, where("partnerId", "==", partnerId));
            const paymentSnapshot = await getDocs(q);
            const partnerPayments = paymentSnapshot.docs.map(doc => doc.data());

            const paymentsHtml = partnerPayments.length > 0 ? partnerPayments.map(p => `
                <div class="grid grid-cols-3 gap-4 p-2 border-b border-gray-700">
                    <span>${p.date?.toDate ? new Date(p.date.toDate()).toLocaleDateString() : 'N/A'}</span>
                    <span>${p.amount} ${p.currency || ''}</span>
                    <span class="capitalize">${p.status || 'Tugallangan'}</span>
                </div>
            `).join('') : `<p class="text-gray-400 mt-2" data-lang-key="noPaymentHistory"></p>`;

            const registrationDate = partner.createdAt ? new Date(partner.createdAt).toLocaleDateString() : 'N/A';

            detailsView.innerHTML = `
                <div class="bg-gray-800 p-6 rounded-lg">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-2xl font-bold" data-lang-key="partnerDetails"></h2>
                        <button id="back-to-partners-btn" class="bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg" data-lang-key="back"></button>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="bg-gray-900 p-4 rounded-lg space-y-3">
                            <div><strong class="text-gray-400 w-40 inline-block" data-lang-key="name"></strong> <span class="font-semibold">${partner.displayName || 'N/A'}</span></div>
                            <div><strong class="text-gray-400 w-40 inline-block">Email:</strong> <span>${partner.email}</span></div>
                            <div><strong class="text-gray-400 w-40 inline-block" data-lang-key="registrationDate"></strong> <span>${registrationDate}</span></div>
                            <div><strong class="text-gray-400 w-40 inline-block" data-lang-key="assignedId"></strong> <code class="text-lg text-blue-400">${partner.customId || 'Tayinlanmagan'}</code></div>
                            <div><strong class="text-gray-400 w-40 inline-block">Firebase UID:</strong> <code class="text-xs text-gray-500">${partner.uid}</code></div>
                        </div>
                        <div class="bg-gray-900 p-4 rounded-lg">
                             <h3 class="text-lg font-bold mb-2" data-lang-key="uploadedMovies"></h3>
                             <ul class="list-none space-y-1 max-h-48 overflow-y-auto">${moviesHtml}</ul>
                        </div>
                    </div>

                    <div class="mt-8">
                        <h3 class="text-xl font-bold mb-4" data-lang-key="paymentHistory"></h3>
                        <div class="bg-gray-900 p-4 rounded-lg">
                            <div class="grid grid-cols-3 gap-4 font-semibold text-gray-400 p-2 border-b-2 border-gray-600">
                                <span data-lang-key="date"></span>
                                <span data-lang-key="amount"></span>
                                <span data-lang-key="status"></span>
                            </div>
                            <div class="max-h-64 overflow-y-auto">
                                ${paymentsHtml}
                            </div>
                        </div>
                    </div>
                     <div class="mt-8 pt-6 border-t border-gray-700">
                         <button id="delete-partner-btn" data-id="${partner.uid}" class="w-full bg-red-800 hover:bg-red-700 text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center gap-2">
                             <i class="fas fa-trash-alt"></i> <span data-lang-key="deletePartner"></span>
                         </button>
                     </div>
                </div>
            `;

            document.getElementById('back-to-partners-btn').addEventListener('click', () => {
                detailsView.classList.add('hidden');
                document.getElementById('partner-list-view').classList.remove('hidden');
            });
            
            document.getElementById('delete-partner-btn').addEventListener('click', (e) => {
                 const partnerIdToDelete = e.currentTarget.dataset.id;
                 const title = dashboardTranslations[currentDashboardLanguage].deletePartnerConfirmTitle;
                 const message = dashboardTranslations[currentDashboardLanguage].deletePartnerConfirmMessage;
                 openConfirmationModal(title, message, () => deletePartner(partnerIdToDelete), "delete");
            });

            setDashboardLanguage(currentDashboardLanguage);
        }

        function renderDashboard(role) {
            const isSuperAdmin = role === 'admin';
            const permissions = currentUserData?.permissions || {};
            const appContainer = document.getElementById('app-container');
            appContainer.className = 'h-screen';

            const adminLinks = `
                ${(isSuperAdmin || permissions.managePartners) ? `<a href="#" id="partners-link" data-panel="partners-panel" data-title="partners" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-users-cog w-6 text-gray-400"></i><span class="ml-3" data-lang-key="partners"></span></a>` : ''}
                ${(isSuperAdmin || permissions.manageUsers) ? `<a href="#" id="users-link" data-panel="users-panel" data-title="users" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-user-shield w-6 text-gray-400"></i><span class="ml-3" data-lang-key="users"></span></a>` : ''}
                ${(isSuperAdmin || permissions.manageUsers) ? `<a href="#" id="archive-link" data-panel="archive-panel" data-title="archive" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-archive w-6 text-gray-400"></i><span class="ml-3" data-lang-key="archive"></span></a>` : ''}
                ${isSuperAdmin ? `<a href="#" id="requests-link" data-panel="requests-panel" data-title="requests" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-inbox w-6 text-gray-400"></i><span class="ml-3" data-lang-key="requests"></span></a>` : ''}
                ${(isSuperAdmin || permissions.accessSupport) ? `<a href="#" id="support-chats-link" data-panel="support-chats-panel" data-title="supportChats" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-comments w-6 text-gray-400"></i><span class="ml-3" data-lang-key="supportChats"></span></a>` : ''}
                ${isSuperAdmin ? `<a href="#" id="promocodes-link" data-panel="promocodes-panel" data-title="promoCodes" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-gift w-6 text-gray-400"></i><span class="ml-3" data-lang-key="promoCodes"></span></a>` : ''}
                ${isSuperAdmin ? `<a href="#" id="admins-link" data-panel="admins-panel" data-title="admins" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-user-tie w-6 text-gray-400"></i><span class="ml-3" data-lang-key="admins"></span></a>` : ''}
            `;
            
            const partnerLinks = `
                <a href="#" id="faq-link" data-panel="faq-panel" data-title="faq" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-question-circle w-6 text-gray-400"></i><span class="ml-3" data-lang-key="faq"></span></a>
                <a href="#" id="privacy-link" data-panel="privacy-panel" data-title="privacyPolicy" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-shield-alt w-6 text-gray-400"></i><span class="ml-3" data-lang-key="privacyPolicy"></span></a>
            `;

            const dashboardHTML = `
                <div class="flex h-screen bg-gray-800">
                    <aside id="sidebar" class="w-64 bg-gray-900 text-gray-300 flex-shrink-0 flex flex-col fixed md:relative h-full z-20 transform -translate-x-full md:translate-x-0 transition-transform duration-300">
                        <div class="h-16 flex items-center justify-center border-b border-gray-800"><h1 class="text-xl font-bold text-white tracking-wider">SOUNDORA <span class="text-red-500">FILMS</span></h1></div>
                        <nav class="flex-grow mt-4">
                            ${(isSuperAdmin || permissions.manageContent) ? `<a href="#" id="content-link" data-panel="content-panel" data-title="content" class="sidebar-link active flex items-center py-3 px-6"><i class="fas fa-film w-6 text-gray-400"></i><span class="ml-3" data-lang-key="content"></span></a>` : ''}
                            ${(isSuperAdmin || currentUserRole === 'agent') ? adminLinks : ''}
                            ${currentUserRole === 'partner' ? partnerLinks : ''}
                            ${currentUserRole !== 'agent' ? `<a href="#" id="royalty-link" data-panel="royalty-panel" data-title="royalty" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-hand-holding-usd w-6 text-gray-400"></i><span class="ml-3" data-lang-key="royalty"></span></a>
                            <a href="#" id="stats-link" data-panel="stats-panel" data-title="statistics" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-chart-bar w-6 text-gray-400"></i><span class="ml-3" data-lang-key="statistics"></span></a>` : ''}
                            <a href="#" id="settings-link" data-panel="settings-panel" data-title="settings" class="sidebar-link flex items-center py-3 px-6"><i class="fas fa-cog w-6 text-gray-400"></i><span class="ml-3" data-lang-key="settings"></span></a>
                        </nav>
                        <div class="p-4 border-t border-gray-800"><button id="logout-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">Выйти</button></div>
                    </aside>
                    <div class="flex-1 flex flex-col overflow-hidden">
                        <header class="bg-gray-900 shadow-md">
                            <div class="flex items-center justify-between h-16 px-6">
                                <button id="menu-toggle-btn" class="md:hidden text-2xl text-gray-300"><i class="fas fa-bars"></i></button>
                                <div id="page-title" class="text-2xl font-bold" data-lang-key="content"></div>
                                <div id="welcome-message" class="text-lg" data-lang-key="welcome"></div>
                            </div>
                        </header>
                        <main id="main-content" class="flex-grow p-6 overflow-y-auto">
                           <div id="content-panel"></div>
                           <div id="partners-panel" class="hidden"></div>
                           <div id="users-panel" class="hidden"></div>
                           <div id="archive-panel" class="hidden"></div>
                           <div id="requests-panel" class="hidden"></div>
                           <div id="support-chats-panel" class="hidden"></div>
                           <div id="admins-panel" class="hidden"></div>
                           <div id="promocodes-panel" class="hidden"></div>
                           <div id="royalty-panel" class="hidden"></div>
                           <div id="stats-panel" class="hidden"></div>
                           <div id="faq-panel" class="hidden"></div>
                           <div id="privacy-panel" class="hidden"></div>
                           <div id="settings-panel" class="hidden"></div>
                        </main>
                    </div>
                </div>
            `;
            
            appContainer.innerHTML = dashboardHTML;
            document.getElementById('logout-btn').addEventListener('click', () => signOut(auth));
            document.getElementById('menu-toggle-btn').addEventListener('click', () => {
                document.getElementById('sidebar').classList.toggle('-translate-x-full');
            });
            setupMenuListeners();
            // Default panel based on role
            const firstPanel = document.querySelector('.sidebar-link');
            if(firstPanel) {
                firstPanel.click();
            } else {
                 renderSettingsPanel();
            }
            setDashboardLanguage(currentDashboardLanguage);
        }

        function renderContentPanel() {
            const panel = document.getElementById('content-panel');
            panel.innerHTML = `
            <div class="flex justify-end items-center mb-6">
                <button id="add-movie-btn" class="action-btn text-white font-bold py-2 px-4 rounded-lg flex items-center">
                    <i class="fas fa-plus mr-2"></i><span data-lang-key="addMovie"></span>
                </button>
            </div>
            <div id="movie-management" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 2xl:grid-cols-7 gap-4">
                ${renderMovieCards(currentUserRole === 'partner')}
            </div>`;
             attachContentActionListeners();
             setDashboardLanguage(currentDashboardLanguage);
        }
        function renderMovieCards(isPartner) {
            const moviesToDisplay = isPartner ? movies.filter(m => m.partnerId === currentPartnerId) : movies;
            if (moviesToDisplay.length === 0) return `<p class="col-span-full text-center text-gray-500">No movies uploaded yet.</p>`;
            return moviesToDisplay.map(movie => `
            <div class="movie-card rounded-lg overflow-hidden shadow-lg flex flex-col">
                <img src="${movie.poster}" onerror="this.onerror=null;this.src='https://placehold.co/400x600/ef4444/ffffff?text=Error';" alt="${movie.title}" class="w-full h-auto object-cover aspect-[2/3]">
                <div class="p-4 flex flex-col flex-grow">
                    <h3 class="font-bold text-lg truncate">${movie.title}</h3>
                    <p class="text-gray-400 text-sm mb-3">${movie.year}</p>
                    <div class="mt-auto flex justify-end gap-3">
                        <button class="edit-btn text-blue-400 hover:text-blue-300 text-xl" data-id="${movie.id}"><i class="fas fa-edit"></i></button>
                        ${(currentUserRole !== 'partner' && currentUserRole !== 'agent') ? `<button class="delete-btn text-red-500 hover:text-red-400 text-xl" data-id="${movie.id}"><i class="fas fa-trash"></i></button>` : ''}
                    </div>
                </div>
            </div>`).join('');
        }
        
        function renderRoyaltyPanel() {
            const panel = document.getElementById('royalty-panel');
            panel.innerHTML = `<div id="royalty-list-view"></div><div id="royalty-details-view" class="hidden"></div>`;
            renderRoyaltyListView();
        }
        
        function renderStatsPanel() {
            const panel = document.getElementById('stats-panel');
            const totalUsers = users.length;
            const totalPartners = partners.length;
            const totalMovies = movies.length;
            const totalViews = movies.reduce((acc, movie) => acc + (movie.views || 0), 0);

            const topMovies = [...movies].sort((a, b) => (b.views || 0) - (a.views || 0)).slice(0, 10);
            const topMoviesHtml = topMovies.map((movie, index) => `
                <tr class="table-row">
                    <td class="p-3 text-sm font-bold">${index + 1}</td>
                    <td class="p-3 text-sm">${movie.title}</td>
                    <td class="p-3 text-sm font-semibold text-green-400">${(movie.views || 0).toLocaleString('ru-RU')}</td>
                </tr>
            `).join('');

            panel.innerHTML = `
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                    <div class="bg-gray-800 p-6 rounded-lg flex items-center">
                        <i class="fas fa-users text-4xl text-blue-400 mr-4"></i>
                        <div>
                            <p class="text-gray-400 text-sm" data-lang-key="users"></p>
                            <p class="text-2xl font-bold">${totalUsers.toLocaleString('ru-RU')}</p>
                        </div>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg flex items-center">
                        <i class="fas fa-handshake text-4xl text-green-400 mr-4"></i>
                        <div>
                            <p class="text-gray-400 text-sm" data-lang-key="partners"></p>
                            <p class="text-2xl font-bold">${totalPartners.toLocaleString('ru-RU')}</p>
                        </div>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg flex items-center">
                        <i class="fas fa-film text-4xl text-purple-400 mr-4"></i>
                        <div>
                            <p class="text-gray-400 text-sm" data-lang-key="totalMovies"></p>
                            <p class="text-2xl font-bold">${totalMovies.toLocaleString('ru-RU')}</p>
                        </div>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg flex items-center">
                        <i class="fas fa-eye text-4xl text-yellow-400 mr-4"></i>
                        <div>
                            <p class="text-gray-400 text-sm" data-lang-key="totalViews"></p>
                            <p class="text-2xl font-bold">${totalViews.toLocaleString('ru-RU')}</p>
                        </div>
                    </div>
                </div>

                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                    <div class="bg-gray-800 p-6 rounded-lg">
                        <h3 class="text-lg font-bold mb-4" data-lang-key="newUsersLast7Days"></h3>
                        <canvas id="user-stats-chart"></canvas>
                    </div>
                    <div class="bg-gray-800 p-6 rounded-lg">
                        <h3 class="text-lg font-bold mb-4" data-lang-key="top10MoviesByViews"></h3>
                        <div class="overflow-x-auto">
                            <table class="w-full">
                                <thead class="table-header">
                                    <tr>
                                        <th class="p-3 text-left text-sm font-semibold">#</th>
                                        <th class="p-3 text-left text-sm font-semibold" data-lang-key="title"></th>
                                        <th class="p-3 text-left text-sm font-semibold" data-lang-key="views"></th>
                                    </tr>
                                </thead>
                                <tbody>${topMoviesHtml}</tbody>
                            </table>
                        </div>
                    </div>
                </div>
            `;
            initStatsChart();
            setDashboardLanguage(currentDashboardLanguage);
        }

        function renderSettingsPanel() {
            const panel = document.getElementById('settings-panel');
            const isSuperAdmin = currentUserRole === 'admin';
            
            panel.innerHTML = `
                <div class="space-y-8 max-w-4xl mx-auto">
                    <div class="bg-gray-800 p-6 rounded-lg">
                        <h3 class="text-xl font-bold mb-4 border-b border-gray-700 pb-2" data-lang-key="profileInfo"></h3>
                        <form id="profile-form" class="space-y-4">
                            <div>
                                <label for="displayName" class="block text-sm font-medium text-gray-400" data-lang-key="name"></label>
                                <input type="text" id="displayName" class="settings-input mt-1 block w-full rounded-md" value="${currentUserData?.displayName || ''}">
                            </div>
                            <div>
                                <label for="email" class="block text-sm font-medium text-gray-400" data-lang-key="contactEmail"></label>
                                <input type="email" id="email" class="settings-input mt-1 block w-full rounded-md" value="${currentUserData?.email || ''}" disabled>
                            </div>
                            <div class="text-right">
                                <button type="submit" class="action-btn text-white font-bold py-2 px-4 rounded-lg"><span data-lang-key="saveSettings"></span></button>
                            </div>
                        </form>
                    </div>

                    <div class="bg-gray-800 p-6 rounded-lg">
                        <h3 class="text-xl font-bold mb-4 border-b border-gray-700 pb-2" data-lang-key="changePassword"></h3>
                        <form id="password-form" class="space-y-4">
                            <div>
                                <label for="currentPassword" class="block text-sm font-medium text-gray-400" data-lang-key="currentPassword"></label>
                                <input type="password" id="currentPassword" class="settings-input mt-1 block w-full rounded-md" required>
                            </div>
                            <div>
                                <label for="newPassword" class="block text-sm font-medium text-gray-400" data-lang-key="newPassword"></label>
                                <input type="password" id="newPassword" class="settings-input mt-1 block w-full rounded-md" required>
                            </div>
                            <div class="text-right">
                                <button type="submit" class="action-btn text-white font-bold py-2 px-4 rounded-lg"><span data-lang-key="changePassword"></span></button>
                            </div>
                        </form>
                    </div>

                    <div class="bg-gray-800 p-6 rounded-lg">
                        <h3 class="text-xl font-bold mb-4 border-b border-gray-700 pb-2" data-lang-key="languageSettings"></h3>
                        <div class="flex space-x-2">
                           <button class="lang-btn flex-1 p-2 rounded-md bg-gray-700 hover:bg-gray-600" data-lang="ru">Русский</button>
                           <button class="lang-btn flex-1 p-2 rounded-md bg-gray-700 hover:bg-gray-600" data-lang="uz">O'zbekcha</button>
                        </div>
                    </div>
                    
                    ${isSuperAdmin ? `
                    <div class="bg-gray-800 p-6 rounded-lg">
                        <h3 class="text-xl font-bold mb-4 border-b border-gray-700 pb-2" data-lang-key="royaltySettings"></h3>
                        <form id="royalty-settings-form" class="space-y-4">
                            <div>
                                <label for="royaltyPerView" class="block text-sm font-medium text-gray-400" data-lang-key="royaltyPerView"></label>
                                <input type="number" step="0.01" id="royaltyPerView" class="settings-input mt-1 block w-full rounded-md" value="${settings.royaltyPerView || 0.05}">
                            </div>
                            <div class="text-right">
                                <button type="submit" class="action-btn text-white font-bold py-2 px-4 rounded-lg"><span data-lang-key="saveSettings"></span></button>
                            </div>
                        </form>
                    </div>` : ''}
                </div>
            `;
            
            document.getElementById('profile-form').addEventListener('submit', handleUpdateProfile);
            document.getElementById('password-form').addEventListener('submit', handleChangePassword);
            if(isSuperAdmin) {
                document.getElementById('royalty-settings-form').addEventListener('submit', handleUpdateSettings);
            }
            document.querySelectorAll('.lang-btn').forEach(btn => {
                btn.addEventListener('click', (e) => setDashboardLanguage(e.target.dataset.lang));
            });

            setDashboardLanguage(currentDashboardLanguage);
        }

        function renderPartnersPanel() {
            const panel = document.getElementById('partners-panel');
            panel.innerHTML = `
                <div id="partner-list-view">
                    <div class="flex justify-between items-center mb-6">
                        <input type="text" id="partner-search-input" onkeyup="filterPartners()" class="form-input w-full md:w-1/3 p-3 rounded-md" data-lang-key="partnerSearchPlaceholder">
                        <button id="add-partner-btn" class="action-btn text-white font-bold py-3 px-5 rounded-lg flex items-center">
                            <i class="fas fa-plus mr-2"></i><span data-lang-key="addPartner"></span>
                        </button>
                    </div>
                    <div id="partners-table-container" class="overflow-x-auto"></div>
                </div>
                <div id="partner-details-view" class="hidden"></div>`;
            renderPartnerTable(partners);
            document.getElementById('add-partner-btn').addEventListener('click', () => openPartnerModal());
            setDashboardLanguage(currentDashboardLanguage);
        }

        window.filterPartners = function() {
            const searchTerm = document.getElementById('partner-search-input').value.toLowerCase();
            const filtered = partners.filter(p =>
                (p.customId && p.customId.toLowerCase().includes(searchTerm)) ||
                (p.displayName && p.displayName.toLowerCase().includes(searchTerm)) ||
                (p.email && p.email.toLowerCase().includes(searchTerm))
            );
            renderPartnerTable(filtered);
        }

        function renderPartnerTable(partnerList) {
             const container = document.getElementById('partners-table-container');
             if (!container) return;
             const tableHeaders = `
            <thead class="table-header">
                <tr>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="name"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide">Email</th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="customId"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide">UID</th>
                </tr>
            </thead>`;
            const tableRows = partnerList.map(p => `
            <tr class="table-row hover:bg-gray-700 cursor-pointer" data-id="${p.uid}">
                <td class="p-3 text-sm font-bold">${p.displayName || 'N/A'}</td>
                <td class="p-3 text-sm">${p.email}</td>
                <td class="p-3 text-sm font-semibold text-blue-400">${p.customId || '-'}</td>
                <td class="p-3 text-xs text-gray-400 truncate" style="max-width: 150px;">${p.uid}</td>
            </tr>`).join('');
            
            container.innerHTML = `<table class="w-full min-w-full rounded-lg overflow-hidden">${tableHeaders}<tbody>${tableRows}</tbody></table>`;
            
            container.querySelectorAll('tr[data-id]').forEach(row => {
                row.addEventListener('click', (e) => showPartnerDetails(e.currentTarget.dataset.id));
            });

            setDashboardLanguage(currentDashboardLanguage);
        }
        
        // --- FOYDALANUVCHILAR PANELI UCHUN YANGI FUNKSIYALAR ---
        
        function renderUsersPanel() {
            const panel = document.getElementById('users-panel');
            panel.innerHTML = `
                <div id="user-list-view">
                    <div class="mb-4">
                        <input type="text" id="user-search-input" onkeyup="filterUsers()" class="form-input w-full p-3 rounded-md" data-lang-key="userSearchPlaceholder">
                    </div>
                    <div id="users-table-container" class="overflow-x-auto"></div>
                </div>
                <div id="user-details-view" class="hidden"></div>
            `;
            renderUserTable(users);
            setDashboardLanguage(currentDashboardLanguage);
        }

        window.filterUsers = function() {
            const searchTerm = document.getElementById('user-search-input').value.toLowerCase();
            if (!searchTerm) {
                renderUserTable(users);
                return;
            }
            const filteredUsers = users.filter(u =>
                (u.customId && u.customId.toLowerCase().includes(searchTerm)) ||
                (u.displayName && u.displayName.toLowerCase().includes(searchTerm)) ||
                (u.email && u.email.toLowerCase().includes(searchTerm))
            );
            renderUserTable(filteredUsers);
        }

        function renderUserTable(userList) {
            const container = document.getElementById('users-table-container');
            if (!container) return;

            const tableHeaders = `
            <thead class="table-header">
                <tr>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="name"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide">Email</th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="customId"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide">Firebase UID</th>
                </tr>
            </thead>`;
            const tableRows = userList.map(u => `
            <tr class="table-row hover:bg-gray-700 cursor-pointer" data-id="${u.uid}">
                <td class="p-3 text-sm font-bold">${u.displayName || 'N/A'}</td>
                <td class="p-3 text-sm">${u.email}</td>
                <td class="p-3 text-sm font-semibold text-green-400">${u.customId || '-'}</td>
                <td class="p-3 text-xs text-gray-400 truncate" style="max-width: 150px;">${u.uid}</td>
            </tr>`).join('');
            
            container.innerHTML = `<table class="w-full min-w-full rounded-lg overflow-hidden">${tableHeaders}<tbody>${tableRows}</tbody></table>`;
            attachUserActionListeners();
            setDashboardLanguage(currentDashboardLanguage);
        }

        async function showUserDetails(userId) {
            document.getElementById('user-list-view').classList.add('hidden');
            const detailsView = document.getElementById('user-details-view');
            detailsView.classList.remove('hidden');
            detailsView.innerHTML = `<div class="flex items-center justify-center h-full"><i class="fas fa-spinner fa-spin text-white text-3xl"></i></div>`;

            // Ma'lumotlar bazasidan eng so'nggi ma'lumotni olish
            const userRef = doc(db, "users", userId);
            const userDoc = await getDoc(userRef);

            if (!userDoc.exists()) {
                detailsView.innerHTML = `<p data-lang-key="userNotFound"></p>`;
                setDashboardLanguage(currentDashboardLanguage);
                return;
            }
            const user = userDoc.data();

            const registrationDate = user.createdAt?.toDate ? new Date(user.createdAt.toDate()).toLocaleDateString() : 'Noma\'lum';
            
            detailsView.innerHTML = `
                <div class="bg-gray-800 p-6 rounded-lg">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-2xl font-bold" data-lang-key="userDetails"></h2>
                        <button id="back-to-users-btn" class="bg-gray-600 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-lg" data-lang-key="back"></button>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="bg-gray-900 p-4 rounded-lg space-y-3">
                            <div><strong class="text-gray-400 w-40 inline-block" data-lang-key="name"></strong> <span class="font-semibold">${user.displayName || 'N/A'}</span></div>
                            <div><strong class="text-gray-400 w-40 inline-block">Email:</strong> <span>${user.email}</span></div>
                            <div><strong class="text-gray-400 w-40 inline-block" data-lang-key="registrationDate"></strong> <span>${registrationDate}</span></div>
                        </div>
                        <div class="bg-gray-900 p-4 rounded-lg space-y-3">
                            <div><strong class="text-gray-400 w-40 inline-block">Firebase UID:</strong> <code class="text-sm text-gray-400 break-all">${user.uid}</code></div>
                            <div class="flex items-center">
                                <strong class="text-gray-400 w-40 inline-block" data-lang-key="assignedId"></strong>
                                <code class="text-lg text-green-400">${user.customId || 'Mavjud emas'}</code>
                            </div>
                        </div>
                    </div>

                    <!-- Account Recovery Section -->
                    <div class="mt-8 pt-6 border-t border-gray-700">
                        <h3 class="text-xl font-bold mb-4" data-lang-key="accountRecovery"></h3>
                        <div id="recovery-section" class="bg-gray-900 p-4 rounded-lg">
                            <div id="secret-word-prompt">
                                <p class="text-gray-400 mb-2" data-lang-key="enterSecretWord"></p>
                                <div class="flex gap-2">
                                    <input type="password" id="secret-word-input" class="modal-input w-full p-2 rounded-md" data-lang-key="secretWord" placeholder="Maxfiy so'z">
                                    <button id="confirm-secret-word-btn" class="action-btn text-white font-bold py-2 px-4 rounded-lg"><span data-lang-key="confirm"></span></button>
                                </div>
                                <p id="secret-word-error" class="text-red-500 text-sm mt-2 h-4"></p>
                            </div>
                            <div id="recovery-code-display" class="hidden text-center">
                                <h4 class="text-lg font-semibold" data-lang-key="tempCodeForLogin"></h4>
                                <p id="temp-code" class="text-2xl font-mono tracking-widest bg-black p-3 rounded-lg my-3 break-all cursor-pointer" title="Nusxalash"></p>
                                <p class="text-gray-400 text-sm">
                                    <span data-lang-key="codeWillUpdateIn"></span>
                                    <span id="countdown-timer" class="font-bold text-white">30</span>
                                    <span data-lang-key="seconds"></span>
                                </p>
                                <h4 class="text-lg font-semibold mt-6" data-lang-key="qrCodeForLogin"></h4>
                                <div id="qrcode-container"></div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-8 pt-6 border-t border-gray-700">
                        <button id="archive-user-btn" data-id="${user.uid}" class="w-full bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center gap-2">
                            <i class="fas fa-archive"></i> <span data-lang-key="archiveUser"></span>
                        </button>
                    </div>
                </div>
            `;

            document.getElementById('back-to-users-btn').addEventListener('click', () => {
                if (tempCodeInterval) clearInterval(tempCodeInterval);
                detailsView.classList.add('hidden');
                document.getElementById('user-list-view').classList.remove('hidden');
            });
            document.getElementById('archive-user-btn').addEventListener('click', (e) => {
                const userIdToArchive = e.currentTarget.dataset.id;
                const title = dashboardTranslations[currentDashboardLanguage].archiveUserConfirmTitle;
                const message = dashboardTranslations[currentDashboardLanguage].archiveUserConfirmMessage;
                openConfirmationModal(title, message, () => archiveUser(userIdToArchive), "archive");
            });
            document.getElementById('confirm-secret-word-btn').addEventListener('click', () => {
                const input = document.getElementById('secret-word-input').value;
                const errorEl = document.getElementById('secret-word-error');
                if (input === user.secretWord) {
                    errorEl.textContent = '';
                    document.getElementById('secret-word-prompt').classList.add('hidden');
                    document.getElementById('recovery-code-display').classList.remove('hidden');
                    startTempCodeGeneration(user.uid, user.email);
                } else {
                    errorEl.textContent = dashboardTranslations[currentDashboardLanguage].wrongSecretWord;
                }
            });
            document.getElementById('temp-code')?.addEventListener('click', (e) => {
                navigator.clipboard.writeText(e.target.textContent);
                showToast("Kod nusxalandi!");
            });

            setDashboardLanguage(currentDashboardLanguage);
        }

        function renderRequestsPanel() {
            const panel = document.getElementById('requests-panel');
            if (terminationRequests.length === 0) {
                panel.innerHTML = `<p class="text-center text-gray-500" data-lang-key="noNewRequests"></p>`;
                setDashboardLanguage(currentDashboardLanguage);
                return;
            }

            const tableHeaders = `
            <thead class="table-header">
                <tr>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="partnerId"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="name"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="requestDate"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="actions"></th>
                </tr>
            </thead>`;
            const tableRows = terminationRequests.map(req => {
                const partnerInfo = partners.find(p => p.uid === req.partnerId);
                return `
                <tr class="table-row">
                    <td class="p-3 text-sm font-semibold text-blue-400">${partnerInfo?.customId || req.partnerId}</td>
                    <td class="p-3 text-sm">${partnerInfo?.displayName || 'N/A'}</td>
                    <td class="p-3 text-sm">${req.timestamp ? new Date(req.timestamp).toLocaleString() : 'N/A'}</td>
                    <td class="p-3 text-sm flex gap-2">
                        <button class="accept-request-btn bg-green-600 hover:bg-green-500 text-white font-bold py-1 px-3 rounded" data-id="${req.id}" data-partner-id="${req.partnerId}">
                            <i class="fas fa-check"></i> <span data-lang-key="accept"></span>
                        </button>
                        <button class="decline-request-btn bg-red-600 hover:bg-red-500 text-white font-bold py-1 px-3 rounded" data-id="${req.id}">
                            <i class="fas fa-times"></i> <span data-lang-key="decline"></span>
                        </button>
                    </td>
                </tr>`;
            }).join('');
            
            panel.innerHTML = `<div class="overflow-x-auto"><table class="w-full min-w-full rounded-lg overflow-hidden">${tableHeaders}<tbody>${tableRows}</tbody></table></div>`;
            
            panel.querySelectorAll('.accept-request-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const requestId = e.currentTarget.dataset.id;
                    const partnerId = e.currentTarget.dataset.partnerId;
                    const title = dashboardTranslations[currentDashboardLanguage].acceptRequestTitle;
                    const message = dashboardTranslations[currentDashboardLanguage].acceptRequestMessage;
                    openConfirmationModal(title, message, () => acceptTerminationRequest(requestId, partnerId), "accept");
                });
            });
            panel.querySelectorAll('.decline-request-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const requestId = e.currentTarget.dataset.id;
                    const title = dashboardTranslations[currentDashboardLanguage].declineRequestTitle;
                    const message = dashboardTranslations[currentDashboardLanguage].declineRequestMessage;
                    openConfirmationModal(title, message, () => declineTerminationRequest(requestId), "decline");
                });
            });

            setDashboardLanguage(currentDashboardLanguage);
        }

        async function deleteSupportChat(chatId) {
            try {
                await deleteDoc(doc(db, "supportChats", chatId));
                showToast(dashboardTranslations[currentDashboardLanguage].chatDeletedSuccess);
            } catch (error) {
                console.error("Error deleting chat:", error);
                showToast("Error deleting chat.", true);
            }
        }
        
        function renderSupportChatsPanel() {
            const panel = document.getElementById('support-chats-panel');
            if (unsubSupportChatsList) unsubSupportChatsList();
            unsubSupportChatsList = onSnapshot(query(collection(db, 'supportChats')), (snapshot) => {
                supportChats = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                if (supportChats.length === 0) {
                    panel.innerHTML = `<p class="text-center text-gray-500">No support chats.</p>`;
                    return;
                }
                const tableHeaders = `
                <thead class="table-header">
                    <tr>
                        <th class="p-3 text-left text-sm font-semibold tracking-wide">ID</th>
                        <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="name"></th>
                        <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="status"></th>
                        <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="date"></th>
                        <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="actions"></th>
                    </tr>
                </thead>`;
                const rows = supportChats.map(chat => {
                    const createdAt = chat.createdAt?.seconds ? new Date(chat.createdAt.seconds * 1000) : null;
                    const createdStr = createdAt ? createdAt.toLocaleString() : 'N/A';
                    return `
                    <tr class="table-row">
                        <td class="p-3 text-sm font-semibold text-blue-400">${chat.userId ? chat.userId.substring(0, 8) : chat.id.substring(0, 8)}...</td>
                        <td class="p-3 text-sm">${chat.userName || 'N/A'}</td>
                        <td class="p-3 text-sm capitalize">${chat.status}</td>
                        <td class="p-3 text-sm">${createdStr}</td>
                        <td class="p-3 text-sm flex gap-2">
                            <button class="open-support-chat-btn bg-blue-600 hover:bg-blue-500 text-white font-bold py-1 px-3 rounded" data-chat-id="${chat.id}"><i class="fas fa-comments"></i></button>
                            <button class="delete-support-chat-btn bg-red-700 hover:bg-red-600 text-white font-bold py-1 px-3 rounded" data-chat-id="${chat.id}"><i class="fas fa-trash"></i></button>
                        </td>
                    </tr>`;
                }).join('');
                panel.innerHTML = `<div class="overflow-x-auto"><table class="w-full min-w-full rounded-lg overflow-hidden">${tableHeaders}<tbody>${rows}</tbody></table></div>`;
                
                panel.querySelectorAll('.open-support-chat-btn').forEach(btn => {
                    btn.addEventListener('click', () => openSupportChatAdmin(btn.dataset.chatId));
                });

                panel.querySelectorAll('.delete-support-chat-btn').forEach(btn => {
                    btn.addEventListener('click', () => {
                        const chatId = btn.dataset.chatId;
                        const title = dashboardTranslations[currentDashboardLanguage].deleteChatConfirmTitle;
                        const message = dashboardTranslations[currentDashboardLanguage].deleteChatConfirmMessage;
                        openConfirmationModal(title, message, () => deleteSupportChat(chatId), "delete");
                    });
                });

                setDashboardLanguage(currentDashboardLanguage);
            });
        }
        
        function openSupportChatAdmin(chatId) {
            activeAdminChatId = chatId;
            const chatRef = doc(db, 'supportChats', chatId);

            const modalHTML = `
                <div class="relative bg-gray-900 rounded-lg p-4 w-11/12 max-w-lg shadow-xl flex flex-col h-[80vh]">
                    <button id="close-modal-btn" class="absolute top-2 right-3 text-gray-500 hover:text-white text-2xl">&times;</button>
                    <h3 class="text-lg font-bold mb-3" data-lang-key="supportChats"></h3>
                    <div id="admin-chat-messages" class="flex-1 overflow-y-auto mb-3 space-y-3 p-2 bg-gray-800 rounded-md"></div>
                    <form id="admin-chat-form" class="flex items-center space-x-2">
                        <input id="admin-chat-input" type="text" class="flex-1 bg-gray-700 text-white p-2 rounded-md focus:outline-none" placeholder="Xabaringizni yozing..." />
                        <button type="submit" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md">Yuborish</button>
                    </form>
                    <button id="admin-chat-close-btn" class="w-full bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md mt-2">Chatni yopish</button>
                </div>`;
            
            const modalOverlay = document.getElementById('modal-overlay');
            modalOverlay.innerHTML = modalHTML;
            modalOverlay.classList.remove('hidden');
            setDashboardLanguage(currentDashboardLanguage);

            updateDoc(chatRef, {
                status: 'active',
                assignedAdminId: auth.currentUser.uid,
                assignedAdminName: currentUserData?.displayName || 'Admin'
            });

            if (adminChatUnsub) adminChatUnsub();
            adminChatUnsub = onSnapshot(chatRef, (docSnap) => {
                const data = docSnap.data();
                const messagesEl = document.getElementById('admin-chat-messages');
                if (!messagesEl || !data) return;
                messagesEl.innerHTML = '';
                const messages = data.messages || [];
                messages.forEach(msg => {
                    const msgWrapper = document.createElement('div');
                    msgWrapper.classList.add('flex', 'flex-col');
                    
                    const bubble = document.createElement('div');
                    bubble.classList.add('p-2', 'rounded-lg', 'max-w-[80%]');
                    
                    let senderName = '';
                    if (msg.sender === 'user') {
                        bubble.classList.add('bg-gray-700', 'text-white', 'self-start');
                        senderName = data.userName || 'User';
                    } else if (msg.sender === 'admin') {
                        bubble.classList.add('bg-blue-600', 'text-white', 'self-end');
                        senderName = msg.adminName || 'Admin';
                    } else {
                        bubble.classList.add('bg-gray-600', 'text-gray-300', 'self-center', 'text-xs', 'italic');
                    }
                    
                    bubble.innerHTML = `${senderName ? `<strong class="block mb-1">${senderName}</strong>` : ''}${msg.content}`;
                    msgWrapper.appendChild(bubble);
                    
                    const timeEl = document.createElement('span');
                    timeEl.classList.add('text-xs', 'text-gray-500', 'mt-1', msg.sender === 'admin' ? 'self-end' : (msg.sender === 'user' ? 'self-start' : 'self-center'));
                    if (msg.timestamp?.seconds) {
                        timeEl.textContent = new Date(msg.timestamp.seconds * 1000).toLocaleTimeString();
                    }
                    if (msg.timestamp) msgWrapper.appendChild(timeEl);
                    
                    messagesEl.appendChild(msgWrapper);
                });
                messagesEl.scrollTop = messagesEl.scrollHeight;
            });

            const cleanup = () => {
                if (adminChatUnsub) adminChatUnsub();
                adminChatUnsub = null;
                activeAdminChatId = null;
                closeModal();
            };

            document.getElementById('close-modal-btn').addEventListener('click', cleanup);
            
            document.getElementById('admin-chat-form').addEventListener('submit', async (e) => {
                e.preventDefault();
                const inputEl = document.getElementById('admin-chat-input');
                const text = inputEl.value.trim();
                if (!text) return;
                await updateDoc(chatRef, {
                    messages: arrayUnion({
                        sender: 'admin',
                        adminId: auth.currentUser.uid,
                        adminName: currentUserData?.displayName || 'Admin',
                        content: text,
                        timestamp: new Date()
                    })
                });
                inputEl.value = '';
            });
            
            document.getElementById('admin-chat-close-btn').addEventListener('click', async () => {
                await updateDoc(chatRef, { status: 'closed' });
                cleanup();
            });
        }
        
        function renderFaqPanel() {
            const panel = document.getElementById('faq-panel');
            panel.innerHTML = `<div class="bg-gray-800 p-6 rounded-lg">
                <h2 class="text-2xl font-bold mb-4">Часто задаваемые вопросы (FAQ)</h2>
                <div class="space-y-4">
                    <div>
                        <h3 class="font-semibold">Как добавить новый фильм?</h3>
                        <p class="text-gray-400">Перейдите в раздел "Контент" и нажмите кнопку "Добавить фильм". Заполните все необходимые поля и сохраните.</p>
                    </div>
                    <div>
                        <h3 class="font-semibold">Где я могу увидеть свой доход?</h3>
                        <p class="text-gray-400">Ваш доход и подробная статистика доступны в разделе "Роялти".</p>
                    </div>
                </div>
            </div>`;
        }

        function renderPrivacyPanel() {
             const panel = document.getElementById('privacy-panel');
             panel.innerHTML = `<div class="bg-gray-800 p-6 rounded-lg">
                <h2 class="text-2xl font-bold mb-4">Политика конфиденциальности</h2>
                <p class="text-gray-400">Мы обязуемся защищать вашу личную информацию. Все данные, которые вы предоставляете, используются исключительно для работы платформы и расчетов роялти. Мы не передаем ваши данные третьим лицам без вашего согласия.</p>
             </div>`;
        }

        function renderArchivePanel() {
            const panel = document.getElementById('archive-panel');
            if (archivedUsers.length === 0) {
                panel.innerHTML = `<p class="text-center text-gray-500" data-lang-key="archiveEmpty"></p>`;
                setDashboardLanguage(currentDashboardLanguage);
                return;
            }

            const tableHeaders = `
            <thead class="table-header">
                <tr>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="name"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide">Email</th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="customId"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="archivedDate"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="actions"></th>
                </tr>
            </thead>`;
            const tableRows = archivedUsers.map(u => `
            <tr class="table-row hover:bg-gray-700">
                <td class="p-3 text-sm font-bold">${u.displayName || 'N/A'}</td>
                <td class="p-3 text-sm">${u.email}</td>
                <td class="p-3 text-sm font-semibold text-green-400">${u.customId || '-'}</td>
                <td class="p-3 text-sm">${u.archivedAt ? new Date(u.archivedAt).toLocaleDateString() : 'N/A'}</td>
                <td class="p-3 text-sm">
                    <button class="restore-user-btn text-green-400 hover:text-green-300" data-id="${u.uid}">
                        <i class="fas fa-undo-alt mr-1"></i> <span data-lang-key="restoreUser"></span>
                    </button>
                </td>
            </tr>`).join('');
            
            panel.innerHTML = `<div class="overflow-x-auto"><table class="w-full min-w-full rounded-lg overflow-hidden">${tableHeaders}<tbody>${tableRows}</tbody></table></div>`;
            
            panel.querySelectorAll('.restore-user-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const userId = e.currentTarget.dataset.id;
                    const title = dashboardTranslations[currentDashboardLanguage].restoreUserConfirmTitle;
                    const message = dashboardTranslations[currentDashboardLanguage].restoreUserConfirmMessage;
                    openConfirmationModal(title, message, () => restoreUser(userId), "restoreUser");
                });
            });
            setDashboardLanguage(currentDashboardLanguage);
        }

        // --- Event tinglovchilari va harakatlar ---
        function attachContentActionListeners() {
            document.getElementById('add-movie-btn')?.addEventListener('click', () => openMovieModal());
            document.querySelectorAll('.edit-btn').forEach(button => button.addEventListener('click', (e) => { 
                const id = e.currentTarget.dataset.id; 
                const movie = movies.find(m => m.id === id); 
                if(movie) openMovieModal(movie); 
            }));
             if(currentUserRole === 'admin') {
                document.querySelectorAll('.delete-btn').forEach(button => button.addEventListener('click', (e) => { 
                    const id = e.currentTarget.dataset.id; 
                    openConfirmationModal('Удалить фильм?', dashboardTranslations[currentDashboardLanguage].messageDelete, async () => {
                        await deleteDoc(doc(db, "movies", id));
                        showToast('Фильм успешно удален.');
                    }, "delete");
                }));
            }
        }

        function attachUserActionListeners() {
            document.querySelectorAll('#users-table-container tr[data-id]').forEach(row => {
                row.addEventListener('click', (e) => {
                    const userId = e.currentTarget.dataset.id;
                    if (userId) showUserDetails(userId);
                });
            });
        }

        function setupMenuListeners() {
            document.querySelectorAll('.sidebar-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    
                    document.querySelectorAll('.sidebar-link').forEach(l => l.classList.remove('active'));
                    e.currentTarget.classList.add('active');

                    const panelId = e.currentTarget.dataset.panel;
                    const titleKey = e.currentTarget.dataset.title;

                    document.querySelectorAll('#main-content > div').forEach(panel => panel.classList.add('hidden'));
                    
                    const panelToShow = document.getElementById(panelId);
                    panelToShow.classList.remove('hidden');
                    
                    document.getElementById('page-title').setAttribute('data-lang-key', titleKey);
                    
                    switch(panelId) {
                        case 'content-panel': renderContentPanel(); break;
                        case 'royalty-panel': renderRoyaltyPanel(); break;
                        case 'stats-panel': renderStatsPanel(); break;
                        case 'settings-panel': renderSettingsPanel(); break;
                        case 'partners-panel': renderPartnersPanel(); break;
                        case 'users-panel': renderUsersPanel(); break;
                        case 'archive-panel': renderArchivePanel(); break;
                        case 'requests-panel': renderRequestsPanel(); break;
                        case 'support-chats-panel': renderSupportChatsPanel(); break;
                        case 'admins-panel': renderAdminsPanel(); break;
                        case 'faq-panel': renderFaqPanel(); break;
                        case 'privacy-panel': renderPrivacyPanel(); break;
                        case 'promocodes-panel': renderPromoCodesPanel(); break;
                    }
                    
                    setDashboardLanguage(currentDashboardLanguage);
                    if (window.innerWidth < 768) { document.getElementById('sidebar').classList.add('-translate-x-full'); }
                });
            });
        }

        // --- FIREBASE MA'LUMOTLARINI ISHLASH ---

        async function generateAndAssignCustomIds(usersToUpdate, prefix, counterName) {
            if (usersToUpdate.length === 0) return;
            console.log(`Found ${usersToUpdate.length} ${counterName} without a custom ID. Assigning now...`);
            loadingOverlay.classList.remove('hidden');
            const counterRef = doc(db, "counters", counterName);
            try {
                const newLastCount = await runTransaction(db, async (transaction) => {
                    const counterDoc = await transaction.get(counterRef);
                    let currentCount = 0;
                    if (counterDoc.exists()) {
                        currentCount = counterDoc.data().count || 0;
                    }
                    const newCount = currentCount + usersToUpdate.length;
                    transaction.set(counterRef, { count: newCount }, { merge: true });
                    return newCount;
                });
                const batch = writeBatch(db);
                let countForId = newLastCount - usersToUpdate.length;
                usersToUpdate.forEach(user => {
                    countForId++;
                    const newCustomId = `${prefix}-${String(countForId).padStart(4, '0')}`;
                    const userRef = doc(db, "users", user.uid);
                    batch.update(userRef, { customId: newCustomId });
                });
                await batch.commit();
                showToast(`${usersToUpdate.length} ta foydalanuvchiga ID muvaffaqiyatli biriktirildi.`);
            } catch (e) {
                console.error("ID biriktirishda xatolik:", e);
                showToast("ID biriktirishda xatolik yuz berdi.", true);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        }
        
        async function deletePartner(partnerId) {
            loadingOverlay.classList.remove('hidden');
            try {
                await deleteDoc(doc(db, "users", partnerId));
                
                showToast(dashboardTranslations[currentDashboardLanguage].partnerDeletedSuccess);
                document.getElementById('partner-details-view').classList.add('hidden');
                document.getElementById('partner-list-view').classList.remove('hidden');
            } catch (error) {
                console.error("Error deleting partner: ", error);
                showToast("Error deleting partner.", true);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        }

        async function archiveUser(userId) {
            loadingOverlay.classList.remove('hidden');
            try {
                const userRef = doc(db, "users", userId);
                const archivedUserRef = doc(db, "archived_users", userId);
                await runTransaction(db, async (transaction) => {
                    const userDoc = await transaction.get(userRef);
                    if (!userDoc.exists()) throw "User document does not exist!";
                    const userData = userDoc.data();
                    transaction.set(archivedUserRef, { ...userData, archivedAt: new Date().toISOString() });
                    transaction.delete(userRef);
                });
                showToast(dashboardTranslations[currentDashboardLanguage].userArchivedSuccess);
                document.getElementById('user-details-view').classList.add('hidden');
                document.getElementById('user-list-view').classList.remove('hidden');
            } catch (error) {
                console.error("Error archiving user: ", error);
                showToast("Error archiving user.", true);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        }

        async function restoreUser(userId) {
            loadingOverlay.classList.remove('hidden');
            try {
                const archivedUserRef = doc(db, "archived_users", userId);
                const userRef = doc(db, "users", userId);
                await runTransaction(db, async (transaction) => {
                    const archivedDoc = await transaction.get(archivedUserRef);
                    if (!archivedDoc.exists()) throw "Archived user not found!";
                    const userData = archivedDoc.data();
                    delete userData.archivedAt;
                    transaction.set(userRef, userData);
                    transaction.delete(archivedUserRef);
                });
                showToast(dashboardTranslations[currentDashboardLanguage].userRestoredSuccess);
            } catch (error) {
                console.error("Error restoring user: ", error);
                showToast("Error restoring user.", true);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        }

        async function updatePremiumAndTariff(userId, isPremium, tariff) {
            const userRef = doc(db, "users", userId);
            try {
                const dataToUpdate = {
                    isPremium: isPremium,
                    tariff: isPremium ? tariff : null 
                };
                await updateDoc(userRef, dataToUpdate);
                const message = isPremium ? dashboardTranslations[currentDashboardLanguage].premiumEnabled : dashboardTranslations[currentDashboardLanguage].premiumDisabled;
                showToast(message);
                
                const userIndex = users.findIndex(u => u.uid === userId);
                if (userIndex > -1) {
                    users[userIndex].isPremium = isPremium;
                    users[userIndex].tariff = isPremium ? tariff : null;
                }
                
                closeModal();
                showUserDetails(userId);
            } catch (error) {
                console.error("Error updating premium status:", error);
                showToast("Error updating premium status.", true);
            }
        }
        
        async function acceptTerminationRequest(requestId, partnerId) {
            loadingOverlay.classList.remove('hidden');
            try {
                await deleteDoc(doc(db, "users", partnerId));
                await deleteDoc(doc(db, "terminationRequests", requestId));
                showToast(dashboardTranslations[currentDashboardLanguage].requestAccepted);
            } catch (error) {
                console.error("Error accepting request: ", error);
                showToast("Error accepting request.", true);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        }

        async function declineTerminationRequest(requestId) {
            loadingOverlay.classList.remove('hidden');
            try {
                await deleteDoc(doc(db, "terminationRequests", requestId));
                showToast(dashboardTranslations[currentDashboardLanguage].requestDeclined);
            } catch (error) {
                console.error("Error declining request: ", error);
                showToast("Error declining request.", true);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        }

        async function updateCustomId(userId, newId) {
            if (!newId || newId.trim() === "") {
                showToast("ID cannot be empty.", true);
                return;
            }
            const userRef = doc(db, "users", userId);
            try {
                await updateDoc(userRef, { customId: newId.trim() });
                showToast(dashboardTranslations[currentDashboardLanguage].idUpdated);
                const userIndex = users.findIndex(u => u.uid === userId);
                if (userIndex > -1) {
                    users[userIndex].customId = newId.trim();
                }
                document.querySelector('#custom-id-view code').textContent = newId.trim();
                document.getElementById('custom-id-edit').classList.add('hidden');
                document.getElementById('custom-id-view').classList.remove('hidden');

            } catch (error) {
                console.error("Error updating custom ID:", error);
                showToast("Error updating custom ID.", true);
            }
        }

        function setupFirestoreListeners(userId, role) {
            currentUserRole = role;
            currentPartnerId = role === 'partner' ? userId : null;
            
            unsubSettings = onSnapshot(doc(db, "settings", "main"), (docSnap) => {
                if (docSnap.exists()) settings = docSnap.data();
            });

            const moviesQuery = (role === 'admin' || currentUserData?.permissions?.manageContent)
                ? collection(db, "movies") 
                : query(collection(db, "movies"), where("partnerId", "==", userId));

            unsubMovies = onSnapshot(moviesQuery, (snapshot) => {
                movies = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                if(document.getElementById('content-panel')?.offsetParent) renderContentPanel();
            });

            if (role === 'admin' || role === 'agent') {
                unsubAllUsers = onSnapshot(collection(db, "users"), async (snapshot) => {
                    allUsers = snapshot.docs.map(doc => ({ uid: doc.id, ...doc.data() }));
                    
                    users = allUsers.filter(u => u.role === 'user');
                    partners = allUsers.filter(u => u.role === 'partner');
                    
                    currentUserData = allUsers.find(u => u.uid === userId);
                    
                    if(role === 'admin') {
                        const usersWithoutId = users.filter(u => !u.customId);
                        if (usersWithoutId.length > 0) await generateAndAssignCustomIds(usersWithoutId, 'A', 'userCounter');
                        
                        const partnersWithoutId = partners.filter(p => !p.customId);
                        if (partnersWithoutId.length > 0) await generateAndAssignCustomIds(partnersWithoutId, 'P', 'partnerCounter');
                    }

                    if(document.getElementById('users-panel')?.offsetParent) filterUsers();
                    if(document.getElementById('partners-panel')?.offsetParent) filterPartners();
                    if(document.getElementById('requests-panel')?.offsetParent) renderRequestsPanel();
                });

                unsubArchivedUsers = onSnapshot(collection(db, "archived_users"), (snapshot) => {
                    archivedUsers = snapshot.docs.map(doc => ({ uid: doc.id, ...doc.data() }));
                    if(document.getElementById('archive-panel')?.offsetParent) renderArchivePanel();
                });
                unsubRequests = onSnapshot(collection(db, "terminationRequests"), (snapshot) => {
                    terminationRequests = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                    if(document.getElementById('requests-panel')?.offsetParent) renderRequestsPanel();
                });
            } else {
                 unsubAllUsers = onSnapshot(doc(db, "users", userId), (docSnap) => {
                    if (docSnap.exists()) currentUserData = { uid: docSnap.id, ...docSnap.data() };
                });
            }

            unsubPayments = onSnapshot(collection(db, "paymentHistory"), (snapshot) => {
                paymentHistory = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                 if(document.getElementById('royalty-panel')?.offsetParent) renderRoyaltyPanel();
            });
        }

        function unsubscribeListeners() {
            if (unsubMovies) unsubMovies();
            if (unsubAllUsers) unsubAllUsers();
            if (unsubArchivedUsers) unsubArchivedUsers();
            if (unsubRequests) unsubRequests();
            if (unsubPayments) unsubPayments();
            if (unsubSettings) unsubSettings();
            if (tempCodeInterval) clearInterval(tempCodeInterval);
        }
        
        async function saveMovie() {
            const movieId = document.getElementById('movie-id').value;
            // Tanlangan audio va subtitr tillarini aniqlash: faollashtirilgan tugmalar orqali til kodini yig'ish
            const audioSelected = Array.from(document.querySelectorAll('#audio-lang-options .audio-lang-btn')).filter(btn => btn.classList.contains('bg-red-500')).map(btn => btn.dataset.lang);
            const subtitleSelected = Array.from(document.querySelectorAll('#subtitle-lang-options .subtitle-lang-btn')).filter(btn => btn.classList.contains('bg-red-500')).map(btn => btn.dataset.lang);
            // Yuklangan audio va subtitr fayllarining nomlarini yig'ish
            const audioFilesInput = document.getElementById('movie-audio-files');
            const audioFiles = audioFilesInput && audioFilesInput.files ? Array.from(audioFilesInput.files).map(f => f.name) : [];
            const subtitleFilesInput = document.getElementById('movie-subtitle-files');
            const subtitleFiles = subtitleFilesInput && subtitleFilesInput.files ? Array.from(subtitleFilesInput.files).map(f => f.name) : [];
            const movieData = {
                title: document.getElementById('movie-title').value,
                originalTitle: document.getElementById('movie-original-title').value,
                year: parseInt(document.getElementById('movie-year').value, 10),
                genre: document.getElementById('movie-genre').value,
                country: document.getElementById('movie-country').value,
                duration: document.getElementById('movie-duration').value,
                // Asosiy film tili (masalan, UZ, RU yoki TJ). Bo'sh bo'lsa, bosh string saqlanadi.
                language: document.getElementById('movie-language')?.value.trim() || '',
                rating: document.getElementById('movie-rating').value,
                poster: document.getElementById('movie-poster').value,
                studio: document.getElementById('movie-studio').value,
                type: document.getElementById('movie-type').value,
                isPremium: document.getElementById('movie-premium').checked,
                producer: document.getElementById('movie-producer').value,
                cast: document.getElementById('movie-cast').value.split(',').map(s => s.trim()),
                description: document.getElementById('movie-description').value,
                sources: {
                    '480p': document.getElementById('source-480p').value,
                    '720p': document.getElementById('source-720p').value,
                    '1080p': document.getElementById('source-1080p').value,
                    '4K': document.getElementById('source-4k').value,
                },
                partnerId: currentUserRole === 'partner' ? currentPartnerId : null,
                createdAt: serverTimestamp(),
                views: movieId ? (movies.find(m => m.id === movieId)?.views || 0) : Math.floor(Math.random() * 10000),
                // Qo'shimcha maydonlar
                streamType: document.getElementById('movie-stream-type')?.value || 'mp4',
                // Tanlangan audio va subtitr tillari
                audioLangs: audioSelected,
                subtitleLangs: subtitleSelected,
                // Yuklangan fayllar (faqat nomlari saqlanadi)
                audioFiles: audioFiles,
                subtitleFiles: subtitleFiles,
                rights: {
                    regionsAllow: document.getElementById('movie-regions')?.value.split(',').map(s => s.trim()).filter(Boolean),
                    from: document.getElementById('movie-rights-from')?.value || '',
                    to: document.getElementById('movie-rights-to')?.value || ''
                },
                status: document.getElementById('movie-status')?.value || 'draft'
            };

            // Agar film holati "published" bo'lsa, havolalarning to'g'riligini tekshiramiz.
            if (movieData.status === 'published') {
                const valid = await validateVideoSources(movieData.sources);
                if (!valid) {
                    showToast('Ошибка: Ссылки на видео недоступны или содержат неверный тип. Проверьте URL перед публикацией.', true);
                    return;
                }
            }

            try {
                if (movieId) {
                    const movieRef = doc(db, "movies", movieId);
                    await updateDoc(movieRef, movieData);
                    showToast('Фильм успешно обновлен!');
                } else {
                    await addDoc(collection(db, "movies"), movieData);
                    showToast('Фильм успешно добавлен!');
                }
                closeModal();
            } catch (error) {
                console.error("Error saving movie: ", error);
                showToast('Ошибка при сохранении фильма.', true);
            }
        }

        /**
         * Validate that each provided video source URL is reachable and of type video.
         * Uses HEAD requests to check status and Content-Type headers.
         * @param {Object} sources - key/value pairs where values are URLs
         * @returns {Promise<boolean>} true if all sources respond with status 200 and Content-Type starting with "video"
         */
        async function validateVideoSources(sources) {
            if (!sources || typeof sources !== 'object') return false;
            for (const quality in sources) {
                const url = sources[quality];
                if (!url) continue;
                try {
                    const response = await fetch(url, { method: 'HEAD' });
                    if (!response.ok) {
                        return false;
                    }
                    const contentType = response.headers.get('content-type') || '';
                    if (!contentType.toLowerCase().startsWith('video')) {
                        return false;
                    }
                } catch (err) {
                    console.error('URL validation error for', url, err);
                    return false;
                }
            }
            return true;
        }

        // --- ACCOUNT RECOVERY FUNCTIONS ---

        function generateTemporaryCode() {
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
            let code = '';
            for (let i = 0; i < 30; i++) {
                code += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return code;
        }

        function startTempCodeGeneration(userId, userEmail) {
            if (tempCodeInterval) clearInterval(tempCodeInterval);

            const tempCodeEl = document.getElementById('temp-code');
            const countdownEl = document.getElementById('countdown-timer');
            const qrcodeContainer = document.getElementById('qrcode-container');
            const userRef = doc(db, "users", userId);

            let countdown = 30;

            const updateCode = async () => {
                countdown = 30;
                const newCode = generateTemporaryCode();
                const expiresAt = new Date(Date.now() + 30000);

                try {
                    await updateDoc(userRef, {
                        temporaryLogin: {
                            code: newCode,
                            expiresAt: expiresAt
                        }
                    });

                    tempCodeEl.textContent = newCode;
                    
                    // Generate QR Code
                    qrcodeContainer.innerHTML = '';
                    const qrCodeData = JSON.stringify({
                        login: userEmail,
                        tempCode: newCode
                    });
                    new QRCode(qrcodeContainer, {
                        text: qrCodeData,
                        width: 160,
                        height: 160,
                        colorDark : "#000000",
                        colorLight : "#ffffff",
                        correctLevel : QRCode.CorrectLevel.H
                    });

                } catch (error) {
                    console.error("Vaqtinchalik kodni yangilashda xatolik:", error);
                    showToast("Vaqtinchalik kodni yangilashda xatolik yuz berdi.", true);
                }
            };

            tempCodeInterval = setInterval(() => {
                countdown--;
                countdownEl.textContent = countdown;
                if (countdown <= 0) {
                    updateCode();
                }
            }, 1000);

            updateCode(); // Initial call
        }

        // --- AUTENTIFIKATSIYA ---
        onAuthStateChanged(auth, async (user) => {
            const appContainer = document.getElementById('app-container');
            if (user) {
                loadingOverlay.classList.remove('hidden');
                try {
                    const userDocRef = doc(db, "users", user.uid);
                    const userDocSnap = await getDoc(userDocRef);

                    if (userDocSnap.exists()) {
                        currentUserData = userDocSnap.data();
                        const { role } = currentUserData;
                        
                        if (role === 'partner' || role === 'admin' || role === 'agent') {
                           renderDashboard(role);
                           setupFirestoreListeners(user.uid, role);
                        } else {
                            throw new Error("У вас нет прав доступа к этой панели.");
                        }
                    } else {
                        const archivedUserDocRef = doc(db, "archived_users", user.uid);
                        const archivedUserDocSnap = await getDoc(archivedUserDocRef);
                        if(archivedUserDocSnap.exists()){
                            throw new Error("Ваш аккаунт администратора был заблокирован.");
                        } else {
                            throw new Error("Доступ запрещен. Ваша учетная запись не зарегистрирована в системе.");
                        }
                    }
                } catch (error) {
                    showToast(error.message, true);
                    await signOut(auth);
                } finally {
                    loadingOverlay.classList.add('hidden');
                }
            } else {
                unsubscribeListeners();
                currentUserData = null;
                appContainer.innerHTML = renderLoginPage();
                attachLoginListeners();
            }
        });

        async function handleLogin(email, password, errorEl) {
            errorEl.textContent = '';
            loadingOverlay.classList.remove('hidden');
            try {
                await signInWithEmailAndPassword(auth, email, password);
            } catch (error) {
                errorEl.textContent = "Неверные учетные данные или доступ запрещен.";
                console.error("Login Error:", error.code, error.message);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        }

        async function handleGoogleLogin() {
            const provider = new GoogleAuthProvider();
            provider.setCustomParameters({
                prompt: 'select_account'
            });
            loadingOverlay.classList.remove('hidden');
            try {
                await signInWithPopup(auth, provider);
                showToast('Вход через Google...');
            } catch (error) {
                console.error("Google Sign-In Error:", error);
                showToast(`Ошибка входа через Google: ${error.message}`, true);
                loadingOverlay.classList.add('hidden');
            }
        }

        function attachLoginListeners() {
            const partnerForm = document.getElementById('partner-login-form');
            const adminForm = document.getElementById('admin-login-form');
            const partnerTab = document.getElementById('partner-tab');
            const adminTab = document.getElementById('admin-tab');
            const partnerFormContainer = document.getElementById('partner-form-container');
            const adminFormContainer = document.getElementById('admin-form-container');
            
            partnerTab.addEventListener('click', () => {
                partnerTab.classList.add('active');
                adminTab.classList.remove('active');
                partnerFormContainer.classList.remove('hidden');
                adminFormContainer.classList.add('hidden');
            });

            adminTab.addEventListener('click', () => {
                adminTab.classList.add('active');
                partnerTab.classList.remove('active');
                adminFormContainer.classList.remove('hidden');
                partnerFormContainer.classList.add('hidden');
            });

            if (partnerForm) {
                partnerForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const email = document.getElementById('partner-email').value;
                    const password = document.getElementById('partner-password').value;
                    const errorEl = document.getElementById('partner-error');
                    handleLogin(email, password, errorEl);
                });
            }
            if(adminForm) {
                adminForm.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const email = document.getElementById('admin-email').value;
                    const password = document.getElementById('admin-password').value;
                    const errorEl = document.getElementById('admin-error');
                    handleLogin(email, password, errorEl);
                });
            }
            
            document.querySelectorAll('.google-login-btn').forEach(btn => {
                btn.addEventListener('click', handleGoogleLogin);
            });
        }
        
        function renderLoginPage() {
            const loginFormHTML = (type) => `
                <h2 class="text-2xl font-bold text-center mb-6">Вход для ${type === 'partner' ? 'Партнера' : 'Администратора'}</h2>
                <form id="${type}-login-form">
                    <div class="space-y-4">
                        <input type="email" id="${type}-email" class="form-input w-full p-3 rounded-md text-white" placeholder="Email ${type === 'partner' ? 'Партнера' : 'Администратора'}" required>
                        <input type="password" id="${type}-password" class="form-input w-full p-3 rounded-md text-white" placeholder="Пароль" required>
                    </div>
                    <p id="${type}-error" class="text-red-500 text-center text-sm h-4 mt-4"></p>
                    <button type="submit" class="submit-btn w-full text-white font-bold py-3 px-6 rounded-lg mt-6">Войти как ${type === 'partner' ? 'Партнер' : 'Администратор'}</button>
                </form>
                <div class="my-4 flex items-center before:flex-1 before:border-t before:border-gray-600 before:mt-0.5 after:flex-1 after:border-t after:border-gray-600 after:mt-0.5">
                    <p class="text-center font-semibold mx-4 mb-0 text-gray-400">или</p>
                </div>
                <button class="google-login-btn w-full bg-white text-gray-800 font-bold py-3 px-4 rounded-lg flex items-center justify-center hover:bg-gray-200 transition-colors">
                    <i class="fab fa-google mr-3"></i> Войти через Google
                </button>
            `;

            return `
            <div class="login-container flex items-center justify-center min-h-screen p-4">
                <div class="w-full max-w-md">
                    <div class="text-center mb-10">
                        <h1 class="text-3xl md:text-4xl font-bold text-white tracking-wider">SOUNDORA <span class="text-red-500">FILMS</span></h1>
                        <p class="text-gray-400 mt-2">Панель управления</p>
                    </div>
                    <div class="form-panel rounded-lg shadow-lg overflow-hidden">
                        <div class="flex">
                            <button id="partner-tab" class="login-tab active">Партнер</button>
                            <button id="admin-tab" class="login-tab">Администратор</button>
                        </div>
                        <div class="p-8">
                            <div id="partner-form-container">
                                ${loginFormHTML('partner')}
                            </div>
                            <div id="admin-form-container" class="hidden">
                                ${loginFormHTML('admin')}
                            </div>
                        </div>
                    </div>
                </div>
            </div>`;
        }
        // --- Promo code management functions ---
        function generateRandomPromoCode() {
            // Promokod endi faqat katta harflar va raqamlardan iborat bo'ladi, o'qish oson bo'lishi uchun
            const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
            let code = '';
            for (let i = 0; i < 10; i++) {
                code += chars.charAt(Math.floor(Math.random() * chars.length));
            }
            return code;
        }

        async function renderPromoCodesPanel() {
            const panel = document.getElementById('promocodes-panel');
            const lang = currentDashboardLanguage;
            const t = dashboardTranslations[lang] || {};
            panel.innerHTML = `
                <div class="mb-6">
                    <h2 class="text-2xl font-bold mb-4" data-lang-key="promoCodes">${t.promoCodes || 'Promo Codes'}</h2>
                    <div class="bg-gray-800 p-6 rounded-lg">
                        <label for="promo-duration" class="block mb-2" data-lang-key="duration">${t.duration || 'Duration'}</label>
                        <select id="promo-duration" class="form-input p-2 rounded-md w-full text-black">
                            <option value="3d">3 ${t.durationDays || 'days'}</option>
                            <option value="1m">1 ${t.durationMonths || 'month'}</option>
                            <option value="3m">3 ${t.durationMonths || 'months'}</option>
                            <option value="7m">7 ${t.durationMonths || 'months'}</option>
                            <option value="12m">12 ${t.durationMonths || 'months'}</option>
                        </select>
                        <button id="generate-promo-btn" class="action-btn text-white font-bold py-2 px-4 rounded-lg mt-4 flex items-center">
                            <i class="fas fa-magic mr-2"></i><span data-lang-key="generateCode">${t.generateCode || 'Generate Code'}</span>
                        </button>
                        <div id="generated-code-section" class="mt-4 hidden">
                            <p class="text-green-500 font-mono break-all cursor-pointer" title="Nusxalash" id="generated-code-text"></p>
                        </div>
                    </div>
                </div>
                <div id="promocodes-list"></div>
            `;
            document.getElementById('generate-promo-btn').addEventListener('click', async () => {
                const duration = document.getElementById('promo-duration').value;
                const code = generateRandomPromoCode();
                try {
                    // O'ZGARISH: Promokodni hujjat ID'si sifatida ishlatamiz
                    const promoRef = doc(db, 'promo_codes', code);
                    await setDoc(promoRef, {
                        duration: duration,
                        used: false,
                        createdAt: serverTimestamp()
                    });

                    const generatedCodeText = document.getElementById('generated-code-text');
                    generatedCodeText.innerHTML = `<span data-lang-key="codeGenerated">${t.codeGenerated || 'Code generated!'}</span> <span class="font-bold">${code}</span>`;
                    generatedCodeText.onclick = () => {
                        navigator.clipboard.writeText(code);
                        showToast("Kod nusxalandi!");
                    };

                    document.getElementById('generated-code-section').classList.remove('hidden');
                    showToast(dashboardTranslations[currentDashboardLanguage].codeGenerated || 'Code generated!');
                    await renderPromoCodesList();
                } catch (error) {
                    console.error('Error creating promo code', error);
                    showToast('Ошибка при создании кода', true);
                }
            });
            await renderPromoCodesList();
            setDashboardLanguage(currentDashboardLanguage);
        }

        async function renderPromoCodesList() {
            const container = document.getElementById('promocodes-list');
            if (!container) return;
            try {
                const snapshot = await getDocs(collection(db, 'promo_codes'));
                const codes = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                if (codes.length === 0) {
                    container.innerHTML = '<p class="text-gray-400">Нет промокодов.</p>';
                    return;
                }
                let html = '<div class="overflow-x-auto"><table class="w-full text-left"><thead><tr><th class="p-2">Код</th><th class="p-2">Длительность</th><th class="p-2">Использован</th><th class="p-2">Кем использован (UID)</th></tr></thead><tbody>';
                // O'ZGARISH: `item.code` o'rniga `item.id` ishlatiladi
                codes.forEach(item => {
                    html += `<tr class="table-row"><td class="p-2 font-mono">${item.id}</td><td class="p-2">${item.duration}</td><td class="p-2">${item.used ? 'Да' : 'Нет'}</td><td class="p-2 text-xs">${item.usedBy || '-'}</td></tr>`;
                });
                html += '</tbody></table></div>';
                container.innerHTML = html;
            } catch (e) {
                console.error('Error fetching promo codes', e);
                container.innerHTML = '<p class="text-red-500">Ошибка при загрузке промокодов</p>';
            }
        }
        
        // --- ADMIN MANAGEMENT FUNCTIONS ---
        function renderAdminsPanel() {
            const panel = document.getElementById('admins-panel');
            const adminsAndAgents = allUsers.filter(u => u.role === 'admin' || u.role === 'agent');
            
            const tableHeaders = `
            <thead class="table-header">
                <tr>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="name"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide">Email</th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="role"></th>
                    <th class="p-3 text-left text-sm font-semibold tracking-wide" data-lang-key="actions"></th>
                </tr>
            </thead>`;
            const tableRows = adminsAndAgents.map(admin => `
            <tr class="table-row">
                <td class="p-3 text-sm font-bold">${admin.displayName || 'N/A'}</td>
                <td class="p-3 text-sm">${admin.email}</td>
                <td class="p-3 text-sm capitalize">${admin.role}</td>
                <td class="p-3 text-sm">
                    <button class="edit-admin-btn text-blue-400 hover:text-blue-300" data-id="${admin.uid}"><i class="fas fa-edit"></i></button>
                </td>
            </tr>`).join('');

            panel.innerHTML = `
                <div class="flex justify-end items-center mb-6">
                    <button id="add-admin-btn" class="action-btn text-white font-bold py-2 px-4 rounded-lg flex items-center">
                        <i class="fas fa-plus mr-2"></i><span data-lang-key="addAdmin"></span>
                    </button>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full min-w-full rounded-lg overflow-hidden">${tableHeaders}<tbody>${tableRows}</tbody></table>
                </div>
            `;
            
            document.getElementById('add-admin-btn').addEventListener('click', () => openAdminModal());
            panel.querySelectorAll('.edit-admin-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const adminId = e.currentTarget.dataset.id;
                    const adminData = allUsers.find(u => u.uid === adminId);
                    openAdminModal(adminData);
                });
            });
            setDashboardLanguage(currentDashboardLanguage);
        }

        function openAdminModal(admin = null) {
            const isEditing = admin !== null;
            const modalTitleKey = isEditing ? "editAdmin" : "addAdmin";
            const a = admin || { permissions: { accessSupport: true }, role: 'agent' }; // Default for new agent

            const modalHTML = `
            <div class="bg-gray-800 rounded-lg shadow-xl w-full max-w-lg p-6 relative">
                 <button id="close-modal-btn" class="absolute top-3 right-4 text-gray-400 hover:text-white text-2xl z-10">&times;</button>
                 <h3 class="text-2xl font-bold mb-6" data-lang-key="${modalTitleKey}"></h3>
                 <form id="admin-form">
                    <input type="hidden" id="admin-id" value="${a.uid || ''}">
                    <div class="space-y-4">
                        <input type="text" id="admin-name" class="modal-input w-full p-2 rounded-md" placeholder="Имя" value="${a.displayName || ''}" required>
                        <input type="email" id="admin-email" class="modal-input w-full p-2 rounded-md" placeholder="Email" value="${a.email || ''}" ${isEditing ? 'disabled' : ''} required>
                        ${!isEditing ? '<input type="password" id="admin-password" class="modal-input w-full p-2 rounded-md" placeholder="Пароль" required>' : ''}
                         <div>
                            <label for="admin-role" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="role"></label>
                            <select id="admin-role" class="modal-input w-full p-2 rounded-md mt-1">
                                <option value="agent" ${a.role === 'agent' ? 'selected' : ''} data-lang-key="agent"></option>
                                <option value="admin" ${a.role === 'admin' ? 'selected' : ''} data-lang-key="admin"></option>
                            </select>
                        </div>
                    </div>
                    <h4 class="text-lg font-semibold mt-6 mb-2 border-b border-gray-700 pb-1" data-lang-key="permissions"></h4>
                    <div class="grid grid-cols-2 gap-4">
                        <label class="flex items-center"><input type="checkbox" id="perm-content" class="h-4 w-4 text-red-600" ${a.permissions?.manageContent ? 'checked' : ''}> <span class="ml-2" data-lang-key="manageContent"></span></label>
                        <label class="flex items-center"><input type="checkbox" id="perm-users" class="h-4 w-4 text-red-600" ${a.permissions?.manageUsers ? 'checked' : ''}> <span class="ml-2" data-lang-key="manageUsers"></span></label>
                        <label class="flex items-center"><input type="checkbox" id="perm-partners" class="h-4 w-4 text-red-600" ${a.permissions?.managePartners ? 'checked' : ''}> <span class="ml-2" data-lang-key="managePartners"></span></label>
                        <label class="flex items-center"><input type="checkbox" id="perm-support" class="h-4 w-4 text-red-600" ${a.permissions?.accessSupport ? 'checked' : ''}> <span class="ml-2" data-lang-key="accessSupport"></span></label>
                    </div>
                     <button type="submit" class="action-btn w-full text-white font-bold py-3 px-6 rounded-lg mt-8"><span data-lang-key="save"></span></button>
                 </form>
            </div>`;
            document.getElementById('modal-overlay').innerHTML = modalHTML;
            document.getElementById('modal-overlay').classList.remove('hidden');
            document.getElementById('close-modal-btn').addEventListener('click', closeModal);
            document.getElementById('admin-form').addEventListener('submit', (e) => { e.preventDefault(); saveAdmin(); });
            setDashboardLanguage(currentDashboardLanguage);
        }

        async function saveAdmin() {
            const adminId = document.getElementById('admin-id').value;
            const isEditing = !!adminId;

            const name = document.getElementById('admin-name').value;
            const email = document.getElementById('admin-email').value;
            const password = !isEditing ? document.getElementById('admin-password').value : null;
            const role = document.getElementById('admin-role').value;

            const permissions = {
                manageContent: document.getElementById('perm-content').checked,
                manageUsers: document.getElementById('perm-users').checked,
                managePartners: document.getElementById('perm-partners').checked,
                accessSupport: document.getElementById('perm-support').checked
            };

            if (!name || !email || (!isEditing && !password)) {
                showToast("Iltimos, barcha maydonlarni to'ldiring.", true);
                return;
            }
            loadingOverlay.classList.remove('hidden');
            
            try {
                if (isEditing) {
                    const adminRef = doc(db, "users", adminId);
                    await updateDoc(adminRef, {
                        displayName: name,
                        role: role,
                        permissions: permissions
                    });
                    showToast(dashboardTranslations[currentDashboardLanguage].adminUpdatedSuccess);
                } else {
                    const tempAppName = 'temp-admin-auth-app-' + Date.now();
                    const tempApp = initializeApp(firebaseConfig, tempAppName);
                    const tempAuth = getAuth(tempApp);
                    const userCredential = await createUserWithEmailAndPassword(tempAuth, email, password);
                    const newAdminUser = userCredential.user;

                    await setDoc(doc(db, "users", newAdminUser.uid), {
                        uid: newAdminUser.uid,
                        displayName: name,
                        email: email,
                        role: role,
                        permissions: permissions,
                        createdAt: serverTimestamp(),
                    });
                    await signOut(tempAuth);
                    showToast(dashboardTranslations[currentDashboardLanguage].adminCreatedSuccess);
                }
                closeModal();
            } catch (error) {
                 console.error("Error saving admin:", error);
                let errorMessage = "Adminni saqlashda xatolik.";
                if (error.code === 'auth/email-already-in-use') {
                    errorMessage = "Bu email allaqachon ro'yxatdan o'tgan.";
                } else if (error.code === 'auth/weak-password') {
                    errorMessage = "Parol juda oddiy (kamida 6 belgi).";
                }
                showToast(errorMessage, true);
            } finally {
                loadingOverlay.classList.add('hidden');
            }
        }
    </script>

</body>
</html>

