const infoContents = `
            <div id="info-description" class="info-tab-content">
                <h2 data-lang-key="description" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                <p class="text-gray-300 leading-relaxed text-sm">${movie.description || ''}</p>
                <div class="mt-4">
                    <h2 data-lang-key="directorTitle" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                    <p class="text-gray-300 leading-relaxed text-sm">${movie.director || movie.producer || ''}</p>
                </div>
                <div class="mt-4">
                    <h2 data-lang-key="creatorsTab" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                    <p class="text-gray-300 leading-relaxed text-sm">${[movie.director || '', movie.producer || ''].filter(Boolean).join(', ')}</p>
                </div>
            </div>
            <div id="info-actors" class="info-tab-content hidden">
                <h2 data-lang-key="actorsTab" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                <p class="text-gray-300 leading-relaxed text-sm">${Array.isArray(movie.cast) ? movie.cast.join(', ') : ''}</p>
            </div>
            <div id="info-rating" class="info-tab-content hidden">
                <h2 data-lang-key="ratingTab" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                <div class="flex flex-col sm:flex-row sm:items-center sm:gap-6 mb-4">
                    <div class="flex items-baseline gap-2">
                        <span class="rating-value text-5xl font-bold text-yellow-400">${movie.sndRating ?? 0}</span>
                        <span class="text-sm text-gray-400 ml-2"><span class="rating-votes-count">${movie.sndVotes ?? 0}</span> <span data-lang-key="votes"></span></span>
                    </div>
                    <div class="w-full mt-4 sm:mt-0 space-y-1">
                        <div class="flex items-center gap-2">
                            <span class="w-32 text-gray-400" data-lang-key="directionCheckbox"></span>
                            <div class="flex-1 h-2 bg-gray-700 rounded-full overflow-hidden"><div class="rating-bar-fill h-2 bg-red-500" data-final="${(movie.sndRating ?? 0) * 10}" style="width: 0%"></div></div>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="w-32 text-gray-400" data-lang-key="plotCheckbox"></span>
                            <div class="flex-1 h-2 bg-gray-700 rounded-full overflow-hidden"><div class="rating-bar-fill h-2 bg-red-500" data-final="${(movie.sndRating ?? 0) * 10}" style="width: 0%"></div></div>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="w-32 text-gray-400" data-lang-key="spectacleCheckbox"></span>
                            <div class="flex-1 h-2 bg-gray-700 rounded-full overflow-hidden"><div class="rating-bar-fill h-2 bg-red-500" data-final="${(movie.sndRating ?? 0) * 10}" style="width: 0%"></div></div>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="w-32 text-gray-400" data-lang-key="actorsCheckbox"></span>
                            <div class="flex-1 h-2 bg-gray-700 rounded-full overflow-hidden"><div class="rating-bar-fill h-2 bg-red-500" data-final="${(movie.sndRating ?? 0) * 10}" style="width: 0%"></div></div>
                        </div>
                    </div>
                </div>
                <button id="snd-rate-btn" data-movie-id="${movie.id}" class="mt-2 bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg" data-lang-key="rateThisMovie"></button>
            </div>`;

        // Final markup with video control panel on the card
        return `
            <div>
                <div class="sticky top-0 z-20 bg-black">
                    <div class="relative w-full" style="height: 33vh;">
                        ${cardMedia}
                        <!-- Back button -->
                        <button id="back-button" class="absolute top-4 left-4 bg-black/50 w-10 h-10 rounded-full text-white flex items-center justify-center"><i class="fas fa-arrow-left"></i></button>
                        <!-- Favorite button -->
                        <button id="fav-button" class="fav-button absolute top-4 right-16 bg-black/50 w-10 h-10 rounded-full text-white ${isFavorited ? 'favorited' : ''}" data-movie-id="${movie.id}">
                            <i class="fas fa-heart"></i>
                        </button>
                        <!-- Settings button -->
                        <button id="card-settings-button" class="absolute top-4 right-4 bg-black/50 w-10 h-10 rounded-full text-white flex items-center justify-center"><i class="fas fa-cog"></i></button>
                        <!-- Central play/pause overlay (hidden by default) -->
                        <div id="card-center-overlay" class="absolute inset-0 flex items-center justify-center pointer-events-none hidden">
                            <button id="card-play-pause-button" class="text-white text-5xl flex items-center justify-center pointer-events-auto"><i class="fas fa-play"></i></button>
                            <!-- Speed indicator shown during hold -->
                            <div id="card-speed-indicator" class="absolute top-1/3 inset-x-0 text-center text-4xl font-bold text-white opacity-0">2x</div>
                        </div>
                        <!-- Bottom controls: progress bar and fullscreen, hidden by default -->
                        <div id="card-bottom-controls" class="absolute inset-0 flex flex-col justify-end pointer-events-none hidden">
                            <div class="w-full bg-black/50 p-2 pointer-events-auto">
                                <div class="flex items-center">
                                    <span id="card-current-time" class="text-xs text-white">00:00</span>
                                    <input id="card-progress" type="range" min="0" max="0" value="0" class="flex-grow mx-2 h-1 cursor-pointer appearance-none rounded-lg bg-gray-400">
                                    <span id="card-duration" class="text-xs text-white">00:00</span>
                                    <button id="card-fullscreen-button" data-movie-id="${movie.id}" class="ml-2 text-white text-lg"><i class="fas fa-expand"></i></button>
                                </div>
                            </div>
                        </div>

                        <!-- Settings menu overlay (hidden by default). Centered and narrower like YouTube's modal -->
                        <div id="card-settings-menu" class="absolute left-1/2 -translate-x-1/2 bottom-0 mb-[50px] w-11/12 max-w-sm px-4 py-3 bg-black/90 text-white rounded-t-lg hidden">
                            <div class="text-lg font-bold mb-2" data-lang-key="settings">РќР°СЃС‚СЂРѕР№РєРё</div>
                            <div id="card-settings-quality-row" class="flex justify-between items-center py-2 border-b border-gray-700">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-tv text-gray-400"></i>
                                    <span data-lang-key="quality">РљР°С‡РµСЃС‚РІРѕ</span>
                                </div>
                                <div class="flex items-center gap-2">
                                    <span id="card-settings-quality">720p</span>
                                    <i class="fas fa-chevron-right text-gray-500"></i>
                                </div>
                            </div>
                            <div id="card-settings-speed-row" class="flex justify-between items-center py-2 border-b border-gray-700">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-stopwatch text-gray-400"></i>
                                    <span data-lang-key="playbackSpeed">РЎРєРѕСЂРѕСЃС‚СЊ РІРѕСЃРїСЂРѕРёР·РІРµРґРµРЅРёСЏ</span>
                                </div>
                                <div class="flex items-center gap-2">
                                    <span id="card-settings-speed" data-lang-key="normalSpeed">РћР±С‹С‡РЅР°СЏ</span>
                                    <i class="fas fa-chevron-right text-gray-500"></i>
                                </div>
                            </div>
                            <div id="card-settings-subtitles-row" class="flex justify-between items-center py-2 border-b border-gray-700">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-closed-captioning text-gray-400"></i>
                                    <span data-lang-key="subtitles">РЎСѓР±С‚РёС‚СЂС‹</span>
                                </div>
                                <div class="flex items-center gap-2">
                                    <span id="card-settings-subtitles" data-lang-key="noSubtitles">Р’С‹РєР».</span>
                                    <i class="fas fa-chevron-right text-gray-500"></i>
                                </div>
                            </div>
                            <!-- Screen Lock row -->
                            <div id="card-settings-screenlock-row" class="flex justify-between items-center py-2 border-b border-gray-700">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-lock text-gray-400"></i>
                                    <span data-lang-key="screenLock">Р‘Р»РѕРєРёСЂРѕРІРєР° СЌРєСЂР°РЅР°</span>
                                </div>
                                <i class="fas fa-chevron-right text-gray-500"></i>
                            </div>
                            <!-- More row -->
                            <div id="card-settings-more-row" class="flex justify-between items-center py-2">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-ellipsis-h text-gray-400"></i>
                                    <span data-lang-key="more">Р•С‰С‘</span>
                                </div>
                                <i class="fas fa-chevron-right text-gray-500"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="container mx-auto p-4">
                    <h1 class="text-2xl md:text-3xl font-bold leading-tight mb-1">${movie.title || ''}</h1>
                    <p class="text-gray-400 text-sm mb-3">${movie.originalTitle || ''}</p>
                    <div class="flex flex-wrap items-center gap-2 mb-4">${premiumTag}${qualityTags}</div>
                    ${infoGrid}
                    <div class="flex flex-wrap gap-2 my-4">
                        <button id="download-button" class="w-auto bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 flex items-center gap-2" data-movie-id="${movie.id}">
                            <i class="fas fa-download"></i>
                            <span data-lang-key="downloadButton">Download</span>
                        </button>
                        <button id="cast-button" class="w-auto bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 flex items-center gap-2">
                            <i class="fas fa-tv"></i>
                            <span class="sr-only">Cast</span>
                        </button>
                        <!-- Removed ticket purchase button. Previously, this button navigated to the kassa page with the movie title as a query parameter. -->
                        <!-- The button has been omitted as per request. -->
                    </div>
                    <div class="mt-6">
                        ${seriesControls}
                        ${infoTabs}
                        ${infoContents}
                    </div>
                </div>
            </div>
        `;
    }

    function renderFavoritesPage() {
        const favoriteMovies = movies.filter(m => currentUser?.favorites?.includes(m.id));
        const content = favoriteMovies.length > 0 ? favoriteMovies.map(createMovieCardHTML).join('') : `<p class="col-span-full text-center text-gray-400 mt-8" data-lang-key="noFavorites"></p>`;
        return `
            <div class="container mx-auto px-4 py-6">
                <h1 class="text-2xl md:text-4xl font-bold mb-6 border-l-4 border-red-500 pl-4" data-lang-key="favorites"></h1>
                <div id="favorites-grid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">${content}</div>
            </div>`;
    }

    // Render page showing downloaded (offline) movies
    function renderDownloadsPage() {
        // Retrieve list of downloaded movie objects (or IDs for backward compatibility)
        let downloadedRaw;
        try {
            downloadedRaw = JSON.parse(localStorage.getItem('soundora-downloads')) || [];
        } catch (e) {
            downloadedRaw = [];
        }
        // Normalize to list of strings (IDs)
        const ids = downloadedRaw.map(item => (typeof item === 'object' ? String(item.id) : String(item)));
        const uniqueIds = Array.from(new Set(ids));
        // Use a safe check in case movies data has not loaded yet
        const downloadedMovies = Array.isArray(movies)
            ? movies.filter(m => uniqueIds.includes(String(m.id)))
            : [];
        const content = downloadedMovies.length > 0
            ? downloadedMovies.map(movie => {
                // Find corresponding download entry
                const dEntry = downloadedRaw.find(item => (typeof item === 'object' && String(item.id) === String(movie.id)));
                let progressHTML = '';
                if (dEntry && dEntry.status === 'downloading') {
                    const prog = dEntry.progress || 0;
                    progressHTML = `<div class="p-2"><div class="w-full bg-gray-600 rounded h-2"><div id="download-progress-${movie.id}" class="bg-red-500 h-2 rounded" style="width:${prog}%"></div></div><div id="download-progress-text-${movie.id}" class="text-xs text-gray-400 mt-1">${Math.round(prog)}%</div></div>`;
                } else if (dEntry && dEntry.status === 'completed') {
                    progressHTML = `<div class="p-2 text-green-400 text-xs" data-lang-key="downloadCompleted">Downloaded</div>`;
                }
                return `<div class="relative">${createMovieCardHTML(movie)}${progressHTML}</div>`;
            }).join('')
            : `<p class="col-span-full text-center text-gray-400 mt-8" data-lang-key="noDownloads"></p>`;
        return `
            <div class="container mx-auto px-4 py-6">
                <h1 class="text-2xl md:text-4xl font-bold mb-6 border-l-4 border-red-500 pl-4" data-lang-key="downloads"></h1>
                <div id="downloads-grid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">${content}</div>
            </div>`;
    }

    function renderProfilePage() {
        if (!currentUser) return '';
        return `
            <div class="container mx-auto px-4 py-6 flex flex-col" style="min-height: calc(100vh - 8rem);">
                <div class="flex-grow">
                    <div class="flex justify-between items-center mb-8">
                        <h1 class="text-2xl md:text-4xl font-bold border-l-4 border-red-500 pl-4" data-lang-key="profile"></h1>
                        <div class="flex items-center gap-4">
                            <!-- Replace robot icon with chat icon for AI/chat button -->
                            <button id="profile-ai-chat-btn" class="text-gray-400 hover:text-red-500 transition-colors"><i class="fas fa-comments text-2xl"></i></button>
                            <button id="switch-account-btn" class="text-gray-400 hover:text-red-500 transition-colors"><i class="fas fa-user-friends text-2xl"></i></button>
                        </div>
                    </div>
                        <div class="flex flex-row items-center gap-4 md:gap-8">
                        <div class="flex-shrink-0 relative">
                            <img src="${currentUser.photoURL || `https://placehold.co/150x150/ef4444/ffffff?text=${currentUser.displayName?.charAt(0) || 'U'}`}" alt="User Avatar" class="w-24 h-24 md:w-36 md:h-36 rounded-full border-4 border-gray-700 shadow-lg">
                            ${currentUser.isPremium
                                ? '<div class="absolute -top-3 md:-top-4 left-1/2 transform -translate-x-1/2"><i class="fas fa-crown text-yellow-400 text-2xl md:text-3xl"></i></div>'
                                : '<div class="absolute bottom-0 right-0 bg-gray-700 rounded-full p-1"><i class="fas fa-user text-xs text-white"></i></div>'}
                        </div>
                        <div class="text-left">
                            <h2 class="text-2xl md:text-3xl font-bold">${currentUser.displayName || 'User'}</h2>
                            <p class="text-gray-400 mt-1 md:mt-2">${currentUser.email || currentUser.phoneNumber || ''}</p>
                            <div class="mt-2">
                                <div class="flex items-center gap-2">
                                    <button id="copy-id-btn" class="bg-gray-700/50 hover:bg-gray-600/50 text-gray-300 text-sm py-1 px-3 rounded-md transition-colors flex items-center gap-2">
                                        ID: <span id="user-profile-id" class="truncate max-w-[150px]">${currentUser.customId || currentUser.uid}</span>
                                    </button>
                                    ${currentUser.isPremium ? '<div class="flex-shrink-0 bg-gradient-to-r from-amber-500 to-yellow-400 rounded-full p-1"><i class="fas fa-crown text-xs text-black"></i></div>' : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="mt-10 space-y-4">
                         <button id="settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-cog w-6 text-center mr-3"></i><span data-lang-key="settings"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                            </button>
                         <button id="premium-btn" class="w-full bg-gradient-to-r from-amber-500 to-yellow-400 text-white font-semibold py-4 px-5 rounded-lg transition-transform hover:scale-105 flex justify-between items-center text-left shadow-lg">
                            <span><i class="fas fa-crown w-6 text-center mr-3"></i><span data-lang-key="premium"></span></span><i class="fas fa-chevron-right text-gray-200"></i>
                            </button>
                         <button id="privacy-policy-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-shield-alt w-6 text-center mr-3"></i><span data-lang-key="privacyPolicy"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                            </button>
                         <button id="faq-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-question-circle w-6 text-center mr-3"></i><span data-lang-key="faq"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                            </button>
                         <!-- Downloads button for offline movies -->
                         <button id="downloads-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-download w-6 text-center mr-3"></i><span data-lang-key="downloads"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                         </button>
                        ${currentUser?.role === 'admin' ? `
                            <a id="ap-control-btn" href="./admin.html" target="_blank" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                                <span><i class="fas fa-tools w-6 text-center mr-3"></i><span data-lang-key="apControl"></span></span><i class="fas fa-external-link-alt text-gray-500"></i>
                            </a>
                        ` : ''}
                    </div>
                    <!-- Account Switch and Logout at bottom -->
                    <div class="mt-8 space-y-4">
                        <button id="switch-account-btn-bottom" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-user-friends w-6 text-center mr-3"></i><span data-lang-key="switchAccount"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                        </button>
                        <button id="logout-btn-bottom" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-red-500 font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-sign-out-alt w-6 text-center mr-3"></i><span data-lang-key="logout"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                        </button>
                    </div>
                </div>
                <p class="text-center text-gray-500 text-xs mt-8 flex-shrink-0"><span data-lang-key="appVersion"></span>: ${APP_VERSION}</p>
            </div>`;
    }

    function renderGuestProfilePage() {
        return `
            <div class="container mx-auto px-4 py-6 flex flex-col" style="min-height: calc(100vh - 8rem);">
                <div class="flex justify-between items-center mb-8">
                    <h1 class="text-2xl md:text-4xl font-bold border-l-4 border-red-500 pl-4" data-lang-key="profile"></h1>
                    <div class="flex items-center gap-4">
                       <!-- Replace robot icon with chat icon for AI/chat button -->
                       <button id="guest-ai-chat-btn" class="text-gray-400 hover:text-red-500 transition-colors"><i class="fas fa-comments text-2xl"></i></button>
                    </div>
                </div>
                <div class="flex-grow flex flex-col items-center justify-center text-center">
                    <i class="fas fa-user-circle text-6xl text-gray-600 mb-4"></i>
                    <h2 class="text-2xl font-bold mb-2" data-lang-key="loginRequired"></h2>
                    <p class="text-gray-400 mb-6 max-w-sm" data-lang-key="loginToAccess"></p>
                    <button id="guest-login-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-8 rounded-lg transition-colors">
                        <span data-lang-key="login"></span>
                    </button>
                </div>
                 <p class="text-center text-gray-500 text-xs mt-8 flex-shrink-0"><span data-lang-key="appVersion"></span>: ${APP_VERSION}</p>
            </div>
        `;
    }

    function renderLoginPage() {
        return `
            <div class="container mx-auto px-4 py-8 flex flex-col items-center justify-center min-h-[calc(100vh-8rem)]">
                <div class="w-full max-w-md">
                    <h1 class="text-3xl font-bold text-center mb-6" data-lang-key="loginTitle"></h1>

                    <!-- Tablar -->
                    <div class="flex justify-center border-b border-gray-700 mb-6">
                        <button id="email-login-tab" class="auth-tab w-1/2 py-3 font-semibold text-gray-400 active" data-lang-key="loginWithEmail"></button>
                        <button id="phone-login-tab" class="auth-tab w-1/2 py-3 font-semibold text-gray-400" data-lang-key="loginWithPhone"></button>
                    </div>

                    <!-- Email orqali kirish formasi -->
                    <div id="email-login-form-container">
                         <form id="login-form">
                            <div class="space-y-4">
                                <input type="email" id="login-email-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" data-lang-key="loginLabel" placeholder="Login (Email)" required>
                                <input type="password" id="login-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" data-lang-key="password" placeholder="Parol" required>
                            </div>
                            <button type="submit" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="login"></span>
                            </button>
                         </form>
                    </div>

                    <!-- Telefon raqami orqali kirish formasi -->
                    <div id="phone-login-form-container" class="hidden">
                        <div id="login-phone-entry-view">
                            <div class="space-y-4">
                               <label for="phone" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="phoneNumber"></label>
                               <div class="flex items-center border border-gray-700 rounded-lg focus-within:ring-1 focus-within:ring-red-500 focus-within:border-red-500 transition duration-200 bg-gray-800/50">
                                    <div class="relative">
                                        <select id="login-country-code" class="pl-3 pr-8 py-3 bg-transparent appearance-none cursor-pointer focus:outline-none text-gray-300">
                                            <!-- Davlatlar ro'yxati JavaScript orqali qo'shiladi -->
                                        </select>
                                         <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                                            <i class="fas fa-chevron-down text-xs"></i>
                                        </div>
                                    </div>
                                    <input type="tel" id="phone-number-input" class="w-full p-3 border-none bg-transparent focus:ring-0 text-white" placeholder="901234567" required>
                                </div>
                            </div>
                            <button id="send-code-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="sendCode"></span>
                            </button>
                        </div>
                        <div id="login-code-entry-view" class="hidden">
                             <div class="space-y-4">
                                <input type="text" id="verification-code-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 text-center tracking-[1em]" data-lang-key="verificationCode" placeholder="______" required maxlength="6">
                            </div>
                            <button id="verify-code-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="verify"></span>
                            </button>
                        </div>
                    </div>

                    <p id="login-error" class="text-red-500 text-center text-sm h-4 mt-4"></p>

                    <div class="text-center text-sm text-gray-400 mt-6">
                        <span data-lang-key="dontHaveAccount"></span>
                        <button id="go-to-register-btn" class="font-semibold text-red-500 hover:text-red-400" data-lang-key="registerNow"></button>
                    </div>

                    <!-- reCAPTCHA uchun konteyner -->
                    <div id="recaptcha-container" class="flex justify-center mt-4"></div>
                </div>
            </div>
        `;
    }

    function renderRegisterPage() {
        return `
            <div class="container mx-auto px-4 py-8 flex flex-col items-center justify-center min-h-[calc(100vh-8rem)]">
                <div class="w-full max-w-md">
                    <h1 class="text-3xl font-bold text-center mb-6" data-lang-key="registerTitle"></h1>

                    <!-- Tablar -->
                    <div class="flex justify-center border-b border-gray-700 mb-6">
                        <button id="email-register-tab" class="auth-tab w-1/2 py-3 font-semibold text-gray-400 active" data-lang-key="loginWithEmail"></button>
                        <button id="phone-register-tab" class="auth-tab w-1/2 py-3 font-semibold text-gray-400" data-lang-key="registerWithPhone"></button>
                    </div>

                    <!-- Email orqali ro'yxatdan o'tish -->
                    <div id="email-register-form-container">
                        <div class="bg-yellow-900/30 border border-yellow-700 text-yellow-300 px-4 py-3 rounded-lg relative mb-6" role="alert">
                          <strong class="font-bold" data-lang-key="registerWarningTitle"></strong>
                          <span class="block sm:inline" data-lang-key="registerWarningText"></span>
                        </div>
                        <form id="register-form">
                            <div class="space-y-4">
                                <div>
                                    <label for="register-name-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="fullName"></label>
                                    <input type="text" id="register-name-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" required>
                                </div>
                                <div>
                                    <label for="register-email-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="loginLabel"></label>
                                    <input type="email" id="register-email-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" required>
                                </div>
                                 <div>
                                    <label for="register-password-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="password"></label>
                                    <input type="password" id="register-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" required>
                                </div>
                                 <div>
                                    <label for="register-dob-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="dobLabel"></label>
                                    <input type="date" id="register-dob-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" required>
                                </div>
                                 <div>
                                    <label for="register-secret-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="secretWordLabel"></label>
                                    <input type="text" id="register-secret-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" data-lang-key="secretWordPlaceholder" required>
                                </div>
                                <p id="register-error" class="text-red-500 text-center text-sm h-4"></p>
                            </div>
                            <button type="submit" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="registerTitle"></span>
                            </button>
                        </form>
                    </div>

                    <!-- Telefon orqali ro'yxatdan o'tish -->
                    <div id="phone-register-form-container" class="hidden">
                        <div id="register-phone-entry-view">
                            <div class="space-y-4">
                               <label for="phone" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="phoneNumber"></label>
                               <div class="flex items-center border border-gray-700 rounded-lg focus-within:ring-1 focus-within:ring-red-500 focus-within:border-red-500 transition duration-200 bg-gray-800/50">
                                    <div class="relative">
                                        <select id="register-country-code" class="pl-3 pr-8 py-3 bg-transparent appearance-none cursor-pointer focus:outline-none text-gray-300">
                                            <!-- Davlatlar ro'yxati JavaScript orqali qo'shiladi -->
                                        </select>
                                         <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                                            <i class="fas fa-chevron-down text-xs"></i>
                                        </div>
                                    </div>
                                    <input type="tel" id="register-phone-number-input" class="w-full p-3 border-none bg-transparent focus:ring-0 text-white" placeholder="901234567" required>
                                </div>
                            </div>
                            <button id="register-send-code-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="sendCode"></span>
                            </button>
                        </div>
                        <div id="register-code-entry-view" class="hidden">
                             <div class="space-y-4">
                                <input type="text" id="register-verification-code-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 text-center tracking-[1em]" data-lang-key="verificationCode" placeholder="______" required maxlength="6">
                            </div>
                            <button id="register-verify-code-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="verify"></span>
                            </button>
                        </div>
                    </div>

                    <p id="register-page-error" class="text-red-500 text-center text-sm h-4 mt-4"></p>

                    <p class="text-center text-sm text-gray-400 mt-6">
                        <span data-lang-key="alreadyHaveAccount"></span>
                        <button id="go-to-login-btn" class="font-semibold text-red-500 hover:text-red-400" data-lang-key="loginNow"></button>
                    </p>

                    <div id="register-recaptcha-container" class="flex justify-center mt-4"></div>
                </div>
            </div>
        `;
    }

    function renderSettingsPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="settings"></h1>
                </div>
                <div class="space-y-4">
                    <button id="edit-profile-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-user-edit w-6 text-center mr-3"></i><span data-lang-key="editProfile"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                    <button id="language-settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-language w-6 text-center mr-3"></i><span data-lang-key="language"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                    <button id="playback-settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-play-circle w-6 text-center mr-3"></i><span data-lang-key="playback"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                    <button id="content-settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-eye w-6 text-center mr-3"></i><span data-lang-key="content"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                    <!-- Region settings button: allows users to change payment region -->
                    <button id="region-settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-globe w-6 text-center mr-3"></i><span>Region</span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                </div>
            </div>`;
    }

    function renderPrivacyPolicyPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="privacyTitle"></h1>
                </div>
                <p class="text-sm text-gray-500 mb-4" data-lang-key="privacyLastUpdated"></p>
                <div class="space-y-6 text-gray-300 leading-relaxed">
                    <div>
                        <h2 class="text-xl font-bold" data-lang-key="privacy1Title"></h2>
                        <p data-lang-key="privacy1Text"></p>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold" data-lang-key="privacy2Title"></h2>
                        <p data-lang-key="privacy2Text"></p>
                    </div>
                    <div>
                         <h2 class="text-xl font-bold" data-lang-key="privacy3Title"></h2>
                        <p data-lang-key="privacy3Text"></p>
                    </div>
                    <div>
                         <h2 class="text-xl font-bold" data-lang-key="privacy4Title"></h2>
                        <p data-lang-key="privacy4Text"></p>
                    </div>
                </div>
            </div>`;
    }

    function renderFaqPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="faqTitle"></h1>
                </div>
                <div class="space-y-6 text-gray-300">
                    <div>
                        <h2 class="text-xl font-bold mb-2" data-lang-key="faq1Title"></h2>
                        <p data-lang-key="faq1Answer"></p>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold mb-2" data-lang-key="faq2Title"></h2>
                        <p data-lang-key="faq2Answer"></p>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold mb-2" data-lang-key="faq3Title"></h2>
                        <p data-lang-key="faq3Answer"></p>
                    </div>
                </div>
            </div>`;
    }

    function renderPlaybackSettingsPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="playback"></h1>
                </div>
                <div class="bg-gray-800/50 rounded-lg p-5">
                    <!-- Mini player toggle -->
                    <div class="flex justify-between items-center">
                        <div>
                            <label for="mini-player-toggle" class="text-white font-semibold" data-lang-key="enableMiniPlayer"></label>
                            <p class="text-gray-400 text-sm mt-1" data-lang-key="miniPlayerHint"></p>
                        </div>
                        <div class="relative inline-block w-12 mr-2 align-middle select-none transition duration-200 ease-in">
                            <input type="checkbox" name="mini-player-toggle" id="mini-player-toggle" class="toggle-checkbox absolute block w-7 h-7 rounded-full bg-white border-4 appearance-none cursor-pointer" ${isMiniPlayerEnabled ? 'checked' : ''}/>
                            <label for="mini-player-toggle" class="toggle-label block overflow-hidden h-7 rounded-full bg-gray-600 cursor-pointer"></label>
                        </div>
                    </div>
                    <!-- Resume prompt toggle -->
                    <div class="flex justify-between items-center mt-4">
                        <div>
                            <label for="resume-prompt-toggle" class="text-white font-semibold" data-lang-key="enableResumePrompt"></label>
                            <p class="text-gray-400 text-sm mt-1" data-lang-key="resumePromptHint"></p>
                        </div>
                        <div class="relative inline-block w-12 mr-2 align-middle select-none transition duration-200 ease-in">
                            <input type="checkbox" name="resume-prompt-toggle" id="resume-prompt-toggle" class="toggle-checkbox absolute block w-7 h-7 rounded-full bg-white border-4 appearance-none cursor-pointer" ${isResumePromptEnabled ? 'checked' : ''}/>
                            <label for="resume-prompt-toggle" class="toggle-label block overflow-hidden h-7 rounded-full bg-gray-600 cursor-pointer"></label>
                        </div>
                    </div>
                </div>
            </div>`;
    }

    function renderEditProfilePage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="editProfile"></h1>
                </div>
                <div class="space-y-6">
                    <div>
                        <label for="username-input" class="block text-sm font-medium text-gray-400 mb-2" data-lang-key="name"></label>
                        <input type="text" id="username-input" value="${currentUser?.displayName || ''}" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition">
                    </div>
                    <div>
                        <label for="email-input-display" class="block text-sm font-medium text-gray-400 mb-2" data-lang-key="email"></label>
                        <input type="email" id="email-input-display" value="${currentUser?.email || ''}" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3" disabled>
                    </div>
                    <button id="save-profile-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors">
                        <span data-lang-key="save"></span>
                    </button>
                </div>

                ${currentUser?.email ? `
                <div class="mt-8 pt-6 border-t border-gray-600">
                     <h2 class="text-xl font-bold mb-4" data-lang-key="changePassword"></h2>
                     <form id="change-password-form" class="space-y-4">
                        <input type="password" id="current-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3" data-lang-key="password" placeholder="Joriy parol" required>
                        <input type="password" id="new-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3" data-lang-key="newPassword" placeholder="Yangi parol" required>
                        <input type="password" id="confirm-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3" data-lang-key="confirmPassword" placeholder="Yangi parolni tasdiqlang" required>
                        <p id="password-error" class="text-red-500 text-sm h-4"></p>
                        <button type="submit" class="w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg transition-colors">
                            <span data-lang-key="changePassword"></span>
                        </button>
                     </form>
                </div>` : ''}
            </div>`;
    }

    function renderLanguageSettingsPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="languageSettingTitle"></h1>
                </div>
                <div class="flex flex-col space-y-3">
                    <button class="lang-btn text-left w-full p-4 rounded-md bg-gray-800/50 hover:bg-gray-700/50 transition-colors" data-lang="ru">Р СѓСЃСЃРєРёР№</button>
                    <button class="lang-btn text-left w-full p-4 rounded-md bg-gray-800/50 hover:bg-gray-700/50 transition-colors" data-lang="en">English</button>
                    <button class="lang-btn text-left w-full p-4 rounded-md bg-gray-800/50 hover:bg-gray-700/50 transition-colors" data-lang="uz">O'zbekcha</button>
                </div>
            </div>`;
    }

    function renderContentSettingsPage() {
        const show18Plus = JSON.parse(localStorage.getItem('soundora-show18plus')) || false;
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="contentSettingsTitle"></h1>
                </div>
                <div class="bg-gray-800/50 rounded-lg p-5 flex justify-between items-center">
                    <label for="content-toggle" class="text-white font-semibold" data-lang-key="show18Plus"></label>
                    <div class="relative inline-block w-12 mr-2 align-middle select-none transition duration-200 ease-in">
                        <input type="checkbox" name="content-toggle" id="content-toggle" class="toggle-checkbox absolute block w-7 h-7 rounded-full bg-white border-4 appearance-none cursor-pointer" ${show18Plus ? 'checked' : ''}/>
                        <label for="content-toggle" class="toggle-label block overflow-hidden h-7 rounded-full bg-gray-600 cursor-pointer"></label>
                    </div>
                </div>
            </div>`;
    }

    function renderPremiumPage() {
        const plans = [
            { months: 1, pricePerMonth: 199, tagKey: null },
            { months: 3, pricePerMonth: 169, tagKey: 'mostPopular' },
            { months: 7, pricePerMonth: 149, tagKey: null },
            { months: 12, pricePerMonth: 129, tagKey: 'bestValue' }
        ];

        // Build the markup for each plan.  A purchase button has been added so that
        // users can proceed to the ticketвЂ‘purchase page.  The button simply
        // navigates to kassa.html when clicked.  Each card is a flex container
        // to push the button to the bottom of the card for consistent spacing.
        const plansHTML = plans.map(plan => `
            <div class="bg-gray-700/50 rounded-lg p-4 relative flex flex-col justify-between">
                ${plan.tagKey ? `<div class="absolute top-0 -right-2 bg-red-600 text-white text-xs font-bold px-2 py-1 rounded-full" data-lang-key="${plan.tagKey}"></div>` : ''}
                <div>
                    <h3 class="text-xl font-bold" data-lang-key="plan${plan.months}Months"></h3>
                    <p class="text-3xl font-black my-2">${plan.pricePerMonth} в‚Ѕ<span class="text-base font-normal text-gray-400" data-lang-key="pricePerMonth"></span></p>
                    <p class="text-sm text-gray-400"><span data-lang-key="total"></span>: ${plan.months * plan.pricePerMonth} в‚Ѕ</p>
                </div>
                <button class="mt-4 w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-4 rounded-lg transition-colors" onclick="openKassa(${plan.months}, ${plan.months * plan.pricePerMonth}); return false;">
                    Sotib olish
                </button>
            </div>
        `).join('');

        // Build current subscription status card
        const isPremiumUser = currentUser?.isPremium;
        let statusHTML = '';
        if (isPremiumUser) {
            let expiresDate;
            const expiresData = currentUser?.premiumExpiresAt;
            try {
                if (expiresData && typeof expiresData.toDate === 'function') {
                    expiresDate = expiresData.toDate();
                } else if (expiresData?.seconds) {
                    expiresDate = new Date(expiresData.seconds * 1000);
                } else if (expiresData) {
                    expiresDate = new Date(expiresData);
                }
            } catch (err) {
                expiresDate = null;
            }
            let daysLeft = '';
            let expStr = '';
            if (expiresDate) {
                const diffMs = expiresDate.getTime() - Date.now();
                const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
                if (!isNaN(diffDays)) {
                    daysLeft = diffDays > 0 ? diffDays : 0;
                }
                expStr = expiresDate.toLocaleDateString();
            }
            const expLabel = translations[currentLanguage]?.expiresOn || 'Expires on';
            const daysLabel = translations[currentLanguage]?.daysLeft || 'days left';
            statusHTML = `<h2 class="text-2xl font-bold mb-2">${translations[currentLanguage]?.premium || 'Premium'}</h2><p class="text-gray-400">${expLabel}: ${expStr}${daysLeft !== '' ? ' (' + daysLeft + ' ' + daysLabel + ')' : ''}</p>`;
        } else {
            statusHTML = `<h2 class="text-2xl font-bold mb-2" data-lang-key="getPremium"></h2><p class="text-gray-400" data-lang-key="premiumHint"></p>`;
        }
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="premium"></h1>
                </div>
                <!-- Promo code and status section -->
                <div class="md:flex md:gap-4 mb-8">
                    <!-- Promo code input -->
                    <div class="md:w-1/2 order-2 md:order-1 mb-6 md:mb-0">
                        <div class="bg-gray-800/50 rounded-lg p-6">
                            <h3 class="text-lg font-bold mb-2" data-lang-key="promoCode"></h3>
                            <input id="promo-code-input" type="text" class="w-full bg-gray-700/50 border border-gray-600 rounded-lg p-3 text-white focus:outline-none focus:border-red-500" placeholder="${translations[currentLanguage]?.enterPromoCode || 'Enter promo code'}">
                            <button id="redeem-promo-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors mt-4" data-lang-key="activatePromo"></button>
                            <p id="promo-feedback" class="text-sm mt-2"></p>
                        </div>
                    </div>
                    <!-- Status and hero -->
                    <div class="md:w-1/2 order-1 md:order-2">
                        <div class="bg-gray-800/50 rounded-lg p-6 text-center">
                            <i class="fas fa-crown text-5xl text-yellow-400 mb-4"></i>
                            ${statusHTML}
                        </div>
                    </div>
                </div>
                <!-- Plans and subscription steps (only for free users) -->
                ${!isPremiumUser ? `<div class="grid grid-cols-2 gap-4 mb-8">${plansHTML}</div><div class="bg-gray-800/50 rounded-lg p-6"><h3 class="text-lg font-bold mb-4" data-lang-key="howToSubscribe"></h3><ol class="list-decimal list-inside space-y-2 text-gray-300"><li data-lang-key="subscribeStep1"></li><li data-lang-key="subscribeStep2"></li><li data-lang-key="subscribeStep3"></li></ol></div>` : ''}
            </div>`;
    }

    function renderPlayerPage(state) {
        const movie = movies.find(m => m.id === String(state.movieId));
        if (!movie) return '';
        const episodeIndex = state.episodeIndex || 0;
        const sources = movie.type === 'series' && movie.episodes ? movie.episodes[episodeIndex].sources : movie.sources;
        if (!sources) { console.error("Video sources not found!"); return ''; }

        const episodesHTML = movie.type === 'series' && Array.isArray(movie.episodes) ? `
            <div id="episode-list-panel" class="fixed top-0 right-0 h-full w-full sm:w-80 bg-gray-900 shadow-lg z-50 transform translate-x-full lg:relative lg:translate-x-0 lg:w-80 lg:flex-shrink-0 flex flex-col">
                <div class="p-4 border-b border-gray-700 flex justify-between items-center">
                    <h3 class="text-lg font-bold" data-lang-key="episodes"></h3><button id="close-episodes-btn" class="lg:hidden text-2xl">&times;</button>
                </div>
                <div id="episode-list" class="flex-grow overflow-y-auto">
                    ${movie.episodes.map((ep, i) => `<div class="episode-item p-4 border-b border-gray-800 hover:bg-gray-700 cursor-pointer flex items-center space-x-4 ${i === episodeIndex ? 'active' : ''}" data-movie-id="${movie.id}" data-episode-index="${i}"><span class="text-red-400 font-bold w-8 text-center">${i + 1}</span><div class="flex-grow"><p data-lang-key="episode"></p></div><i class="fas fa-play text-gray-500"></i></div>`).join('')}
                </div>
            </div>` : '';

        return `
            <div class="w-full h-full flex flex-col lg:flex-row bg-black">
                <div class="flex-grow flex flex-col relative overflow-hidden">
                    <div id="player-container" class="player-container w-full h-full bg-black relative overflow-hidden">
                         <div id="player-loading-spinner" class="hidden absolute inset-0 z-30 flex items-center justify-center bg-transparent">
                             <div class="player-loader"></div>
                         </div>
                        <!-- Controls Panel -->
                        <div class="player-controls absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent flex flex-col justify-between p-4 z-20">
                            <div class="flex justify-between items-center">
                                <button id="player-back-button" class="bg-black/50 hover:bg-black/70 w-10 h-10 rounded-full text-white transition-colors"><i class="fas fa-arrow-left"></i></button>
                                <div><h3 class="text-white text-lg font-bold truncate max-w-[50vw]">${movie.title} ${movie.type === 'series' ? `- <span data-lang-key="episode"></span> ${episodeIndex + 1}` : ''}</h3></div>
                                <div class="flex items-center gap-4">
                                    <!-- Cast tugmasi qo'shildi -->
                                    <button id="cast-btn" class="text-white text-xl"><i class="fas fa-tv"></i></button>
                                    <button id="player-settings-btn" class="text-white text-xl"><i class="fas fa-cog"></i></button>
                                    ${movie.type === 'series' ? `<button id="toggle-episodes-btn" class="bg-black/50 hover:bg-black/70 w-10 h-10 rounded-full text-white transition-colors lg:hidden"><i class="fas fa-list-ul"></i></button>` : ''}
                                </div>
                            </div>

                            <!-- Center indicators and button -->
                            <div class="absolute inset-0 flex items-center justify-around pointer-events-none">
                                <div id="rewind-indicator" class="seek-indicator left-1/4"><i class="fas fa-undo"></i> -10s</div>
                                <div class="flex items-center gap-12 pointer-events-auto">
                                    <button id="center-play-btn" class="text-white text-5xl bg-black/40 rounded-full w-20 h-20 flex items-center justify-center hover:bg-black/60 transition-all"><i class="fas fa-play"></i></button>
                                    <button id="center-pause-btn" class="text-white text-5xl bg-black/40 rounded-full w-20 h-20 flex items-center justify-center hover:bg-black/60 transition-all hidden"><i class="fas fa-pause"></i></button>
                                </div>
                                <div id="forward-indicator" class="seek-indicator right-1/4">+10s <i class="fas fa-redo"></i></div>
                            </div>

                            <!-- Bottom controls -->
                            <div class="w-full">
                                <div class="flex items-center gap-2"><span id="current-time" class="text-white text-xs">00:00</span><input type="range" id="seek-bar" value="0" min="0" class="w-full"><span id="total-time" class="text-white text-xs">00:00</span></div>
                                <div class="flex justify-between items-center mt-2">
                                    <div class="flex items-center gap-4">
                                        <button id="play-pause-btn" class="text-white text-2xl w-8 text-center"><i class="fas fa-play"></i></button>
                                        <button id="volume-btn" class="text-white text-xl w-8 text-center"><i class="fas fa-volume-up"></i></button>
                                    </div>
                                    <button id="fullscreen-btn" class="text-white text-xl w-8 text-center"><i class="fas fa-expand"></i></button>
                                </div>
                            </div>
                        </div>
                        <!-- Settings Panel -->
                        <div id="player-settings-panel">
                            <div id="settings-main-view">
                                <div class="p-4 border-b border-gray-700/50 flex items-center">
                                    <h3 class="font-bold text-lg" data-lang-key="playerSettings"></h3>
                                </div>
                                <div class="flex-grow overflow-y-auto">
                                    <div id="quality-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-high-definition"></i> <span data-lang-key="quality"></span></div> <div class="flex items-center gap-2"><span id="current-quality-label" class="text-gray-400 text-sm">720p</span><i class="fas fa-chevron-right text-gray-500"></i></div></div>
                                    <div id="speed-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-tachometer-alt"></i> <span data-lang-key="playbackSpeed"></span></div> <div class="flex items-center gap-2"><span id="current-speed-label" class="text-gray-400 text-sm" data-lang-key="normalSpeed"></span><i class="fas fa-chevron-right text-gray-500"></i></div></div>
                                    <!-- Audio settings: foydalanuvchi uchun audio trekni tanlash -->
                                    <div id="audio-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-headphones"></i> <span>Audio</span></div> <div class="flex items-center gap-2"><span id="current-audio-label" class="text-gray-400 text-sm">Auto</span><i class="fas fa-chevron-right text-gray-500"></i></div></div>
                                    <div id="subtitles-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-closed-captioning"></i> <span data-lang-key="subtitles"></span></div> <div class="flex items-center gap-2"><span id="current-subtitle-label" class="text-gray-400 text-sm" data-lang-key="noSubtitles"></span><i class="fas fa-chevron-right text-gray-500"></i></div></div>
                                    <div id="more-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-ellipsis-h"></i> <span data-lang-key="more"></span></div> <i class="fas fa-chevron-right text-gray-500"></i></div>
                                </div>
                            </div>
                            <div id="settings-quality-view" class="hidden flex-grow flex-col"></div>
                            <div id="settings-speed-view" class="hidden flex-grow flex-col"></div>
                            <!-- Audio settings view container -->
                            <div id="settings-audio-view" class="hidden flex-grow flex-col"></div>
                            <div id="settings-subtitles-view" class="hidden flex-grow flex-col"></div>
                            <div id="settings-more-view" class="hidden flex-grow flex-col"></div>
                        </div>
                    </div>
                </div>
                ${episodesHTML}
            </div>`;
    }


    function setupPageEventListeners(state) {
        const pageContainer = document.getElementById(state.page);
        if (!pageContainer) return;

        const pageId = state.page;
        if (pageId === 'main') {
            // Populate categories and filter movies on load
            if (movies.length > 0) {
                populateCategories();
                const activeCategoryButton = document.querySelector('#category-nav .category-btn.active');
                const currentCategory = activeCategoryButton ? activeCategoryButton.dataset.categoryValue : 'categoryAll';
                filterAndDisplayMovies(currentCategory);
            }
            // Header bell toggles notifications
            const bellHero = document.getElementById('notification-button-hero');
            if (bellHero) {
                bellHero.addEventListener('click', (e) => {
                    e.preventDefault();
                    toggleNotificationPanel();
                });
            }
            // Hero slide click navigates to movie details
            pageContainer.querySelectorAll('.hero-slide-link').forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const id = e.currentTarget.dataset.movieId;
                    if (id) navigate({ page: 'movie-details', movieId: id });
                });
            });
            // Update dots based on scroll position
            const slider = pageContainer.querySelector('#hero-slider');
            const dots = pageContainer.querySelectorAll('.hero-dots .dot');
            if (slider && dots && dots.length > 0) {
                slider.addEventListener('scroll', () => {
                    const width = slider.clientWidth || 1;
                    const index = Math.round(slider.scrollLeft / width);
                    dots.forEach((d, i) => {
                        if (i === index) d.classList.add('active'); else d.classList.remove('active');
                    });
                });
            }
            // Attach click handlers to top navigation tabs.  When a tab is clicked
            // (e.g. Home, Series, Movies, SND, Sports, Challenges), call
            // applyTopSection() with the appropriate section.  This will hide or
            // show the hero banner, filter the movie list and update the active
            // underline on the tab.
            pageContainer.querySelectorAll('.top-nav-item').forEach(item => {
                item.addEventListener('click', (ev) => {
                    ev.preventDefault();
                    const sect = ev.currentTarget.dataset.section;
                    if (sect) applyTopSection(sect);
                });
            });

            // Movie search input filters displayed movies
            const searchInput = pageContainer.querySelector('#movie-search-input');
            if (searchInput) {
                searchInput.addEventListener('input', () => {
                    const query = searchInput.value.trim().toLowerCase();
                    const moviesGrid = document.getElementById('movies-grid');
                    if (!moviesGrid) return;
                    if (!query) {
                        const activeCategoryButton = document.querySelector('#category-nav .category-btn.active');
                        const currentCategory = activeCategoryButton ? activeCategoryButton.dataset.categoryValue : 'categoryAll';
                        filterAndDisplayMovies(currentCategory);
                    } else {
                        const filtered = movies.filter(m => (m.title && m.title.toLowerCase().includes(query)) || (m.originalTitle && m.originalTitle.toLowerCase().includes(query)));
                        moviesGrid.innerHTML = filtered.length > 0 ? filtered.map(createMovieCardHTML).join('') : `<p class="col-span-full text-center text-gray-400 mt-8" data-lang-key="noResults"></p>`;
                        window.handleMovieCardClick = (e) => { e.preventDefault(); navigate({ page: 'movie-details', movieId: e.currentTarget.dataset.movieId }); };
                        setLanguage(currentLanguage);
                    }
                });
            }
        } else if (pageId === 'movie-details') {
            // Back button
            const backBtn = pageContainer.querySelector('#back-button');
            backBtn?.addEventListener('click', () => history.back());
            // Episode items (if series controls rendered)
            pageContainer.querySelectorAll('.episode-item').forEach(item => item.addEventListener('click', handlePlayClick));
            // Favorite button
            pageContainer.querySelector('#fav-button')?.addEventListener('click', handleFavoriteClick);
            // Download button
            pageContainer.querySelector('#download-button')?.addEventListener('click', handleDownloadClick);
            // SND rating button event
            const rateBtn = pageContainer.querySelector('#snd-rate-btn');
            if (rateBtn) {
                rateBtn.addEventListener('click', () => {
                    openRatingModal(state.movieId);
                });
            }
            // Cast button event
            const castBtn = pageContainer.querySelector('#cast-button');
            if (castBtn) {
                castBtn.addEventListener('click', requestCastingSession);
            }
            // Info tab buttons (description, actors, rating)
            const tabButtons = pageContainer.querySelectorAll('.info-tab-btn');
            tabButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    const tab = btn.dataset.tab;
                    // update active classes on buttons
                    tabButtons.forEach(b => {
                        b.classList.remove('bg-red-600', 'active');
                        b.classList.add('bg-gray-800');
                    });
                    btn.classList.remove('bg-gray-800');
                    btn.classList.add('bg-red-600', 'active');
                    // hide all sections
                    pageContainer.querySelectorAll('.info-tab-content').forEach(div => div.classList.add('hidden'));
                    const section = pageContainer.querySelector(`#info-${tab}`);
                    section?.classList.remove('hidden');
                    // If the rating tab is activated, animate the rating bars to their final widths
                    if (tab === 'rating' && section) {
                        const bars = section.querySelectorAll('.rating-bar-fill');
                        bars.forEach(bar => {
                            const finalWidth = bar.dataset.final || '0';
                            // Reset width to 0 then animate to final width after a tiny delay
                            bar.style.width = '0%';
                            setTimeout(() => {
                                bar.style.width = `${finalWidth}%`;
                            }, 10);
                        });
                    }
                });
            });
            // Initialize series controls for series-type movies on mobile
            initializeSeriesControls(state.movieId);

            // Video control panel events for the sticky card
            const videoEl = pageContainer.querySelector('#card-video');
            // Overlays and controls
            const centerOverlay = pageContainer.querySelector('#card-center-overlay');
            const bottomControls = pageContainer.querySelector('#card-bottom-controls');
            const progress = pageContainer.querySelector('#card-progress');
            const currentTimeEl = pageContainer.querySelector('#card-current-time');
            const durationEl = pageContainer.querySelector('#card-duration');
            const playPauseBtn = pageContainer.querySelector('#card-play-pause-button');
            const speedIndicator = pageContainer.querySelector('#card-speed-indicator');
            const fullscreenBtn = pageContainer.querySelector('#card-fullscreen-button');
            const settingsTopBtn = pageContainer.querySelector('#card-settings-button');
            const settingsMenu = pageContainer.querySelector('#card-settings-menu');
            const miniToggle = pageContainer.querySelector('#card-mini-toggle');

            // Format time helper for video controls
            const formatTime = (secs) => {
                if (secs === undefined || secs === null || isNaN(secs)) return '00:00';
                const m = Math.floor(secs / 60);
                const s = Math.floor(secs % 60);
                return `${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
            };

            // Show/hide overlay and bottom controls
            let hideControlsTimeout;
            const showControls = () => {
                if (centerOverlay) centerOverlay.classList.remove('hidden');
                if (bottomControls) bottomControls.classList.remove('hidden');
                // reset hide timer
                if (hideControlsTimeout) clearTimeout(hideControlsTimeout);
                hideControlsTimeout = setTimeout(() => {
                    if (centerOverlay) centerOverlay.classList.add('hidden');
                    if (bottomControls) bottomControls.classList.add('hidden');
                }, 5000);
            };
            const hideControls = () => {
                if (centerOverlay) centerOverlay.classList.add('hidden');
                if (bottomControls) bottomControls.classList.add('hidden');
                if (hideControlsTimeout) clearTimeout(hideControlsTimeout);
            };

            // Double tap and hold detection variables
            let lastTapTime = 0;
            let holdTimeout;
            let isHolding = false;

            // Resume handling logic will be applied after video element is initialized

            if (videoEl) {
                // Check for saved position and whether returning from the full player
                if (state.movieId) {
                    try {
                        const savedTimeRaw2 = localStorage.getItem(`soundora-play-position-${state.movieId}`);
                        const savedPos = savedTimeRaw2 ? parseFloat(savedTimeRaw2) : 0;
                        if (savedPos && savedPos > 0.1 && !isNaN(savedPos)) {
                            const returningFlag = sessionStorage.getItem('returnFromPlayer');
                            if (returningFlag === 'true') {
                                // If returning from full player, automatically resume at saved position and pause
                                videoEl.currentTime = savedPos;
                                videoEl.pause();
                                sessionStorage.removeItem('returnFromPlayer');
                                // Show controls to indicate position
                                showControls();
                            } else if (isResumePromptEnabled && !miniPlayerState.active) {
                                // Automatically resume from saved position without showing any overlay
                                videoEl.currentTime = savedPos;
                                videoEl.play();
                                showControls();
                            }
                        }
                    } catch (err) {}
                }

                // Ensure audio not muted by default
                videoEl.muted = false;
                // On loaded metadata, set duration
                videoEl.addEventListener('loadedmetadata', () => {
                    progress.max = videoEl.duration || 0;
                    durationEl.textContent = formatTime(videoEl.duration || 0);
                    currentTimeEl.textContent = formatTime(videoEl.currentTime || 0);
                });
                // Update current time, progress bar and save position
                videoEl.addEventListener('timeupdate', () => {
                    if (!isNaN(videoEl.currentTime)) {
                        progress.value = videoEl.currentTime;
                        currentTimeEl.textContent = formatTime(videoEl.currentTime);
                        // Persist current position to allow resume later
                        try {
                            if (state.movieId) {
                                localStorage.setItem(`soundora-play-position-${state.movieId}`, videoEl.currentTime);
                            }
                        } catch (err) {}
                    }
                });
                // Play/pause overlay behaviour: update icon on play/pause events
                const updatePlayIcon = () => {
                    if (!playPauseBtn) return;
                    if (videoEl.paused) {
                        playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                    } else {
                        playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                    }
                };
                videoEl.addEventListener('play', updatePlayIcon);
                videoEl.addEventListener('pause', updatePlayIcon);
                // Progress slider input sets current time
                progress?.addEventListener('input', () => {
                    try {
                        videoEl.currentTime = parseFloat(progress.value);
                    } catch (err) {}
                });
                // Play/Pause button click toggles play
                playPauseBtn?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    if (videoEl.paused) {
                        videoEl.play();
                    } else {
                        videoEl.pause();
                    }
                    showControls();
                });
                // Fullscreen button to open full player
                fullscreenBtn?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    // Save current playback position before navigating to full player
                    try {
                        const movieId = state.movieId;
                        if (videoEl && movieId) {
                            localStorage.setItem(`soundora-play-position-${movieId}`, videoEl.currentTime);
                        }
                    } catch (err) {}
                    handlePlayClick(e);
                });

                // When video plays or pauses, adjust control visibility
                videoEl.addEventListener('pause', () => {
                    // Show controls and keep overlay visible while paused
                    showControls();
                    if (hideControlsTimeout) clearTimeout(hideControlsTimeout);
                });
                videoEl.addEventListener('play', () => {
                    // Show controls and allow auto-hide after delay
                    showControls();
                });

                // Show controls on tap/click
                const handleTap = (event) => {
                    const now = Date.now();
                    const rect = videoEl.getBoundingClientRect();
                    const x = event instanceof TouchEvent ? event.touches[0].clientX : event.clientX;
                    const isDoubleTap = now - lastTapTime < 300;
                    lastTapTime = now;
                    if (isDoubleTap) {
                        // Determine left or right half
                        if (x < rect.left + rect.width / 2) {
                            // skip back 10 seconds
                            try {
                                videoEl.currentTime = Math.max(videoEl.currentTime - 10, 0);
                            } catch (err) {}
                        } else {
                            // skip forward 10 seconds
                            try {
                                const dur = videoEl.duration || 0;
                                const newTime = videoEl.currentTime + 10;
                                videoEl.currentTime = dur ? Math.min(newTime, dur) : newTime;
                            } catch (err) {}
                        }
                        showControls();
                    } else {
                        showControls();
                    }
                };

                // Hold detection for 2x speed on card (touch or mouse)
                const startHold = () => {
                    if (holdTimeout) clearTimeout(holdTimeout);
                    holdTimeout = setTimeout(() => {
                        isHolding = true;
                        videoEl.playbackRate = 2;
                        if (speedIndicator) {
                            speedIndicator.style.opacity = '1';
                        }
                    }, 300); // start 2x after long press of 300ms
                };
                const endHold = () => {
                    if (holdTimeout) clearTimeout(holdTimeout);
                    if (isHolding) {
                        isHolding = false;
                        videoEl.playbackRate = 1;
                        if (speedIndicator) {
                            speedIndicator.style.opacity = '0';
                        }
                    }
                };

                // Bind events for tap, hold
                videoEl.addEventListener('click', handleTap);
                videoEl.addEventListener('touchend', handleTap);
                videoEl.addEventListener('mousedown', startHold);
                videoEl.addEventListener('touchstart', startHold);
                videoEl.addEventListener('mouseup', endHold);
                videoEl.addEventListener('mouseleave', endHold);
                videoEl.addEventListener('touchend', endHold);
                videoEl.addEventListener('touchcancel', endHold);
            }

            // Toggle settings menu on settings button
            settingsTopBtn?.addEventListener('click', (e) => {
                e.stopPropagation();
                if (settingsMenu) {
                    settingsMenu.classList.toggle('hidden');
                }
            });
            // Close settings when clicking outside the menu
            pageContainer.addEventListener('click', (e) => {
                // If click is outside settings button and menu
                if (settingsMenu && !settingsMenu.classList.contains('hidden')) {
                    const btnElem = settingsTopBtn;
                    if (btnElem && !btnElem.contains(e.target) && !settingsMenu.contains(e.target)) {
                        settingsMenu.classList.add('hidden');
                    }
                }
            }, true);
            // Set mini player toggle state from persistent setting
            if (miniToggle) {
                miniToggle.checked = isMiniPlayerEnabled;
                miniToggle.addEventListener('change', (e) => {
                    isMiniPlayerEnabled = e.target.checked;
                    localStorage.setItem('soundora-miniPlayerEnabled', JSON.stringify(isMiniPlayerEnabled));
                });
            }

            // Handle clicks on settings rows inside the video card. Each row shows a toast
            // or performs simple logic when tapped.
            if (pageId === 'movie-details' && settingsMenu) {
                const qualityRow = pageContainer.querySelector('#card-settings-quality-row');
                const speedRow   = pageContainer.querySelector('#card-settings-speed-row');
                const subRow     = pageContainer.querySelector('#card-settings-subtitles-row');
                const lockRow    = pageContainer.querySelector('#card-settings-screenlock-row');
                const moreRow    = pageContainer.querySelector('#card-settings-more-row');
                // Implement quality and speed selection logic for the card video.
                // Retrieve the movie and sources dynamically so we don't rely on closures.
                qualityRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    // Determine current movie id from dataset attributes
                    const movieId = e.currentTarget.closest('[data-movie-id]')?.dataset?.movieId || (state && state.movieId);
                    const movie    = movies.find(m => m.id === String(movieId));
                    if (!movie) { showToast('Sources unavailable'); return; }
                    const epIdx    = (state && state.episodeIndex) || 0;
                    const sources  = movie.type === 'series' && movie.episodes ? movie.episodes[epIdx].sources : movie.sources;
                    if (!sources) { showToast('Sources unavailable'); return; }
                    const qualities = Object.keys(sources).filter(q => sources[q]);
                    // Simple prompt-based selector; you may replace with a modal for better UX.
                    const choice   = prompt('Select quality (' + qualities.join(', ') + '):', qualities[0]);
                    if (choice && sources[choice]) {
                        const videoEl    = pageContainer.querySelector('#card-video');
                        if (videoEl) {
                            const currentTime = videoEl.currentTime;
                            videoEl.src       = sources[choice];
                            videoEl.currentTime = currentTime;
                            videoEl.play();
                            const labelEl = document.getElementById('card-settings-quality');
                            if (labelEl) labelEl.textContent = choice;
                        }
                    }
                });
                speedRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const videoEl = pageContainer.querySelector('#card-video');
                    if (!videoEl) { showToast('Video unavailable'); return; }
                    // Provide common playback rates
                    const speeds  = [0.5, 0.75, 1, 1.5, 2];
                    const current = videoEl.playbackRate || 1;
                    const choice  = prompt('Select speed (' + speeds.join(', ') + '):', current);
                    const newRate = parseFloat(choice);
                    if (!isNaN(newRate)) {
                        videoEl.playbackRate = newRate;
                        const labelEl = document.getElementById('card-settings-speed');
                        if (labelEl) {
                            labelEl.textContent = (newRate === 1 ? translations[currentLanguage].normalSpeed : `${newRate}x`);
                        }
                    }
                });
                // Subtitles, screen lock and more rows remain placeholders for now
                subRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    showToast('Subtitles are not available.');
                });
                lockRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    showToast('Screen lock is not available.');
                });
                moreRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    showToast('More options coming soon.');
                });
            }

            // Bind fullscreen button. If video is present, open full player; otherwise, use fallback
            const fullscreenButton = pageContainer.querySelector('#card-fullscreen-button');
            if (fullscreenButton) {
                fullscreenButton.addEventListener('click', (e) => {
                    e.stopPropagation();
                    // If video exists, navigate to full player page using movieId and episodeIndex
                    if (videoEl) {
                        const movieId = e.currentTarget.dataset.movieId || ((state && state.movieId) ? state.movieId : undefined);
                        const epIndex = e.currentTarget.dataset.episodeIndex ? parseInt(e.currentTarget.dataset.episodeIndex, 10) : ((state && state.episodeIndex) || 0);
                        if (movieId) {
                            navigate({ page: 'player', movieId: movieId, episodeIndex: epIndex });
                        }
                    } else {
                        // Fallback for image-based card
                        handlePlayClick(e);
                    }
                });
            }
        } else if (pageId === 'favorites') {
            pageContainer.querySelectorAll('.movie-card-link').forEach(card => card.addEventListener('click', handleMovieCardClick));
        } else if (pageId === 'downloads') {
            // Attach movie card click handlers on downloads page
            pageContainer.querySelectorAll('.movie-card-link').forEach(card => card.addEventListener('click', handleMovieCardClick));
        } else if (pageId === 'profile') {
            pageContainer.querySelector('#settings-btn').addEventListener('click', () => navigate({ page: 'settings' }));
            pageContainer.querySelector('#premium-btn').addEventListener('click', () => navigate({ page: 'premium' }));
            pageContainer.querySelector('#privacy-policy-btn').addEventListener('click', () => navigate({ page: 'privacy-policy' }));
            pageContainer.querySelector('#faq-btn').addEventListener('click', () => navigate({ page: 'faq' }));
            pageContainer.querySelector('#copy-id-btn').addEventListener('click', copyUserId);
            // Replace AI chat with a full-page support chat. Instead of opening a modal,
            // clicking the chat button in the profile section navigates to support.html.
            pageContainer.querySelector('#profile-ai-chat-btn').addEventListener('click', () => {
                window.location.href = 'support.html';
            });
            // New account switch and logout handlers
            const switchTop = pageContainer.querySelector('#switch-account-btn');
            const switchBottom = pageContainer.querySelector('#switch-account-btn-bottom');
            const logoutBottom = pageContainer.querySelector('#logout-btn-bottom');
            switchTop?.addEventListener('click', openAccountSwitchModal);
            switchBottom?.addEventListener('click', openAccountSwitchModal);
            logoutBottom?.addEventListener('click', handleLogout);
            // Backwards compatibility for existing logout button
            pageContainer.querySelector('#logout-btn')?.addEventListener('click', handleLogout);

            // Navigate to Downloads page when the downloads button is clicked
            pageContainer.querySelector('#downloads-btn')?.addEventListener('click', () => navigate({ page: 'downloads' }));
        } else if (pageId === 'guest-profile') {
            // Replace AI chat with a full-page support chat for guests as well.
            pageContainer.querySelector('#guest-ai-chat-btn').addEventListener('click', () => {
                window.location.href = 'support.html';
            });
            pageContainer.querySelector('#guest-login-btn').addEventListener('click', () => navigate({ page: 'login' }));
        } else if (pageId === 'login') {
            populateCountrySelector('login-country-code');
            // Email login
            pageContainer.querySelector('#login-form').addEventListener('submit', handleLoginSubmit);
            pageContainer.querySelector('#go-to-register-btn').addEventListener('click', () => navigate({ page: 'register' }));

            // Phone login
            pageContainer.querySelector('#send-code-btn').addEventListener('click', () => handleSendCode('login'));
            pageContainer.querySelector('#verify-code-btn').addEventListener('click', () => handleVerifyCode('login'));

            // Tab switching
            const emailTab = pageContainer.querySelector('#email-login-tab');
            const phoneTab = pageContainer.querySelector('#phone-login-tab');
            const emailForm = pageContainer.querySelector('#email-login-form-container');
            const phoneForm = pageContainer.querySelector('#phone-login-form-container');

            emailTab.addEventListener('click', () => {
                emailTab.classList.add('active');
                phoneTab.classList.remove('active');
                emailForm.classList.remove('hidden');
                phoneForm.classList.add('hidden');
            });
            phoneTab.addEventListener('click', () => {
                phoneTab.classList.add('active');
                emailTab.classList.remove('active');
                phoneForm.classList.remove('hidden');
                emailForm.classList.add('hidden');
            });

        } else if (pageId === 'register') {
            populateCountrySelector('register-country-code');
            // Email register
            pageContainer.querySelector('#register-form').addEventListener('submit', handleRegisterSubmit);
            pageContainer.querySelector('#go-to-login-btn').addEventListener('click', () => navigate({ page: 'login' }));

            // Phone register
            pageContainer.querySelector('#register-send-code-btn').addEventListener('click', () => handleSendCode('register'));
            pageContainer.querySelector('#register-verify-code-btn').addEventListener('click', () => handleVerifyCode('register'));

            // Tab switching
            const emailTab = pageContainer.querySelector('#email-register-tab');
            const phoneTab = pageContainer.querySelector('#phone-register-tab');
            const emailForm = pageContainer.querySelector('#email-register-form-container');
            const phoneForm = pageContainer.querySelector('#phone-register-form-container');

            emailTab.addEventListener('click', () => {
                emailTab.classList.add('active');
                phoneTab.classList.remove('active');
                emailForm.classList.remove('hidden');
                phoneForm.classList.add('hidden');
            });
            phoneTab.addEventListener('click', () => {
                phoneTab.classList.add('active');
                emailTab.classList.remove('active');
                phoneForm.classList.remove('hidden');
                emailForm.classList.add('hidden');
            });

        } else if (pageId === 'settings') {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            pageContainer.querySelector('#edit-profile-btn').addEventListener('click', () => navigate({ page: 'edit-profile' }));
            pageContainer.querySelector('#language-settings-btn').addEventListener('click', () => navigate({ page: 'language-settings' }));
            pageContainer.querySelector('#playback-settings-btn').addEventListener('click', () => navigate({ page: 'playback-settings' }));
            pageContainer.querySelector('#content-settings-btn').addEventListener('click', () => navigate({ page: 'content-settings' }));
            // Navigate to region settings when region-settings button is clicked
            const regionBtn = pageContainer.querySelector('#region-settings-btn');
            if (regionBtn) {
                regionBtn.addEventListener('click', () => navigate({ page: 'region-settings' }));
            }
        } else if (pageId === 'playback-settings') {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            // Mini-player toggle change handler
            pageContainer.querySelector('#mini-player-toggle').addEventListener('change', (e) => {
                isMiniPlayerEnabled = e.target.checked;
                localStorage.setItem('soundora-miniPlayerEnabled', JSON.stringify(isMiniPlayerEnabled));
            });
            // Resume prompt toggle change handler
            const resumeToggle = pageContainer.querySelector('#resume-prompt-toggle');
            if (resumeToggle) {
                resumeToggle.addEventListener('change', (e) => {
                    isResumePromptEnabled = e.target.checked;
                    localStorage.setItem('soundora-resumePromptEnabled', JSON.stringify(isResumePromptEnabled));
                });
            }
        } else if (pageId === 'region-settings') {
            // Region settings page handlers
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            const selectEl = pageContainer.querySelector('#region-select-setting');
            const saveBtn = pageContainer.querySelector('#save-region-btn');
            if (saveBtn && selectEl) {
                saveBtn.addEventListener('click', () => {
                    const selectedRegion = selectEl.value;
                    localStorage.setItem('soundora-region', selectedRegion);
                    // After saving, return to settings page
                    navigate({ page: 'settings' });
                });
            }
        } else if (['privacy-policy', 'faq', 'premium'].includes(pageId)) {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            // Setup promo code redemption on premium page
            if (pageId === 'premium') {
                const redeemBtn = pageContainer.querySelector('#redeem-promo-btn');
                redeemBtn?.addEventListener('click', async () => {
                    const inputEl = pageContainer.querySelector('#promo-code-input');
                    const feedbackEl = pageContainer.querySelector('#promo-feedback');
                    if (!inputEl || !feedbackEl) return;
                    const code = inputEl.value.trim();
                    feedbackEl.className = 'text-sm mt-2';
                    feedbackEl.textContent = '';
                    if (!code) {
                        feedbackEl.textContent = 'Р’РІРµРґРёС‚Рµ РїСЂРѕРјРѕРєРѕРґ';
                        feedbackEl.classList.add('text-red-500');
                        return;
                    }
                    try {
                        if (!(currentUser && currentUser.uid)) {
                            feedbackEl.textContent = 'РђРІС‚РѕСЂРёР·СѓР№С‚РµСЃСЊ, С‡С‚РѕР±С‹ Р°РєС‚РёРІРёСЂРѕРІР°С‚СЊ';
                            feedbackEl.classList.add('text-red-500');
                            return;
                        }
                        // Promo codes are stored in Firestore using the code itself as the document ID.
                        // Therefore, fetch the document directly by its ID and ensure it hasn't been used yet.
                        const promoRef = doc(db, 'promo_codes', code);
                        const promoDocSnap = await getDoc(promoRef);
                        if (!promoDocSnap.exists()) {
                            feedbackEl.textContent = 'РќРµРІРµСЂРЅС‹Р№ РёР»Рё РёСЃРїРѕР»СЊР·РѕРІР°РЅРЅС‹Р№ РєРѕРґ';
                            feedbackEl.classList.add('text-red-500');
                            return;
                        }
                        const promoData = promoDocSnap.data();
                        // For multi-use promo codes, check usage limits
                        const maxUses = promoData.maxUses || 1;
                        const usedCount = promoData.usedCount || 0;
                        const usedBy = Array.isArray(promoData.usedBy) ? promoData.usedBy : (promoData.usedBy ? [promoData.usedBy] : []);
                        // If the promo is flagged as used or usage limit reached, treat as invalid
                        if (promoData.used || usedCount >= maxUses) {
                            feedbackEl.textContent = 'РќРµРІРµСЂРЅС‹Р№ РёР»Рё РёСЃРїРѕР»СЊР·РѕРІР°РЅРЅС‹Р№ РєРѕРґ';
                            feedbackEl.classList.add('text-red-500');
                            return;
                        }
                        // Prevent the same user from redeeming the same code multiple times
                        if (usedBy.includes(currentUser.uid)) {
                            feedbackEl.textContent = 'Р’С‹ СѓР¶Рµ РёСЃРїРѕР»СЊР·РѕРІР°Р»Рё СЌС‚РѕС‚ РїСЂРѕРјРѕРєРѕРґ';
                            feedbackEl.classList.add('text-red-500');
                            return;
                        }
                        // Determine duration in milliseconds
                        let ms = 0;
                        switch (promoData.duration) {
                            case '3d': ms = 3 * 24 * 60 * 60 * 1000; break;
                            case '1m': ms = 30 * 24 * 60 * 60 * 1000; break;
                            case '3m': ms = 90 * 24 * 60 * 60 * 1000; break;
                            case '7m': ms = 210 * 24 * 60 * 60 * 1000; break;
                            case '12m': ms = 365 * 24 * 60 * 60 * 1000; break;
                            default: ms = 0; break;
                        }
                        const expiresAtDate = new Date(Date.now() + ms);
                        // Update user doc with premium status and expiry
                        await updateDoc(doc(db, 'users', currentUser.uid), { isPremium: true, premiumExpiresAt: expiresAtDate });
                        // Increment usage count and record the user; mark as used if limit reached
                        const newCount = usedCount + 1;
                        const newUsed = newCount >= maxUses;
                        await updateDoc(promoRef, {
                            usedCount: newCount,
                            used: newUsed,
                            usedBy: arrayUnion(currentUser.uid),
                            usedAt: serverTimestamp()
                        });
                        currentUser.isPremium = true;
                        feedbackEl.textContent = 'РџСЂРѕРјРѕРєРѕРґ Р°РєС‚РёРІРёСЂРѕРІР°РЅ!';
                        feedbackEl.classList.add('text-green-500');
                        showToast('РџСЂРµРјРёСѓРј Р°РєС‚РёРІРёСЂРѕРІР°РЅ!', false);
                    } catch (e) {
                        console.error('Error redeeming promo code', e);
                        feedbackEl.textContent = 'РћС€РёР±РєР°, РїРѕРїСЂРѕР±СѓР№С‚Рµ РїРѕР·Р¶Рµ';
                        feedbackEl.classList.add('text-red-500');
                    }
                });
            }
        } else if (['language-settings', 'content-settings'].includes(pageId)) {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            if (pageId === 'language-settings') {
                pageContainer.querySelectorAll('.lang-btn').forEach(btn => btn.addEventListener('click', (e) => setLanguage(e.currentTarget.dataset.lang)));
            }
            if (pageId === 'content-settings') {
                pageContainer.querySelector('#content-toggle').addEventListener('change', (e) => {
                    localStorage.setItem('soundora-show18plus', e.target.checked);
                });
            }
        } else if (pageId === 'edit-profile') {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            pageContainer.querySelector('#save-profile-btn').addEventListener('click', handleSaveProfile);
            const changePasswordForm = pageContainer.querySelector('#change-password-form');
            if (changePasswordForm) {
                changePasswordForm.addEventListener('submit', handleChangePassword);
            }
        } else if (pageId === 'player') {
            setupPlayerControls(state);
        }
    }

    function handleMovieCardClick(e) { e.preventDefault(); navigate({ page: 'movie-details', movieId: e.currentTarget.dataset.movieId }); }

    async function handleFavoriteClick(e) {
        e.stopPropagation();
        if (!currentUser) {
            showToast(translations[currentLanguage].loginRequired);
            postLoginRedirect = { page: 'movie-details', movieId: e.currentTarget.dataset.movieId };
            navigate({ page: 'login' });
            return;
        }
        const button = e.currentTarget;
        button.disabled = true;
        const movieId = button.dataset.movieId;
        const userRef = doc(db, "users", currentUser.uid);
        const newFavorites = [...(currentUser.favorites || [])];
        const index = newFavorites.indexOf(movieId);

        if (index > -1) newFavorites.splice(index, 1);
        else newFavorites.push(movieId);

        try {
            await updateDoc(userRef, { favorites: newFavorites });
            showToast(index > -1 ? translations[currentLanguage].removeFromFavorites : translations[currentLanguage].addToFavorites);
        } catch (error) {
            console.error("Error updating favorites:", error);
        } finally {
            button.disabled = false;
        }
    }

    function handlePlayClick(e) {
        const movieId = e.currentTarget.dataset.movieId;
        const episodeIndex = e.currentTarget.dataset.episodeIndex;
        const targetState = { page: 'player', movieId: movieId, episodeIndex: episodeIndex ? parseInt(episodeIndex, 10) : 0 };

        const movie = movies.find(m => m.id === String(movieId));
        if (!movie) return;

        if (!currentUser) {
            postLoginRedirect = targetState;
            showToast(translations[currentLanguage].loginRequired);
            navigate({ page: 'login' });
            return;
        }

        if (movie.isPremium && !currentUser.isPremium) {
            showPremiumRequiredModal();
            return;
        }

        if(miniPlayerState.active && miniPlayerState.state.movieId === movieId) {
            hideMiniPlayer();
        }
        navigate(targetState);
    }

    async function handleLoginSubmit(e) {
        e.preventDefault();
        const email = document.getElementById('login-email-input').value;
        const password = document.getElementById('login-password-input').value;
        const errorEl = document.getElementById('login-error');
        errorEl.textContent = '';
        loadingOverlay.classList.remove('hidden');

        try {
            await signInWithEmailAndPassword(auth, email, password);

            // After successful login, store or update account info including password for quick switch
            try {
                const user = auth.currentUser;
                if (user) {
                    const accounts = JSON.parse(localStorage.getItem('soundora-accounts')) || [];
                    // remove existing record for this uid
                    const filtered = accounts.filter(acc => acc.uid !== user.uid);
                    filtered.push({
                        uid: user.uid,
                        displayName: user.displayName,
                        email: user.email,
                        phoneNumber: user.phoneNumber,
                        password: password
                    });
                    localStorage.setItem('soundora-accounts', JSON.stringify(filtered));
                }
            } catch (e) {
                console.error('Error updating account list on login', e);
            }
        } catch (error) {
            errorEl.textContent = translations[currentLanguage].invalidCredentials;
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    // --- Telefon raqami orqali kirish/ro'yxatdan o'tish funksiyalari ---
    function setupRecaptcha(containerId) {
        const recaptchaContainer = document.getElementById(containerId);
        if (!recaptchaContainer) {
            console.error("reCAPTCHA container not found:", containerId);
            return;
        }
        // Oldingi verifierni tozalash
        if (window.recaptchaVerifier && window.recaptchaVerifier.clear) {
            window.recaptchaVerifier.clear();
        }

        window.recaptchaVerifier = new RecaptchaVerifier(auth, containerId, {
            'size': 'invisible',
            'callback': (response) => {
                // reCAPTCHA solved, allow signInWithPhoneNumber.
            },
            'expired-callback': () => {
                // Response expired. Ask user to solve reCAPTCHA again.
                showToast("reCAPTCHA muddati tugadi. Qaytadan urining.", true);
            }
        });
        window.recaptchaVerifier.render(); // reCAPTCHAni darhol ishga tushirish
    }

    // Davlat tanlash menyusini to'ldirish
    function populateCountrySelector(selectId) {
        const selectElement = document.getElementById(selectId);
        if (!selectElement) return;
        selectElement.innerHTML = ''; // Oldingi optionlarni tozalash
        countries.forEach(country => {
            const option = document.createElement('option');
            option.value = country.code;
            option.textContent = `${country.flag} ${country.code}`;
            // Set Russia (+7) as the default selection instead of Uzbekistan
            if (country.code === '+7') {
                option.selected = true;
            }
            selectElement.appendChild(option);
        });
    }

    async function handleSendCode(pageType) { // pageType: 'login' or 'register'
        const countryCode = document.getElementById(`${pageType}-country-code`).value;
        const phoneNumberInput = document.getElementById(`${pageType}-phone-number-input`);
        const errorEl = document.getElementById(pageType === 'login' ? 'login-error' : 'register-page-error');
        const phoneNumber = countryCode + phoneNumberInput.value.replace(/\D/g, '');
        errorEl.textContent = '';

        if (phoneNumber.length < 10) { // Umumiyroq tekshiruv
            errorEl.textContent = translations[currentLanguage].invalidPhoneNumber;
            return;
        }

        loadingOverlay.classList.remove('hidden');
        setupRecaptcha(pageType === 'login' ? 'recaptcha-container' : 'register-recaptcha-container');
        const appVerifier = window.recaptchaVerifier;

        try {
            window.confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, appVerifier);
            showToast(translations[currentLanguage].smsSent);
            document.getElementById(`${pageType}-phone-entry-view`).classList.add('hidden');
            document.getElementById(`${pageType}-code-entry-view`).classList.remove('hidden');
            document.getElementById(`${pageType}-verification-code-input`).focus();
        } catch (error) {
            console.error("SMS yuborishda xatolik:", error);
            if (error.code === 'auth/operation-not-allowed') {
                 errorEl.textContent = "SMS yuborish uchun ruxsat yo'q. Administrator bilan bog'laning.";
            } else {
                 errorEl.textContent = "SMS yuborishda xatolik. Qaytadan urining.";
            }
            if (window.recaptchaVerifier) {
                window.recaptchaVerifier.render().then(widgetId => {
                    grecaptcha.reset(widgetId);
                });
            }
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    async function handleVerifyCode(pageType) {
        const codeInput = document.getElementById(`${pageType}-verification-code-input`);
        const code = codeInput.value;
        const errorEl = document.getElementById(pageType === 'login' ? 'login-error' : 'register-page-error');
        errorEl.textContent = '';

        if (code.length < 6) {
            errorEl.textContent = translations[currentLanguage].invalidCode;
            return;
        }

        loadingOverlay.classList.remove('hidden');
        try {
            await window.confirmationResult.confirm(code);
            // onAuthStateChanged qolgan ishlarni bajaradi
            // Yangi ro'yxatdan o'tgan bo'lsa, onAuthStateChanged ichida createUserData chaqiriladi
        } catch (error) {
            console.error("Kodni tasdiqlashda xatolik:", error);
            errorEl.textContent = translations[currentLanguage].invalidCode;
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }
    // --- Telefon raqami funksiyalari tugadi ---

    async function handleRegisterSubmit(e) {
        e.preventDefault();
        const name = document.getElementById('register-name-input').value;
        const email = document.getElementById('register-email-input').value; // This is the login
        const password = document.getElementById('register-password-input').value;
        const dob = document.getElementById('register-dob-input').value;
        const secretWord = document.getElementById('register-secret-input').value;
        const errorEl = document.getElementById('register-error');
        errorEl.textContent = '';

        if (!name || !email || !password || !dob || !secretWord) {
            errorEl.textContent = "Barcha maydonlarni to'ldiring.";
            return;
        }

        loadingOverlay.classList.remove('hidden');

        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            const user = userCredential.user;

            // createUserData onAuthStateChanged ichida chaqiriladi, lekin qo'shimcha ma'lumotlarni o'tkazish kerak
            await createUserData(user, {
                name: name,
                dob: dob,
                secretWord: secretWord
            });

            // Store account info including password for quick switch between accounts
            try {
                const accounts = JSON.parse(localStorage.getItem('soundora-accounts')) || [];
                // remove any existing record for this uid
                const filtered = accounts.filter(acc => acc.uid !== user.uid);
                filtered.push({ uid: user.uid, displayName: name, email: email, phoneNumber: user.phoneNumber, password: password });
                localStorage.setItem('soundora-accounts', JSON.stringify(filtered));
            } catch (e) {
                console.error('Error storing new account', e);
            }

        } catch (error) {
            if (error.code === 'auth/email-already-in-use') {
                errorEl.textContent = "Bu login (email) allaqachon mavjud.";
            } else if (error.code === 'auth/weak-password') {
                errorEl.textContent = "Parol juda oddiy (kamida 6 ta belgi bo'lishi kerak).";
            } else {
                errorEl.textContent = "Ro'yxatdan o'tishda xatolik yuz berdi.";
            }
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    async function handleLogout() {
        // Capture UID before logging out
        const uid = currentUser?.uid;
        try {
            await signOut(auth);
        
            try { localStorage.removeItem('soundora-lastUid'); } catch(_) {}
            window.location.replace('auth.html');
        }
 catch (error) {
            console.error("Logout Error:", error);
        } finally {
            // Clear account data so profiles and accounts do not persist across logins
            localStorage.removeItem('soundora-accounts');
            localStorage.removeItem('soundora-selected-account');
            if (uid) {
                localStorage.removeItem(`soundora-profiles-${uid}`);
            }
        }
    }

    async function handleSaveProfile() {
        const usernameInput = document.getElementById('username-input');
        if (!usernameInput || !currentUser) return;

        const newName = usernameInput.value.trim();
        if (newName === '' || newName === currentUser.displayName) {
            return;
        }

        loadingOverlay.classList.remove('hidden');
        const userRef = doc(db, "users", currentUser.uid);
        try {
            await updateDoc(userRef, { displayName: newName });
            showToast(translations[currentLanguage].profileUpdateSuccess);
        } catch (error) {
            showToast(translations[currentLanguage].profileUpdateError, true);
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    async function handleChangePassword(e) {
        e.preventDefault();
        const currentPassword = document.getElementById('current-password-input').value;
        const newPassword = document.getElementById('new-password-input').value;
        const confirmPassword = document.getElementById('confirm-password-input').value;
        const errorEl = document.getElementById('password-error');
        errorEl.textContent = '';

        if (newPassword !== confirmPassword) {
            errorEl.textContent = translations[currentLanguage].passwordsDoNotMatch;
            return;
        }
        if (newPassword.length < 6) {
            errorEl.textContent = "Parol kamida 6 belgidan iborat bo'lishi kerak.";
            return;
        }

        loadingOverlay.classList.remove('hidden');
        try {
            const user = auth.currentUser;
            const credential = EmailAuthProvider.credential(user.email, currentPassword);
            await reauthenticateWithCredential(user, credential);
            await updatePassword(user, newPassword);
            showToast(translations[currentLanguage].passwordUpdateSuccess);
            e.target.reset();
        } catch (error) {
            console.error("Parolni o'zgartirish xatosi:", error);
            errorEl.textContent = translations[currentLanguage].passwordUpdateError;
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    function copyUserId() {
        const idElement = document.getElementById('user-profile-id');
        if (idElement) {
            copyToClipboard(idElement.textContent);
            showToast(translations[currentLanguage].idCopied);
        }
    }

    function handleDownloadClick(e) {
        const movieId = e.currentTarget.dataset.movieId;
        const movie = movies.find(m => m.id === String(movieId));
        if (!movie || !movie.sources) {
            showToast("Yuklab olish manbasi topilmadi.", true);
            return;
        }

        const availableQualities = ['1080p', '720p', '480p'];
        let downloadUrl = '';
        for (const quality of availableQualities) {
            if (movie.sources[quality]) {
                downloadUrl = movie.sources[quality];
                break;
            }
        }

        if (!downloadUrl) {
            showToast("Yuklab olish manbasi topilmadi.", true);
            return;
        }

        // Save movie information to local storage for offline downloads. Include status and progress.
        try {
            const storageKey = 'soundora-downloads';
            let downloaded = JSON.parse(localStorage.getItem(storageKey)) || [];
            const idStr = String(movie.id);
            // Avoid duplicates by checking existing entries
            if (!downloaded.some(item => (typeof item === 'object' ? item.id : item) === idStr)) {
                downloaded.push({ id: idStr, title: movie.title, url: downloadUrl, status: 'downloading', progress: 0 });
                localStorage.setItem(storageKey, JSON.stringify(downloaded));
            }
        } catch (err) {
            console.error('Error storing download', err);
        }

        // Notify user that download has started and is added to downloads page
        const startedMsg = translations[currentLanguage]?.downloadStarted || 'Download started. Check downloads page.';
        showToast(startedMsg);
        // Show toast that movie added to downloads
        const message = translations[currentLanguage]?.downloadAdded || 'Added to downloads';
        showToast(message);

        // Reference to progress bar elements inside modal (optional). We do not display the modal during download.
        const progressModal = document.getElementById('download-progress-modal');
        const progressBar   = document.getElementById('download-progress-bar');
        const progressText  = document.getElementById('download-progress-text');
        downloadVideoWithProgress(downloadUrl, (received, total) => {
            if (total) {
                const percent = (received / total) * 100;
                // Update progress bar in the modal
                if (progressBar && progressText) {
                    progressBar.style.width = `${percent.toFixed(2)}%`;
                    const receivedMB = (received / (1024 * 1024)).toFixed(1);
                    const totalMB    = (total / (1024 * 1024)).toFixed(1);
                    progressText.textContent = `${receivedMB} MB / ${totalMB} MB`;
                }
                // Persist progress state for this movie so downloads page can reflect it
                updateDownloadEntry(movie.id, { progress: Math.min(100, percent), status: 'downloading' });
                // Also update progress bar in downloads page if present
                const bar = document.getElementById(`download-progress-${movie.id}`);
                const label = document.getElementById(`download-progress-text-${movie.id}`);
                if (bar) {
                    bar.style.width = `${percent.toFixed(2)}%`;
                }
                if (label) {
                    label.textContent = `${percent.toFixed(0)}%`;
                }
            }
        }).then(blob => {
            // Save the video blob to IndexedDB for offline playback
            saveVideoToDB(movie.id, blob).then(() => {
                // Update status to completed and progress to 100%
                updateDownloadEntry(movie.id, { status: 'completed', progress: 100 });
                // Hide modal
                if (progressModal) {
                    progressModal.classList.add('hidden');
                    progressBar.style.width = '0%';
                    progressText.textContent = '0 MB / 0 MB';
                }
                const message = translations[currentLanguage]?.downloadAdded || 'Added to downloads';
                showToast(message);
                // Update downloads page UI to mark completed
                const bar = document.getElementById(`download-progress-${movie.id}`);
                const label = document.getElementById(`download-progress-text-${movie.id}`);
                if (bar) bar.style.width = '100%';
                if (label) label.textContent = '100%';
            }).catch(err => {
                console.error('Error saving video to DB:', err);
                if (progressModal) progressModal.classList.add('hidden');
            });
        }).catch(err => {
            console.error('Error downloading video:', err);
            if (progressModal) progressModal.classList.add('hidden');
        });
    }

    /**
     * Opens (and upgrades if necessary) the IndexedDB database used for storing
     * downloaded videos. Returns a promise that resolves with the database instance.
     */
    function openDownloadsDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open('soundoraDownloads', 1);
            request.onupgradeneeded = (ev) => {
                const db = ev.target.result;
                if (!db.objectStoreNames.contains('videos')) {
                    db.createObjectStore('videos');
                }
            };
            request.onsuccess = (ev) => resolve(ev.target.result);
            request.onerror = (ev) => reject(ev.target.error);
        });
    }

    /**
     * Saves a video Blob to the IndexedDB under the given movie ID key.
     */
    function saveVideoToDB(movieId, blob) {
        return openDownloadsDB().then((db) => {
            return new Promise((resolve, reject) => {
                const tx = db.transaction('videos', 'readwrite');
                const store = tx.objectStore('videos');
                store.put(blob, String(movieId));
                tx.oncomplete = () => resolve();
                tx.onerror = (ev) => reject(ev.target.error);
            });
        });
    }

    /**
     * Updates an existing entry in the downloads list stored in localStorage.
     * Accepts a movieId and an object containing the fields to update (e.g., { progress: 50, status: 'downloading' }).
     */
    function updateDownloadEntry(movieId, updates) {
        try {
            const storageKey = 'soundora-downloads';
            let downloaded = JSON.parse(localStorage.getItem(storageKey)) || [];
            const idStr = String(movieId);
            downloaded = downloaded.map(item => {
                if ((typeof item === 'object' ? item.id : item) === idStr) {
                    if (typeof item === 'object') {
                        return Object.assign({}, item, updates);
                    }
                    // If item is string (legacy), convert to object
                    return Object.assign({ id: idStr }, updates);
                }
                return item;
            });
            localStorage.setItem(storageKey, JSON.stringify(downloaded));
        } catch (err) {
            console.error('Failed to update download entry', err);
        }
    }

    /**
     * Downloads a file using Fetch and reports progress via a callback. Returns a promise
     * that resolves with the resulting Blob once the download completes.
     */
    function downloadVideoWithProgress(url, onProgress) {
        return fetch(url).then((response) => {
            if (!response.ok) throw new Error('Network response was not ok');
            const contentLength = response.headers.get('Content-Length');
            const total = contentLength ? parseInt(contentLength, 10) : 0;
            const reader = response.body.getReader();
            let received = 0;
            const chunks = [];
            function pump() {
                return reader.read().then(({ done, value }) => {
                    if (done) {
                        return new Blob(chunks);
                    }
                    chunks.push(value);
                    received += value.length;
                    if (onProgress && total) {
                        onProgress(received, total);
                    }
                    return pump();
                });
            }
            return pump();
        });
    }

    /**
     * Generate a shareable promo code for the current user. Free users may generate
     * up to 2 promo codes, while premium users may generate up to 4 codes. Each
     * generated code contains an expiry timestamp (7 days from now) and is stored
     * in localStorage under the key `soundora-promo-codes`. If the user has
     * reached the limit, a toast message is shown and no new code is created.
     * Otherwise a new code is generated, saved, copied to the clipboard and a
     * success toast is displayed.
     */
    function setLanguage(lang) {
        currentLanguage = ['en', 'ru', 'uz'].includes(lang) ? lang : 'ru';
        localStorage.setItem('soundora-lang', currentLanguage);
        document.documentElement.lang = lang;

        document.querySelectorAll('[data-lang-key]').forEach(el => {
            const key = el.getAttribute('data-lang-key');
            let translation = translations[currentLanguage]?.[key];
            if (translation === undefined) return;

            if (key === 'deviceLimitInfo') {
                const current = el.dataset.current;
                const max = el.dataset.max;
                translation = translation.replace('{CURRENT}', current).replace('{MAX}', max);
            }

            if (el.tagName === 'INPUT' && !['checkbox', 'radio', 'submit'].includes(el.type)) {
                el.placeholder = translation;
            } else {
                el.textContent = translation;
            }
        });

        // If the premium kassa modal is present, reapply its translations when the language changes
        try {
            if (typeof kassaApplyTranslations === 'function') {
                kassaApplyTranslations();
            }
        } catch (err) {
            console.warn('Kassa translation update failed:', err);
        }
        if (typeof window.sndRefreshSearchLocale === 'function') {
            try {
                window.sndRefreshSearchLocale();
            } catch (err) {
                console.warn('Search overlay translation update failed:', err);
            }
        }
    }

    function createMovieCardHTML(movie) {
        const posterSrc = movie.poster || `https://placehold.co/400x600/1f2937/ffffff?text=${encodeURIComponent(movie.title)}`;
        return `
            <a href="#" class="movie-card-link group relative overflow-hidden rounded-lg shadow-lg cursor-pointer" data-movie-id="${movie.id}" onclick="event.preventDefault(); handleMovieCardClick(event)">
                <img src="${posterSrc}" onerror="this.onerror=null;this.src='https://placehold.co/400x600/ef4444/ffffff?text=Error';" alt="${movie.title}" class="w-full h-full object-cover transition duration-500 group-hover:scale-110">
                ${movie.isPremium ? `<div class="absolute top-2 left-2 bg-gradient-to-r from-amber-500 to-yellow-400 text-white text-xs font-bold px-2 py-1 rounded-full flex items-center gap-1"><i class="fas fa-crown text-xs"></i><span data-lang-key="premium">Premium</span></div>` : ''}
                ${movie.type === 'series' ? `<span class="absolute top-2 right-2 bg-blue-600 text-white text-xs font-bold px-2 py-1 rounded-full" data-lang-key="series">РЎРµСЂРёР°Р»</span>` : ''}
                <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"><i class="fas fa-play-circle text-white text-5xl"></i></div>
                <div class="absolute bottom-0 left-0 right-0 p-2 bg-gradient-to-t from-black to-transparent"><h3 class="text-white font-semibold text-md truncate">${movie.title}</h3><p class="text-gray-400 text-xs">${movie.year}</p></div>
            </a>`;
    }

    function populateCategories() {
        const categoryNav = document.getElementById('category-nav');
        if (!categoryNav) return;
        const years = [...new Set(movies.map(m => String(m.year)))].sort((a, b) => b.localeCompare(a)).filter(y => y && y !== 'undefined');
        const categories = [ { key: 'categoryAll' }, { key: 'categoryNew' }, { key: 'categoryTrending' }, ...years ];
        categoryNav.innerHTML = categories.map((cat, index) => {
            const isYear = typeof cat === 'string';
            const value = isYear ? cat : cat.key;
            const text = isYear ? cat : (translations[currentLanguage][cat.key] || cat.key);
            const langKeyAttr = isYear ? '' : `data-lang-key="${cat.key}"`;
            return `<button class="category-btn shrink-0 px-4 py-2 text-sm font-semibold rounded-full bg-gray-700 text-gray-300 ${index === 0 ? 'active' : ''}" data-category-value="${value}" ${langKeyAttr}>${text}</button>`;
        }).join('');

        categoryNav.querySelectorAll('.category-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                document.querySelector('#category-nav .category-btn.active')?.classList.remove('active');
                e.currentTarget.classList.add('active');
                filterAndDisplayMovies(e.currentTarget.dataset.categoryValue);
            });
        });

    }
    function filterAndDisplayMovies(category) {
        const moviesGrid = document.getElementById('movies-grid');
        if (!moviesGrid) return;
        let filteredMovies;
        const show18Plus = JSON.parse(localStorage.getItem('soundora-show18plus')) || false;
        const baseMovies = show18Plus ? movies : movies.filter(m => !m.is18Plus);

        switch(category) {
            case 'categoryAll': filteredMovies = baseMovies; break;
            case 'categoryNew': filteredMovies = [...baseMovies].sort((a, b) => (b.createdAt?.toDate() || 0) - (a.createdAt?.toDate() || 0)).slice(0, 30); break;
            case 'categoryTrending': filteredMovies = baseMovies.filter(m => m.isTrending); break;
            default: filteredMovies = baseMovies.filter(m => String(m.year) === String(category)); break;
        }
        // Til bo'yicha filtrlash: agar tanlangan til 'all' bo'lmasa, quyidagi shartlar bo'yicha filtrlaymiz:
        // 1) Filmning asosiy tili (m.language) tanlangan tilga teng bo'lsa;
        // 2) audioLangs yoki subtitleLangs massivlarida ushbu til mavjud bo'lsa.
        if (selectedLangFilter && selectedLangFilter !== 'all') {
            const sel = String(selectedLangFilter).toLowerCase();
            filteredMovies = filteredMovies.filter(m => {
                // Asosiy tilni tekshiramiz
                const langMatch = m.language && String(m.language).toLowerCase() === sel;
                // Audio tillari orasida bor-yo'qligini tekshiramiz
                const audioMatch = Array.isArray(m.audioLangs) && m.audioLangs.map(l => String(l).toLowerCase()).includes(sel);
                // Subtitr tillari orasida bor-yo'qligini tekshiramiz
                const subMatch = Array.isArray(m.subtitleLangs) && m.subtitleLangs.map(l => String(l).toLowerCase()).includes(sel);
                return langMatch || audioMatch || subMatch;
            });
        }
        moviesGrid.innerHTML = filteredMovies.length > 0 ? filteredMovies.map(createMovieCardHTML).join('') : `<p class="col-span-full text-center text-gray-400 mt-8" data-lang-key="noResults"></p>`;
        window.handleMovieCardClick = (e) => { e.preventDefault(); navigate({ page: 'movie-details', movieId: e.currentTarget.dataset.movieId }); };
        setLanguage(currentLanguage);
    }

    /**
     * Apply a top navigation section.  When the user clicks on Home, Series,
     * Movies, SND, Sports or Challenges, this function updates the active
     * highlight, shows/hides the hero banner and category navigation, filters
     * the list of movies accordingly and updates the grid.  Filtering is
     * performed on the inвЂ‘memory movies array and takes into account the
     * selected language and 18+ visibility preferences.  If no movies match
     * the selected section, a "no results" message is shown.  The hero and
     * category navigation are only visible on the Home section.
     *
     * @param {string} section The section identifier (home, series, movies,
     *                         snd, sports, challenges).
     */
    function ensureSportsCategoriesRendered() {
        const container = document.getElementById('sports-category-grid');
        if (!container) return;
        if (container.dataset.rendered === 'true') {
            updateSportsCategoryCards();
            return;
        }
        container.innerHTML = SPORTS_CATEGORIES.map(cat => `
            <button type="button" class="sports-category-card" data-category="${cat.id}">
                <i class="${cat.icon}"></i>
                <div>
                    <p class="text-lg font-semibold">${cat.label}</p>
                    <p class="text-sm text-gray-400">${cat.id === 'all' ? 'Browse every sports event available on SND.' : 'Discover the best of ' + cat.label.toLowerCase() + '.'}</p>
                </div>
            </button>
        `).join('');
        container.dataset.rendered = 'true';
        container.querySelectorAll('.sports-category-card').forEach(card => {
            card.addEventListener('click', () => {
                const categoryId = card.dataset.category || 'all';
                if (selectedSportsCategory !== categoryId) {
                    selectedSportsCategory = categoryId;
                    updateSportsCategoryCards();
                    applyTopSection('sports');
                }
            });
        });
        updateSportsCategoryCards();
    }

    function updateSportsCategoryCards() {
        const cards = document.querySelectorAll('.sports-category-card');
        cards.forEach(card => {
            const id = card.dataset.category || 'all';
            if (id === selectedSportsCategory) card.classList.add('active');
            else card.classList.remove('active');
        });
    }

    function filterSportsMovies(baseMovies, categoryId) {
        const sportsMovies = baseMovies.filter(m => {
            const combinedGenre = Array.isArray(m.genre) ? m.genre.join(' ') : String(m.genre || '');
            const tags = Array.isArray(m.tags) ? m.tags.join(' ') : String(m.tags || '');
            const categories = Array.isArray(m.categories) ? m.categories.join(' ') : String(m.categories || '');
            const marker = [
                combinedGenre,
                tags,
                categories,
                String(m.sportCategory || ''),
                String(m.title || '')
            ].join(' ').toLowerCase();
            const sportKeywords = ['sport', 'sports', 'football', 'soccer', 'basketball', 'volleyball', 'mma', 'boxing', 'ufc', 'fight', 'racing', 'motorsport', 'formula', 'f1'];
            return sportKeywords.some(keyword => marker.includes(keyword));
        });
        if (categoryId === 'all') return sportsMovies;
        const category = SPORTS_CATEGORIES.find(cat => cat.id === categoryId);
        if (!category || !Array.isArray(category.keywords) || category.keywords.length === 0) return sportsMovies;
        const keywords = category.keywords.map(k => k.toLowerCase());
        return sportsMovies.filter(movie => {
            const parts = [];
            if (Array.isArray(movie.genre)) parts.push(movie.genre.join(' '));
            else if (movie.genre) parts.push(movie.genre);
            if (Array.isArray(movie.tags)) parts.push(movie.tags.join(' '));
            else if (movie.tags) parts.push(movie.tags);
            if (Array.isArray(movie.categories)) parts.push(movie.categories.join(' '));
            if (movie.sportCategory) parts.push(movie.sportCategory);
            if (movie.title) parts.push(movie.title);
            if (movie.description) parts.push(movie.description);
            const haystack = parts.join(' ').toLowerCase();
            return keywords.some(keyword => haystack.includes(keyword));
        });
    }

    function applyTopSection(section) {
        const previousSection = selectedSection;
        selectedSection = section;
        // Update active class on each tab
        const navItems = document.querySelectorAll('.top-text-nav .top-nav-item');
        navItems.forEach(item => {
            item.classList.toggle('active', item.dataset.section === section);
        });
        // Show or hide hero and category navigation depending on section
        const heroWrapper = document.getElementById('home-hero-wrapper');
        const categoryNav = document.getElementById('category-nav');
        const secondaryNav = document.getElementById('secondary-top-nav');
        const gridWrapper = document.getElementById('main-grid-wrapper');
        const sportsWrapper = document.getElementById('sports-category-wrapper');
        const sectionHeading = document.getElementById('main-section-heading');
        if (sectionHeading) {
            const headingMap = {
                home: 'Featured',
                series: 'Series',
                movies: 'Movies',
                snd: 'SND Originals',
                sports: 'Sports Highlights',
                challenges: 'Challenges'
            };
            sectionHeading.textContent = headingMap[section] || headingMap.home;
        }
        if (section === 'home') {
            heroWrapper?.classList.remove('hidden');
            categoryNav?.classList.remove('hidden');
            secondaryNav?.classList.add('hidden');
            gridWrapper?.classList.add('-mt-4');
            gridWrapper?.classList.remove('mt-6');
            sportsWrapper?.classList.add('hidden');
            // Rebuild categories to ensure the selected year/trending remains in sync
            populateCategories();
        } else {
            heroWrapper?.classList.add('hidden');
            categoryNav?.classList.add('hidden');
            secondaryNav?.classList.remove('hidden');
            gridWrapper?.classList.remove('-mt-4');
            gridWrapper?.classList.add('mt-6');
            if (section === 'sports') {
                if (previousSection !== 'sports') {
                    selectedSportsCategory = 'all';
                }
                sportsWrapper?.classList.remove('hidden');
                ensureSportsCategoriesRendered();
                updateSportsCategoryCards();
            } else {
                sportsWrapper?.classList.add('hidden');
            }
        }
        if (section === 'sports' && sectionHeading) {
            const activeCategory = selectedSportsCategory === 'all'
                ? null
                : SPORTS_CATEGORIES.find(cat => cat.id === selectedSportsCategory);
            sectionHeading.textContent = activeCategory ? `${activeCategory.label} Highlights` : 'Sports Highlights';
        }
        const moviesGrid = document.getElementById('movies-grid');
        if (!moviesGrid) return;
        const show18Plus = JSON.parse(localStorage.getItem('soundora-show18plus')) || false;
        let baseMovies = show18Plus ? movies : movies.filter(m => !m.is18Plus);
        let filtered = [];
        switch (section) {
            case 'home':
                // Show everything except sports and challenge categories
                filtered = baseMovies.filter(m => {
                    const genre = String(m.genre || '').toLowerCase();
                    return !(genre.includes('sport') || genre.includes('challenge'));
                });
                break;
            case 'series':
                filtered = baseMovies.filter(m => String(m.type || '').toLowerCase() === 'series');
                break;
            case 'movies':
                filtered = baseMovies.filter(m => String(m.type || '').toLowerCase() !== 'series');
                break;
            case 'snd':
                filtered = baseMovies.filter(m => {
                    const genre = String(m.genre || '').toLowerCase();
                    const studio = String(m.studio || '').toLowerCase();
                    return genre.includes('snd') || studio.includes('snd');
                });
                break;
            case 'sports':
                filtered = filterSportsMovies(baseMovies, selectedSportsCategory);
                break;
            case 'challenges':
                filtered = baseMovies.filter(m => String(m.genre || '').toLowerCase().includes('challenge'));
                break;
            default:
                filtered = baseMovies;
        }
        // Apply language filter
        if (selectedLangFilter && selectedLangFilter !== 'all') {
            const sel = String(selectedLangFilter).toLowerCase();
            filtered = filtered.filter(m => {
                const langMatch = m.language && String(m.language).toLowerCase() === sel;
                const audioMatch = Array.isArray(m.audioLangs) && m.audioLangs.map(l => String(l).toLowerCase()).includes(sel);
                const subMatch = Array.isArray(m.subtitleLangs) && m.subtitleLangs.map(l => String(l).toLowerCase()).includes(sel);
                return langMatch || audioMatch || subMatch;
            });
        }
        moviesGrid.innerHTML = filtered.length > 0 ? filtered.map(createMovieCardHTML).join('') : `<p class="col-span-full text-center text-gray-400 mt-8" data-lang-key="noResults"></p>`;
        // Rebind click handler for the dynamically created cards
        window.handleMovieCardClick = (e) => {
            e.preventDefault();
            navigate({ page: 'movie-details', movieId: e.currentTarget.dataset.movieId });
        };
        setLanguage(currentLanguage);
    }

    /**
     * Listen for admin alerts stored in Firestore.  Administrators can
     * broadcast systemвЂ‘wide announcements via a document in the `config`
     * collection (e.g. doc id `adminAlerts`).  The document is expected
     * to have a field called `alerts` that is an array of objects with
     * `id`, `message` and `timestamp` properties.  Each new alert is
     * transformed into a notification of type "admin" and appended to
     * the notifications array.  The listener is only registered once
     * (via the `adminAlertsUnsub` guard) to avoid duplicate subscriptions.
     */
    function subscribeToAdminAlerts() {
        try {
            // If already subscribed, do not register again
            if (adminAlertsUnsub) return;
            const alertRef = doc(db, 'config', 'adminAlerts');
            adminAlertsUnsub = onSnapshot(alertRef, (docSnap) => {
                const data = docSnap.data();
                if (!data) return;
                const alerts = Array.isArray(data.alerts) ? data.alerts : [];
                alerts.forEach(alert => {
                    const alertId = alert.id || (alert.timestamp && typeof alert.timestamp.toMillis === 'function' ? alert.timestamp.toMillis() : String(alert.timestamp || ''));
                    // Prevent duplicates by checking existing admin notifications by alertId
                    if (!notifications.some(n => n.type === 'admin' && n.alertId === alertId)) {
                        notifications.push({
                            id: 'admin_' + alertId,
                            type: 'admin',
                            alertId: alertId,
                            content: alert.message,
                            timestamp: (alert.timestamp && typeof alert.timestamp.toDate === 'function') ? alert.timestamp.toDate().toISOString() : (alert.timestamp || new Date()).toString()
                        });
                    }
                });
                try {
                    localStorage.setItem('soundora-notifications', JSON.stringify(notifications));
                } catch (e) {
                    console.warn('Failed to persist notifications', e);
                }
                updateNotificationDot();
            });
        } catch (e) {
            console.warn('Failed to subscribe to admin alerts', e);
        }
    }

    function updateActiveNav(pageId) {
        document.querySelectorAll('.bottom-nav-link').forEach(link => link.classList.remove('active'));
        let selector;
        if (pageId === 'main') selector = '#home-link-bottom';
        else if (pageId === 'favorites') selector = '#favorites-link-bottom';
        else if (['profile', 'guest-profile', 'settings', 'edit-profile', 'language-settings', 'playback-settings', 'content-settings', 'privacy-policy', 'faq', 'login', 'register', 'premium'].includes(pageId)) selector = '#profile-link-bottom';
        if (selector) document.querySelector(selector)?.classList.add('active');
    }

    function showModal(contentHTML, onOpen = null) {
        modalOverlay.innerHTML = contentHTML;
        modalOverlay.classList.remove('hidden');
        modalOverlay.querySelector('.close-modal-btn')?.addEventListener('click', closeModal);
        modalOverlay.addEventListener('click', (e) => { if (e.target === modalOverlay) closeModal(); });
        setLanguage(currentLanguage);
        if (onOpen) onOpen();
    }

    function closeModal() {
        modalOverlay.classList.add('hidden');
        modalOverlay.innerHTML = '';
    }

    function renderRegionSettingsPage() {
        const saved = localStorage.getItem('soundora-region') || 'kz';
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold">Payment Region</h1>
                </div>
                <div class="bg-gray-800/50 rounded-lg p-5 space-y-4">
                    <label for="region-select-setting" class="block text-sm font-medium text-gray-400 mb-2">Select Region</label>
                    <select id="region-select-setting" class="w-full bg-gray-700 border border-gray-600 rounded-lg p-3 focus:border-red-500 focus:ring-red-500">
                        <option value="ru" ${saved === 'ru' ? 'selected' : ''}>Russia</option>
                        <option value="kz" ${saved === 'kz' ? 'selected' : ''}>Kazakhstan</option>
                        <option value="uz" ${saved === 'uz' ? 'selected' : ''}>Uzbekistan</option>
                        <option value="kg" ${saved === 'kg' ? 'selected' : ''}>Kyrgyzstan</option>
                        <option value="tj" ${saved === 'tj' ? 'selected' : ''}>Tajikistan</option>
                        <option value="tm" ${saved === 'tm' ? 'selected' : ''}>Turkmenistan</option>
                    </select>
                    <button id="save-region-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg w-full">Save</button>
                </div>
            </div>`;
    }

    function showPremiumRequiredModal() {
        const content = `
            <div class="relative bg-gray-900 rounded-lg p-6 text-center shadow-xl max-w-sm w-full">
                <button class="close-modal-btn absolute top-2 right-3 text-gray-500 hover:text-white text-3xl">&times;</button>
                <i class="fas fa-gem text-4xl text-amber-400 mb-4"></i>
                <h3 class="text-xl font-bold mb-2" data-lang-key="premiumRequiredTitle"></h3>
                <p class="text-gray-400 mb-6" data-lang-key="premiumRequiredText"></p>
                <button id="modal-go-premium-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">
                    <span data-lang-key="goToPremium"></span>
                </button>
            </div>`;
        showModal(content);
        document.getElementById('modal-go-premium-btn').addEventListener('click', () => {
            closeModal();
            navigate({ page: 'premium' });
        });
    }

    function showSearchModal() {
        const content = `
            <div class="relative bg-gray-900 rounded-lg w-11/12 max-w-lg shadow-xl">
                <button class="close-modal-btn absolute top-4 right-4 text-gray-500 hover:text-white text-2xl">&times;</button>
                <div class="p-6">
                    <div class="flex items-center border-b-2 border-red-500 pb-2 mb-6">
                        <i class="fas fa-search text-gray-500 mr-3"></i>
                        <input type="text" id="search-input" data-lang-key="searchPlaceholder" class="w-full bg-transparent text-white text-xl focus:outline-none">
                    </div>
                    <div id="search-results" class="max-h-[60vh] overflow-y-auto"></div>
                </div>
            </div>`;
        showModal(content, () => {
            const searchInput = document.getElementById('search-input');
            searchInput.addEventListener('input', debounce(handleSearchInput, 300));
            searchInput.focus();
        });
    }

    function handleSearchInput(e) {
        const query = e.target.value.trim().toLowerCase();
        const resultsEl = document.getElementById('search-results');
        if (!resultsEl) return;
        if (!query) {
            resultsEl.innerHTML = '';
            return;
        }
        const filteredMovies = movies.filter(m =>
            (m.title?.toLowerCase().includes(query)) ||
            (m.originalTitle?.toLowerCase().includes(query))
        );
        const uniqueIds = new Set();
        const uniqueMovies = filteredMovies.filter(movie => {
            if (uniqueIds.has(movie.id)) {
                return false;
            } else {
                uniqueIds.add(movie.id);
                return true;
            }
        });
        displaySearchResults(uniqueMovies, resultsEl);
    }

    function displaySearchResults(results, container) {
        if (results.length === 0) {
            container.innerHTML = `<p class="text-gray-400 text-center" data-lang-key="noResults"></p>`;
            setLanguage(currentLanguage);
            return;
        }
        container.innerHTML = results.map(movie => `
            <a href="#" class="search-result-item flex items-center p-3 hover:bg-gray-800 rounded-md transition-colors" data-movie-id="${movie.id}">
                <img src="${movie.poster}" onerror="this.onerror=null;this.src='https://placehold.co/150x225/ef4444/ffffff?text=Error';" alt="${movie.title}" class="w-16 h-24 object-cover rounded-md mr-4">
                <div><h3 class="text-white font-bold text-lg">${movie.title}</h3><p class="text-gray-400 text-sm">${movie.genre} - ${movie.year}</p></div>
            </a>`).join('');
        container.querySelectorAll('.search-result-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                closeModal();
                navigate({ page: 'movie-details', movieId: item.dataset.movieId });
            });
        });
    }

    function copyToClipboard(text) {
        navigator.clipboard?.writeText(text).catch(err => console.error(err));
    }

    function showToast(message, isError = false) {
        toastNotification.textContent = message;
        toastNotification.className = `toast-notification fixed bottom-20 left-1/2 -translate-x-1/2 text-white px-4 py-2 rounded-lg shadow-lg opacity-0 transform translate-y-4 ${isError ? 'bg-red-600' : 'bg-gray-800'}`;
        toastNotification.classList.remove('hidden');
        setTimeout(() => toastNotification.classList.remove('opacity-0', 'translate-y-4'), 10);
        setTimeout(() => {
            toastNotification.classList.add('opacity-0', 'translate-y-4');
            setTimeout(() => toastNotification.classList.add('hidden'), 3000);
        }, 3000);
    }

    function formatTime(time) {
        if (isNaN(time)) return "00:00";
        const mins = Math.floor(time / 60);
        const secs = Math.floor(time % 60);
        return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }

    function showMiniPlayer(state) {
        if (!activeVideoElement) return;
        miniPlayerState = { active: true, state: state };

        const movie = movies.find(m => m.id === String(state.movieId));
        miniPlayerContainer.innerHTML = `
            <div id="mini-player-video-wrapper" class="w-full h-full"></div>
            <div class="absolute inset-0 bg-black/20 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
                <button id="mini-player-expand" class="w-10 h-10 bg-black/50 text-white rounded-full flex items-center justify-center text-lg"><i class="fas fa-expand-arrows-alt"></i></button>
            </div>
            <button id="mini-player-close" class="absolute top-1 right-1 w-6 h-6 bg-black/50 text-white rounded-full flex items-center justify-center text-xs opacity-70 hover:opacity-100">&times;</button>
            <div class="absolute bottom-1 left-1 text-white text-xs font-bold bg-black/50 px-1 rounded truncate max-w-[90%]">${movie?.title || ''}</div>
        `;

        document.getElementById('mini-player-video-wrapper').appendChild(activeVideoElement);
        miniPlayerContainer.classList.remove('hidden');

        document.getElementById('mini-player-close').addEventListener('click', (e) => { e.stopPropagation(); hideMiniPlayer(true); });
        document.getElementById('mini-player-expand').addEventListener('click', (e) => { e.stopPropagation(); navigate(miniPlayerState.state); });

        makeDraggable(miniPlayerContainer);
    }

    function hideMiniPlayer(shouldStop = false) {
        if (shouldStop && activeVideoElement) {
            activeVideoElement.pause();
            activeVideoElement.src = '';
            activeVideoElement.remove();
            activeVideoElement = null;
        }
        miniPlayerState.active = false;
        miniPlayerContainer.classList.add('hidden');
        miniPlayerContainer.innerHTML = '';
    }

    function makeDraggable(elmnt) {
        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;

        const dragMouseDown = (e) => {
            if (e.target.closest('#mini-player-close') || e.target.closest('#mini-player-expand')) {
                return;
            }

            e = e || window.event;
            if (e.type === 'touchstart') {
                // e.preventDefault();
            }

            elmnt.classList.add('grabbing');

            pos3 = e.clientX || e.touches[0].clientX;
            pos4 = e.clientY || e.touches[0].clientY;

            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;

            document.ontouchend = closeDragElement;
            document.ontouchmove = elementDrag;
        };

        const elementDrag = (e) => {
            e = e || window.event;
            if (e.type === 'touchmove'){
                 e.preventDefault();
            }

            const clientX = e.clientX || e.touches[0].clientX;
            const clientY = e.clientY || e.touches[0].clientY;

            pos1 = pos3 - clientX;
            pos2 = pos4 - clientY;
            pos3 = clientX;
            pos4 = clientY;

            let newTop = elmnt.offsetTop - pos2;
            let newLeft = elmnt.offsetLeft - pos1;

            const screenWidth = window.innerWidth;
            const screenHeight = window.innerHeight;
            const elmntWidth = elmnt.offsetWidth;
            const elmntHeight = elmnt.offsetHeight;

            newTop = Math.max(0, newTop);
            newLeft = Math.max(0, newLeft);
            newTop = Math.min(screenHeight - elmntHeight, newTop);
            newLeft = Math.min(screenWidth - elmntWidth, newLeft);

            elmnt.style.top = newTop + "px";
            elmnt.style.left = newLeft + "px";
        };

        const closeDragElement = () => {
            elmnt.classList.remove('grabbing');
            document.onmouseup = null;
            document.onmousemove = null;
            document.ontouchend = null;
            document.ontouchmove = null;
        };

        elmnt.onmousedown = dragMouseDown;
        elmnt.ontouchstart = dragMouseDown;
    }

    function setupPlayerControls(state) {
        const playerPage = document.getElementById('player');
        const playerContainer = playerPage.querySelector('#player-container');
        const controls = playerPage.querySelector('.player-controls');
        const playerLoadingSpinner = playerPage.querySelector('#player-loading-spinner');

        if (activeVideoElement) {
            activeVideoElement.remove();
            activeVideoElement = null;
        }

        let video = null;
        let isVideoInitialized = false;
        let isNativeFullscreen = false;

        window.exitNativeFullscreen = () => {
            isNativeFullscreen = false;
            fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
        };

        const movie = movies.find(m => m.id === String(state.movieId));
        const episodeIndex = state.episodeIndex || 0;
        const sources = movie.type === 'series' && movie.episodes ? movie.episodes[episodeIndex].sources : movie.sources;
        const defaultQuality = '720p';

        const playPauseBtn = playerPage.querySelector('#play-pause-btn');
        const centerPlayBtn = playerPage.querySelector('#center-play-btn');
        const centerPauseBtn = playerPage.querySelector('#center-pause-btn');
        const seekBar = playerPage.querySelector('#seek-bar');
        const currentTimeEl = playerPage.querySelector('#current-time');
        const totalTimeEl = playerPage.querySelector('#total-time');
        const volumeBtn = playerPage.querySelector('#volume-btn');
        const fullscreenBtn = playerPage.querySelector('#fullscreen-btn');
        const backBtn = playerPage.querySelector('#player-back-button');
        const rewindIndicator = playerPage.querySelector('#rewind-indicator');
        const forwardIndicator = playerPage.querySelector('#forward-indicator');
        const settingsBtn = playerPage.querySelector('#player-settings-btn');
        const settingsPanel = playerPage.querySelector('#player-settings-panel');

        // Cast tugmasi
        const castBtn = playerPage.querySelector('#cast-btn');

        let touchTimer = null;
        let lastTap = 0;
        let pressTimer = null;
        let originalPlaybackRate = 1.0;
        let startX = 0;
        let startY = 0;
        const speedIndicator = document.createElement('div');
        speedIndicator.className = 'speed-indicator';
        speedIndicator.textContent = '2x';
        playerContainer.appendChild(speedIndicator);

        // Initialize video playback. This implementation mirrors the behavior in the
        // original (films.html) version of the player. It simply assigns the
        // selected movie URL to the video element and does not attach any extra
        // error or CORS handling logic. This avoids false error messages when
        // closing the miniвЂ‘player or switching episodes.
        const initializeVideoPlayback = () => {
            if (isVideoInitialized) return;
            isVideoInitialized = true;

            playerLoadingSpinner.classList.remove('hidden');
            centerPlayBtn.classList.add('hidden');

            video = document.createElement('video');
            activeVideoElement = video;

            // Determine the best available source (fall back to any available quality).
            const movieUrl = sources[defaultQuality] || Object.values(sources).find(s => s);
            video.src = movieUrl;
            video.id = 'main-video';
            video.className = 'w-full h-full';
            video.style.objectFit = 'contain';
            video.autoplay = true;
            video.controls = false;
            // Ensure inline playback on mobile devices
            video.setAttribute('playsinline', '');

            // Append subtitle tracks if available
            if (movie.subtitles && typeof movie.subtitles === 'object') {
                Object.keys(movie.subtitles).forEach(lang => {
                    if (movie.subtitles[lang]) {
                        const track = document.createElement('track');
                        track.kind = 'subtitles';
                        track.label = lang.toUpperCase();
                        track.srclang = lang;
                        track.src = movie.subtitles[lang];
                        video.appendChild(track);
                    }
                });
            }

            // Insert the video into the player container (as the first element)
            playerContainer.prepend(video);

            // Restore the saved playback position, if any
            try {
                const savedTime = localStorage.getItem(`soundora-play-position-${movie.id}`);
                if (savedTime) {
                    video.currentTime = parseFloat(savedTime);
                }
            } catch (e) {
                // Ignore errors reading from localStorage
            }

            // Attach event listeners for playback state updates
            video.addEventListener('waiting', onWaiting);
            video.addEventListener('playing', onPlaying);
            video.addEventListener('play', onPlay);
            video.addEventListener('pause', onPause);
            video.addEventListener('timeupdate', onTimeUpdate);
            video.addEventListener('loadedmetadata', onLoadedMetadata);
            video.addEventListener('ended', onEnded);
            video.addEventListener('volumechange', onVolumeChange);

            // In some browsers autoplay may be restricted. If the video metadata
            // loads but playback does not automatically start, hide the loading
            // spinner and show the central play button so the user can start
            // playback manually. Without this, the spinner could remain
            // indefinitely, hiding the controls.
            video.addEventListener('loadedmetadata', () => {
                try {
                    if (video.paused) {
                        playerLoadingSpinner.classList.add('hidden');
                        centerPlayBtn.classList.remove('hidden');
                        centerPauseBtn.classList.add('hidden');
                    }
                } catch (err) {
                    console.error('Error handling loadedmetadata fallback', err);
                }
            });
        };

        const showIndicator = (indicator) => {
            indicator.classList.add('show');
            setTimeout(() => indicator.classList.remove('show'), 600);
        };

        const togglePlay = () => {
            if (!isVideoInitialized) {
                initializeVideoPlayback();
            } else if (video) {
                if (video.paused) {
                    video.play();
                } else {
                    video.pause();
                }
            }
        };

        const showControls = () => {
            controls.classList.add('visible');
            clearTimeout(playerControlTimeout);
            if (video && !video.paused) {
                playerControlTimeout = setTimeout(() => {
                    // Only hide controls if the settings panel is not open; do not forcibly close the settings panel here
                    if (!settingsPanel.classList.contains('open')) {
                        controls.classList.remove('visible');
                    }
                }, 4000);
            }
        };

        const onPlay = () => {
            playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
            if (playerLoadingSpinner.classList.contains('hidden')) {
                centerPlayBtn.classList.add('hidden');
                centerPauseBtn.classList.remove('hidden');
            }
            showControls();
        };
        const onPause = () => {
            playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
            if (playerLoadingSpinner.classList.contains('hidden')) {
                centerPlayBtn.classList.remove('hidden');
            }
            centerPauseBtn.classList.add('hidden');
            showControls();
        };
        const onTimeUpdate = () => {
            if (!video) return;
            seekBar.value = video.currentTime;
            currentTimeEl.textContent = formatTime(video.currentTime);
            if (Math.round(video.currentTime) % 5 === 0) {
                localStorage.setItem(`soundora-play-position-${movie.id}`, video.currentTime);
            }
        };
        const onLoadedMetadata = () => {
            if (!video) return;
            seekBar.max = video.duration;
            totalTimeEl.textContent = formatTime(video.duration);
        };
        const onEnded = () => {
            if(movie.type === 'series' && episodeIndex < movie.episodes.length - 1) {
                navigate({ page: 'player', movieId: movie.id, episodeIndex: episodeIndex + 1 });
            }
        };
        const onVolumeChange = () => {
            if (!video) return;
            volumeBtn.innerHTML = `<i class="fas ${video.muted || video.volume === 0 ? 'fa-volume-mute' : 'fa-volume-up'}"></i>`;
        };

        const onWaiting = () => {
            playerLoadingSpinner.classList.remove('hidden');
            centerPlayBtn.classList.add('hidden');
            centerPauseBtn.classList.add('hidden');
        };
        const onPlaying = () => {
            playerLoadingSpinner.classList.add('hidden');
            if (video && !video.paused) {
                centerPlayBtn.classList.add('hidden');
                centerPauseBtn.classList.remove('hidden');
            }
        };

        const handleTouchStart = (e) => {
            if (e.target.closest('button') || e.target.closest('input[type="range"]')) {
                return;
            }

            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;

            const currentTime = new Date().getTime();
            const tapLength = currentTime - lastTap;
            clearTimeout(touchTimer);

            if (tapLength < 300 && tapLength > 0) {
                e.preventDefault();
                if (!isVideoInitialized) return;

                const rect = playerContainer.getBoundingClientRect();
                const tapX = e.touches[0].clientX - rect.left;

                if (tapX < rect.width / 3) {
                    video.currentTime -= 10;
                    showIndicator(rewindIndicator);
                } else if (tapX > rect.width * 2 / 3) {
                    video.currentTime += 10;
                    showIndicator(forwardIndicator);
                } else {
                    togglePlay();
                }
                lastTap = 0;
            } else {
                pressTimer = setTimeout(() => {
                    if (!video) return;
                    originalPlaybackRate = video.playbackRate;
                    video.playbackRate = 2.0;
                    speedIndicator.style.opacity = '1';
                }, 400);
                lastTap = currentTime;
            }
        };

        const handleTouchEnd = (e) => {
            clearTimeout(pressTimer);
            if (video && video.playbackRate === 2.0) {
                video.playbackRate = originalPlaybackRate;
            }
            speedIndicator.style.opacity = '0';

            const currentTime = new Date().getTime();
            const tapLength = currentTime - lastTap;
            if (tapLength < 300 && tapLength > 0 && !e.target.closest('button') && !e.target.closest('input[type="range"]')) {
                 touchTimer = setTimeout(() => {
                    if (settingsPanel.classList.contains('open')) {
                        settingsPanel.classList.remove('open');
                    } else {
                        controls.classList.toggle('visible');
                    }
                    if (controls.classList.contains('visible') && video && !video.paused) {
                        showControls();
                    } else {
                        clearTimeout(playerControlTimeout);
                    }
                 }, 300);
            }
        };

        const handleTouchMove = (e) => {
            const moveX = Math.abs(e.touches[0].clientX - startX);
            const moveY = Math.abs(e.touches[0].clientY - startY);
            if (moveX > 10 || moveY > 10) {
                clearTimeout(pressTimer);
                clearTimeout(touchTimer);
                lastTap = 0;
                if (video && video.playbackRate === 2.0) {
                    video.playbackRate = originalPlaybackRate;
                }
                speedIndicator.style.opacity = '0';
            }
        };

        playerContainer.addEventListener('touchstart', handleTouchStart);
        playerContainer.addEventListener('touchend', handleTouchEnd);
        playerContainer.addEventListener('touchmove', handleTouchMove);

        playerContainer.addEventListener('click', (e) => {
            if ('ontouchstart' in document.documentElement) return;
            if (e.target.closest('button') || e.target.closest('input[type="range"]')) return;
            if (settingsPanel.classList.contains('open')) {
                settingsPanel.classList.remove('open');
            } else {
                controls.classList.toggle('visible');
            }
            showControls();
        });

        playPauseBtn.addEventListener('click', (e) => { e.stopPropagation(); togglePlay(); });
        centerPlayBtn.addEventListener('click', (e) => { e.stopPropagation(); togglePlay(); });
        centerPauseBtn.addEventListener('click', (e) => { e.stopPropagation(); togglePlay(); });

        seekBar.addEventListener('input', (e) => {
            e.stopPropagation();
            if (video) video.currentTime = seekBar.value;
        });
        volumeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (video) video.muted = !video.muted;
        });

        fullscreenBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (window.Android && typeof window.Android.toggleFullscreen === 'function') {
                isNativeFullscreen = !isNativeFullscreen;
                window.Android.toggleFullscreen(isNativeFullscreen);
                fullscreenBtn.innerHTML = isNativeFullscreen ? '<i class="fas fa-compress"></i>' : '<i class="fas fa-expand"></i>';
                // Ensure video continues playing when toggling fullscreen on Android
                if (video && video.paused) {
                    video.play().catch(() => {});
                }
            } else {
                // On non-Android platforms, request fullscreen on the player container rather than the video itself.
                // Using the player container preserves custom controls and overlays instead of triggering the
                // browser's native video controls.
                const playerEl = document.getElementById('player-container');
                if (!document.fullscreenElement) {
                    playerEl.requestFullscreen().catch(err => console.error(err));
                } else {
                    document.exitFullscreen();
                }
                // Ensure the video continues playing after entering/exiting fullscreen
                if (video && video.paused) {
                    video.play().catch(() => {});
                }
            }
        });

        document.addEventListener('fullscreenchange', () => {
            if (!window.Android) {
                if (document.fullscreenElement) {
                    fullscreenBtn.innerHTML = '<i class="fas fa-compress"></i>';
                } else {
                    fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
                }
            }
        });

        backBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            try {
                // Mark that we are returning from the player page to allow auto-resume on movie card
                sessionStorage.setItem('returnFromPlayer', 'true');
            } catch (err) {}
            history.back();
        });

        const mainSettings = settingsPanel.querySelector('#settings-main-view');
        const qualitySettings = settingsPanel.querySelector('#settings-quality-view');
        const speedSettings = settingsPanel.querySelector('#settings-speed-view');
        const subtitlesSettings = settingsPanel.querySelector('#settings-subtitles-view');
        const moreSettings = settingsPanel.querySelector('#settings-more-view');

        const showSettingsView = (viewToShow) => {
            // Har bir sozlamalar paneli yashiriladi, shu jumladan audio sozlamalar ko'rinishi
            [mainSettings, qualitySettings, speedSettings, audioSettings, subtitlesSettings, moreSettings].forEach(v => v.classList.add('hidden'));
            viewToShow.classList.remove('hidden');
        };

        settingsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            settingsPanel.classList.toggle('open');
            showSettingsView(mainSettings);
            showControls();
        });

        // Prevent clicks inside the settings panel from bubbling up to the playerContainer. Without this, clicking a sub-setting
        // (like quality, speed, audio or subtitles) would bubble to the playerContainer click handler and close the panel
        // immediately. By stopping propagation here, we ensure the user can interact with the settings submenus without
        // accidentally hiding the entire panel.
        settingsPanel.addEventListener('click', (e) => {
            e.stopPropagation();
        });
        // On touch devices, also stop touch events from propagating out of the settings panel (prevents panel from closing on mobile)
        settingsPanel.addEventListener('touchstart', (e) => { e.stopPropagation(); });
        settingsPanel.addEventListener('touchend', (e) => { e.stopPropagation(); });

        const currentQualityLabel = settingsPanel.querySelector('#current-quality-label');
        currentQualityLabel.textContent = defaultQuality;
        settingsPanel.querySelector('#quality-settings-btn').addEventListener('click', () => {
            const qualities = Object.keys(sources).filter(q => sources[q]);
            qualitySettings.innerHTML = `
                <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                    <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                    <h3 class="font-bold text-lg" data-lang-key="quality"></h3>
                </div>
                <div class="flex-grow overflow-y-auto">
                ${qualities.map(q => `<div class="settings-item quality-option ${q === currentQualityLabel.textContent ? 'active' : ''}" data-quality="${q}"><span>${q}</span><i class="fas fa-check ${q === currentQualityLabel.textContent ? '' : 'text-transparent'}"></i></div>`).join('')}
                </div>
            `;
            setLanguage(currentLanguage);
            qualitySettings.querySelector('.back-to-main-settings').addEventListener('click', () => showSettingsView(mainSettings));
            qualitySettings.querySelectorAll('.quality-option').forEach(opt => {
                opt.addEventListener('click', () => {
                    if (!video) return;
                    const newQuality = opt.dataset.quality;
                    const currentTime = video.currentTime;
                        // Yangilangan manba URLsi
                        const newSrc = sources[newQuality];
                        // HLS oqimi uchun sifatni qo'lda o'zgartirishni qo'llab-quvvatlamaymiz, faqat MP4/DASH uchun
                        if (newSrc) {
                            video.src = newSrc;
                            window.currentVideoUrl = newSrc;
                            video.currentTime = currentTime;
                            video.play().catch(() => {});
                            currentQualityLabel.textContent = newQuality;
                        }
                        // Do not close the entire settings panel immediately upon selecting a quality; instead return to the main
                        // settings view to allow further changes. If you still wish to close the panel, you can tap outside.
                        showSettingsView(mainSettings);
                });
            });
            showSettingsView(qualitySettings);
        });

        const currentSpeedLabel = settingsPanel.querySelector('#current-speed-label');
        // Audio settings: label element and view container. This will display the currently selected audio language.
        const currentAudioLabel = settingsPanel.querySelector('#current-audio-label');
        const audioSettings = settingsPanel.querySelector('#settings-audio-view');
        // Initialize default audio label
        if (currentAudioLabel) {
            currentAudioLabel.textContent = 'Auto';
        }
        settingsPanel.querySelector('#speed-settings-btn').addEventListener('click', () => {
            const speeds = [0.5, 0.75, 1, 1.5, 2];
            const currentRate = video ? video.playbackRate : 1;
            speedSettings.innerHTML = `
                <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                    <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                    <h3 class="font-bold text-lg" data-lang-key="playbackSpeed"></h3>
                </div>
                <div class="flex-grow overflow-y-auto">
                ${speeds.map(s => `<div class="settings-item speed-option ${s === currentRate ? 'active' : ''}" data-speed="${s}"><span>${s === 1 ? `${s}x (${translations[currentLanguage].normalSpeed})` : `${s}x`}</span><i class="fas fa-check ${s === currentRate ? '' : 'text-transparent'}"></i></div>`).join('')}
                </div>
            `;
            setLanguage(currentLanguage);
            speedSettings.querySelector('.back-to-main-settings').addEventListener('click', () => showSettingsView(mainSettings));
            speedSettings.querySelectorAll('.speed-option').forEach(opt => {
                opt.addEventListener('click', () => {
                    if (!video) return;
                    const newSpeed = parseFloat(opt.dataset.speed);
                    video.playbackRate = newSpeed;
                    currentSpeedLabel.textContent = newSpeed === 1 ? translations[currentLanguage].normalSpeed : `${newSpeed}x`;
                    setLanguage(currentLanguage);
                    // Do not close the panel entirely; return to the main settings view so users can adjust more settings
                    showSettingsView(mainSettings);
                });
            });
            showSettingsView(speedSettings);
        });

        // Audio settings button handler
        const audioButton = settingsPanel.querySelector('#audio-settings-btn');
        if (audioButton) {
            audioButton.addEventListener('click', (ev) => {
                // Prevent bubbling to player container which would close the panel
                ev.stopPropagation();
                if (!video) return;
                // Determine available audio languages. Prefer movie.audioLangs if defined; otherwise parse from stored audio files; lastly fall back to video.audioTracks.
                let audioLangs = [];
                // 1. Use explicitly defined audioLangs on the movie document
                if (Array.isArray(movie.audioLangs) && movie.audioLangs.length > 0) {
                    audioLangs = movie.audioLangs;
                }
                // 2. If no audioLangs defined, attempt to infer languages from audioFiles names (e.g. "en.mp3" -> "en")
                if (audioLangs.length === 0 && Array.isArray(movie.audioFiles) && movie.audioFiles.length > 0) {
                    audioLangs = movie.audioFiles.map(f => {
                        const name = f.split('/').pop();
                        const base = name.split('.')[0];
                        return base.toLowerCase();
                    });
                }
                // 3. Fallback to audioTracks API
                if (audioLangs.length === 0 && video && video.audioTracks && video.audioTracks.length > 0) {
                    audioLangs = Array.from(video.audioTracks).map(at => at.language || at.label || '').filter(Boolean);
                }
                // Remove duplicates and falsy values
                audioLangs = Array.from(new Set(audioLangs.filter(Boolean)));
                // Always include a default/auto option
                const options = ['default', ...audioLangs];
                // Build options HTML
                const optionsHTML = options.map(lang => {
                    const isActive = (currentAudioLabel && ((currentAudioLabel.textContent || '').toLowerCase() === lang.toLowerCase() || (lang === 'default' && currentAudioLabel.textContent === 'Auto')));
                    const label = (lang === 'default') ? 'Auto' : lang.toUpperCase();
                    return `<div class="settings-item audio-option ${isActive ? 'active' : ''}" data-lang="${lang}"><span>${label}</span><i class="fas fa-check ${isActive ? '' : 'text-transparent'}"></i></div>`;
                }).join('');
                audioSettings.innerHTML = `
                    <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                        <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                        <h3 class="font-bold text-lg">Audio</h3>
                    </div>
                    <div class="flex-grow overflow-y-auto">${optionsHTML}</div>
                `;
                // Back button returns to main view without closing the panel
                audioSettings.querySelector('.back-to-main-settings').addEventListener('click', (evt) => { evt.stopPropagation(); showSettingsView(mainSettings); });
                // Set click events for each audio option
                audioSettings.querySelectorAll('.audio-option').forEach(opt => {
                    opt.addEventListener('click', (e2) => {
                        e2.stopPropagation();
                        const selected = opt.dataset.lang;
                        // Update video audio tracks if supported
                        if (video && video.audioTracks && video.audioTracks.length > 0) {
                            Array.from(video.audioTracks).forEach(track => {
                                if (selected === 'default') {
                                    track.enabled = false;
                                } else {
                                    track.enabled = (track.language || track.label || '').toLowerCase() === selected.toLowerCase();
                                }
                            });
                        }
                        // Update label
                        if (currentAudioLabel) {
                            currentAudioLabel.textContent = (selected === 'default') ? 'Auto' : selected.toUpperCase();
                        }
                        // Return to main settings instead of closing panel completely
                        showSettingsView(mainSettings);
                    });
                });
                showSettingsView(audioSettings);
            });
        }

        const currentSubtitleLabel = settingsPanel.querySelector('#current-subtitle-label');
        settingsPanel.querySelector('#subtitles-settings-btn').addEventListener('click', () => {
            // When opening subtitle settings, prevent event from bubbling to the player container
            if (!video) return;
            // Determine available subtitle languages. Prefer explicit movie.subtitleLangs; otherwise parse from subtitleFiles names; lastly, fallback to video.textTracks.
            let subtitleLangs = [];
            if (Array.isArray(movie.subtitleLangs) && movie.subtitleLangs.length > 0) {
                subtitleLangs = movie.subtitleLangs;
            }
            // If no explicit subtitleLangs, infer from subtitleFiles names (e.g. "ru.vtt" -> "ru")
            if (subtitleLangs.length === 0 && Array.isArray(movie.subtitleFiles) && movie.subtitleFiles.length > 0) {
                subtitleLangs = movie.subtitleFiles.map(f => {
                    const name = f.split('/').pop();
                    const base = name.split('.')[0];
                    return base.toLowerCase();
                });
            }
            // If still none, use available text tracks on the video element
            const tracks = Array.from(video.textTracks);
            if (subtitleLangs.length === 0 && tracks.length > 0) {
                subtitleLangs = tracks.map(t => t.language || '').filter(Boolean);
            }
            // Build track info from the video element, but we also need labels to show in UI. We'll map languages to track objects if available.
            let trackOptions = [];
            if (tracks.length > 0) {
                trackOptions = tracks.map(track => ({ lang: track.language, label: track.label || track.language }));
            }
            // Remove duplicates
            subtitleLangs = Array.from(new Set(subtitleLangs.filter(Boolean)));
            // Determine currently active subtitle
            let activeTrackLang = 'off';
            tracks.forEach(track => { if (track.mode === 'showing') activeTrackLang = track.language; });
            // Build options: start with 'off'
            let optionsHTML = `<div class="settings-item subtitle-option ${activeTrackLang === 'off' ? 'active' : ''}" data-lang="off"><span>${translations[currentLanguage].noSubtitles}</span><i class="fas fa-check ${activeTrackLang === 'off' ? '' : 'text-transparent'}"></i></div>`;
            // For each subtitleLang, find a matching track label if available, otherwise just uppercase the language
            subtitleLangs.forEach(lang => {
                const matchingTrack = trackOptions.find(t => (t.lang || '').toLowerCase() === lang.toLowerCase());
                const label = matchingTrack ? matchingTrack.label : lang.toUpperCase();
                const isActive = lang.toLowerCase() === activeTrackLang.toLowerCase();
                optionsHTML += `<div class="settings-item subtitle-option ${isActive ? 'active' : ''}" data-lang="${lang}"><span>${label}</span><i class="fas fa-check ${isActive ? '' : 'text-transparent'}"></i></div>`;
            });
            subtitlesSettings.innerHTML = `
                <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                    <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                    <h3 class="font-bold text-lg" data-lang-key="subtitles"></h3>
                </div>
                <div class="flex-grow overflow-y-auto">${optionsHTML}</div>
            `;
            setLanguage(currentLanguage);
            // Back button returns to main settings instead of closing the panel
            subtitlesSettings.querySelector('.back-to-main-settings').addEventListener('click', (evt) => { evt.stopPropagation(); showSettingsView(mainSettings); });
            subtitlesSettings.querySelectorAll('.subtitle-option').forEach(opt => {
                opt.addEventListener('click', (e2) => {
                    e2.stopPropagation();
                    const selectedLang = opt.dataset.lang;
                    // Update text track visibility
                    Array.from(video.textTracks).forEach(track => {
                        track.mode = (selectedLang !== 'off' && track.language && track.language.toLowerCase() === selectedLang.toLowerCase()) ? 'showing' : 'hidden';
                    });
                    currentSubtitleLabel.textContent = selectedLang === 'off' ? translations[currentLanguage].noSubtitles : selectedLang.toUpperCase();
                    setLanguage(currentLanguage);
                    // Return to main settings instead of closing the panel
                    showSettingsView(mainSettings);
                });
            });
            showSettingsView(subtitlesSettings);
        });

        settingsPanel.querySelector('#more-settings-btn').addEventListener('click', () => {
            moreSettings.innerHTML = `
                <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                    <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                    <h3 class="font-bold text-lg" data-lang-key="more"></h3>
                </div>
                <div class="flex-grow overflow-y-auto">
                    <div class="settings-item">
                        <span data-lang-key="loopVideo"></span>
                        <div class="relative inline-block w-12 mr-2 align-middle select-none transition duration-200 ease-in">
                            <input type="checkbox" id="loop-toggle" class="toggle-checkbox absolute block w-7 h-7 rounded-full bg-white border-4 appearance-none cursor-pointer" ${video && video.loop ? 'checked' : ''}/>
                            <label for="loop-toggle" class="toggle-label block overflow-hidden h-7 rounded-full bg-gray-600 cursor-pointer"></label>
                        </div>
                    </div>
                </div>
            `;
            setLanguage(currentLanguage);
            moreSettings.querySelector('.back-to-main-settings').addEventListener('click', () => showSettingsView(mainSettings));
            moreSettings.querySelector('#loop-toggle').addEventListener('change', (e) => {
                if (video) video.loop = e.target.checked;
            });
            showSettingsView(moreSettings);
        });

        const closeEpisodesBtn = playerPage.querySelector('#close-episodes-btn');
        const toggleEpisodesBtn = playerPage.querySelector('#toggle-episodes-btn');
        const episodeListPanel = playerPage.querySelector('#episode-list-panel');

        if (toggleEpisodesBtn) {
            toggleEpisodesBtn.addEventListener('click', e => {
                e.stopPropagation();
                episodeListPanel.classList.toggle('translate-x-full');
            });
        }
        if (closeEpisodesBtn) {
            closeEpisodesBtn.addEventListener('click', e => {
                e.stopPropagation();
                episodeListPanel.classList.add('translate-x-full');
            });
        }

        playerPage.querySelectorAll('.episode-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.stopPropagation();
                const movieId = e.currentTarget.dataset.movieId;
                const episodeIndex = parseInt(e.currentTarget.dataset.episodeIndex, 10);
                navigate({ page: 'player', movieId, episodeIndex });
            });
        });

        // Chromecast tugmasi: foydalanuvchi bosganda video TV-ga uzatiladi
        if (castBtn && window.cast && cast.framework) {
            castBtn.addEventListener('click', async (e) => {
                e.stopPropagation();
                try {
                    const castContext = cast.framework.CastContext.getInstance();
                    let session = castContext.getCurrentSession();
                    if (!session) {
                        session = await castContext.requestSession();
                    }
                    if (session && window.currentVideoUrl) {
                        const mimeType = (movie.streamType === 'hls') ? 'application/x-mpegurl' : 'video/mp4';
                        const mediaInfo = new chrome.cast.media.MediaInfo(window.currentVideoUrl, mimeType);
                        mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();
                        mediaInfo.metadata.title = movie.title;
                        const request = new chrome.cast.media.LoadRequest(mediaInfo);
                        await session.loadMedia(request);
                    }
                } catch (err) {
                    console.error('Cast load error', err);
                }
            });
        }

        initializeVideoPlayback();
        showControls();
    }

    let unsubMovies = null;
    let unsubUser = null;
    let unsubNotifications = null;

    async function createUserData(user, extraData = {}) {
        const userRef = doc(db, "users", user.uid);
        const userDoc = await getDoc(userRef);
        if (userDoc.exists()) return userDoc.data();

        const counterRef = doc(db, "counters", "userCounter");
        let newCount;
        try {
            await runTransaction(db, async (transaction) => {
                const counterDoc = await transaction.get(counterRef);
                const currentCount = counterDoc.exists() ? counterDoc.data().count : 1000;
                newCount = currentCount + 1;
                transaction.set(counterRef, { count: newCount }, { merge: true });
            });
        } catch (e) {
            console.error("Transaction failed: ", e);
            newCount = Math.floor(1000 + Math.random() * 9000);
        }
        const customId = `A-${String(newCount).padStart(4, '0')}`;

        const newUser = {
            uid: user.uid,
            email: user.email || null,
            phoneNumber: user.phoneNumber || null,
            displayName: extraData.name || user.displayName || user.phoneNumber || user.email?.split('@')[0],
            photoURL: user.photoURL || '',
            createdAt: serverTimestamp(),
            favorites: [],
            isPremium: false,
            role: 'user',
            customId: customId,
            dob: extraData.dob || null,
            secretWord: extraData.secretWord || null,
            devices: []
        };
        await setDoc(userRef, newUser);
        return newUser;
    }

    function initFirebaseAndLoadContent() {
        let isInitialAuthCheckDone = false;

        onAuthStateChanged(auth, async (user) => {
            /*__BOOTSTRAP_INIT_DONE__*/
            if (!isInitialAuthCheckDone) {
                isInitialAuthCheckDone = true;
                // Render current page (or main) immediately; Firestore will hydrate after.
                const initialState = history.state || { page: 'main' };
                try { processNavigation(initialState, !history.state); } catch (e) { try { renderPage(initialState); } catch(_){} }
            }

            if (unsubUser) unsubUser();
            if (user) {
                // Save signed-in account to localStorage for account switching
                try {
                    const accounts = JSON.parse(localStorage.getItem('soundora-accounts')) || [];
                    if (!accounts.some(acc => acc.uid === user.uid)) {
                        accounts.push({ uid: user.uid, displayName: user.displayName, email: user.email, phoneNumber: user.phoneNumber });
                        localStorage.setItem('soundora-accounts', JSON.stringify(accounts));
                    }
                } catch (e) {
                    console.error('Error storing account info', e);
                }
                // Foydalanuvchi ma'lumotlarini yaratish yoki olish
                try { localStorage.setItem('soundora-lastUid', user.uid); } catch(_){ }
// Set minimal currentUser immediately for fast profile render
currentUser = { uid: user.uid, email: user.email || null, displayName: user.displayName || (user.email ? user.email.split('@')[0] : (user.phoneNumber || '')) };
// Ensure user doc exists in the background (non-blocking)
createUserData(user).catch(err => console.warn('createUserData failed (non-blocking):', err));

                if (user.email) {
                    setupPushNotifications();
                }
                // Subscribe to admin announcements once the user is authenticated.  The
                // subscription will be set up only on the first invocation thanks to
                // the adminAlertsUnsub guard in subscribeToAdminAlerts().  Admin
                // announcements are delivered as notifications in the header bell.
                subscribeToAdminAlerts();
                // Listen for changes to the current user's document and update UI in real time.
                unsubUser = onSnapshot(doc(db, "users", user.uid), (userDoc) => {
                    currentUser = { uid: userDoc.id, ...userDoc.data() };
                    try { localStorage.setItem('soundora-user-cache-' + user.uid, JSON.stringify(currentUser)); } catch (_) {}

                    // Foydalanuvchining til filtri ma'lumotini hujjatdan o'qish va qo'llash. Agar mavjud bo'lsa,
                    // selectedLangFilter o'zgaruvchisini yangilaymiz va tugmani qayta chizamiz.
                    try {
                        const data = userDoc.data();
                        if (data && data.preferredMovieLang) {
                            selectedLangFilter = data.preferredMovieLang;
                            // UI yangilanishi
                            renderLanguageButton();
                            buildLanguageDropdown();
                            // Agar hozirgi sahifa asosiy bo'lsa, filmlar ro'yxatini qayta filtrlaymiz
                            if (currentHistoryState?.page === 'main') {
                                const activeCategoryButton = document.querySelector('#category-nav .category-btn.active');
                                const currentCategory = activeCategoryButton ? activeCategoryButton.dataset.categoryValue : 'categoryAll';
                                filterAndDisplayMovies(currentCategory);
                            }
                        }
                    } catch (err) {
                        console.error('Error retrieving preferred movie language', err);
                    }
                    // If initial auth check is done, re-render the current page. When on the profile
                    // page specifically, call renderProfilePage() directly to ensure the latest user
                    // information (like premium status or profile data) is reflected without
                    // navigating away and back. Otherwise fall back to renderPage with the
                    // current history state.
                    if (isInitialAuthCheckDone) {
                        if (currentHistoryState?.page === 'profile') {
                            renderProfilePage();
                        } else {
                            renderPage(currentHistoryState);
                        }
                    }
                });
            } else {
                currentUser = null;
                try { localStorage.removeItem('soundora-lastUid'); } catch(_) {}
                // Redirect guests to auth screen immediately
                window.location.replace('auth.html');
            }

            if (!isInitialAuthCheckDone) {
                isInitialAuthCheckDone = true;
                const initialHash = window.location.hash.substring(1);
                const stateFromHash = pageRenderers[initialHash] ? { page: initialHash, ...Object.fromEntries(new URLSearchParams(window.location.search)) } : { page: 'main' };
                processNavigation(history.state || stateFromHash, !history.state);
            } else {
                renderPage(currentHistoryState);
                if (currentHistoryState?.page === 'main' && movies.length > 0) {
                    populateCategories();
                    filterAndDisplayMovies('categoryAll');
                }
                 if (postLoginRedirect) {
                     const dest = { ...postLoginRedirect };
                     postLoginRedirect = null;
                     navigate(dest);
                 } else if (['login', 'register', 'guest-profile'].includes(currentHistoryState?.page)) {
                     navigate({ page: 'main' });
                 }
            }
        });

        unsubMovies = onSnapshot(collection(db, "movies"), (snapshot) => {
            const latestMovies = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            setMovies(latestMovies);
            try { localStorage.setItem('soundora-movies-cache', JSON.stringify(latestMovies)); } catch (_) {}
            if (isInitialAuthCheckDone) {
                renderPage(currentHistoryState);
                if (currentHistoryState?.page === 'main') {
                    populateCategories();
                    filterAndDisplayMovies('categoryAll');
                }
            }
        }, (error) => {
            console.error("Error fetching movies: ", error);
            const moviesGrid = document.getElementById('movies-grid');
            if(moviesGrid) {
                moviesGrid.innerHTML = `<p class="col-span-full text-center text-red-500 mt-8">Ma'lumotlarni yuklab bo'lmadi. Internet aloqasini tekshiring.</p>`;
            }
        });
    }

    // -- Modal helper functions for rating and account switching --
    let ratingMovieId = null;
    // Holds the current rating value selected in the modal
    let selectedRatingValue = 0;
    function setupRatingModal() {
        const modal = document.getElementById('rating-modal');
        const starsContainer = document.getElementById('rating-stars');
        const closeBtn = document.getElementById('rating-modal-close');
        const submitBtn = document.getElementById('rating-submit');
        // Build stars only once
        if (starsContainer && starsContainer.children.length === 0) {
            for (let i = 1; i <= 10; i++) {
                const star = document.createElement('i');
                star.className = 'fas fa-star text-2xl text-gray-500 cursor-pointer';
                star.dataset.value = i;
                star.addEventListener('click', () => updateRatingStars(i));
                starsContainer.appendChild(star);
            }
        }
        closeBtn?.addEventListener('click', () => {
            modal?.classList.add('hidden');
        });
        submitBtn?.addEventListener('click', () => {
            // Submit the rating and update the movie rating
            if (ratingMovieId && selectedRatingValue > 0) {
                submitRating(ratingMovieId, selectedRatingValue);
            }
            modal?.classList.add('hidden');
            // Show thank you message
            showToast(translations[currentLanguage]?.thankYouForRating || 'РЎРїР°СЃРёР±Рѕ Р·Р° РѕС†РµРЅРєСѓ!');
        });
    }
    function updateRatingStars(value) {
        selectedRatingValue = value;
        const stars = document.querySelectorAll('#rating-stars i');
        stars.forEach(star => {
            const starVal = parseInt(star.dataset.value);
            if (starVal <= value) {
                star.classList.add('text-yellow-400');
                star.classList.remove('text-gray-500');
            } else {
                star.classList.remove('text-yellow-400');
                star.classList.add('text-gray-500');
            }
        });
    }

    /**
     * Saves the rating for the given movie and updates the displayed SND rating.
     * Ratings are stored per user in localStorage under the key
     * `soundora-ratings` as an object mapping userIds to movie rating maps.
     * A user may only rate a movie once; subsequent ratings overwrite the previous one.
     * After saving, the average rating across all stored ratings is computed and
     * stored on the movie object under `sndRating`. The UI is updated to reflect
     * the new average immediately.
     *
     * @param {string|number} movieId The ID of the movie being rated
     * @param {number} value The rating value selected (1-10)
     */
    function submitRating(movieId, value) {
        if (!currentUser || !currentUser.uid) {
            showToast('Please log in to rate this movie.', true);
            return;
        }
        const userId = currentUser.uid;
        try {
            const key = 'soundora-ratings';
            let ratings = {};
            try {
                ratings = JSON.parse(localStorage.getItem(key)) || {};
            } catch (err) {
                ratings = {};
            }
            // Ensure user map exists
            if (!ratings[userId]) ratings[userId] = {};
            ratings[userId][String(movieId)] = value;
            localStorage.setItem(key, JSON.stringify(ratings));
            // Recalculate average rating for this movie across all users
            let total = 0;
            let count = 0;
            for (const uid in ratings) {
                if (ratings[uid][String(movieId)]) {
                    total += ratings[uid][String(movieId)];
                    count++;
                }
            }
            const avgNum = count > 0 ? total / count : 0;
            const avg = count > 0 ? avgNum.toFixed(1) : '0.0';
            // Update movie object with average and votes count
            const movie = movies.find(m => m.id === String(movieId));
            if (movie) {
                movie.sndRating = avg;
                movie.sndVotes = count;
            }
            // Update rating UI if present
            const valueEl = document.querySelector('#info-rating .rating-value');
            const votesEl = document.querySelector('#info-rating .rating-votes-count');
            if (valueEl) valueEl.textContent = avg;
            if (votesEl) votesEl.textContent = count;
            const bars = document.querySelectorAll('#info-rating .rating-bar-fill');
            bars.forEach(bar => {
                // Update data-final to new width and animate from 0 to final
                bar.dataset.final = `${avgNum * 10}`;
                bar.style.width = '0%';
                setTimeout(() => {
                    bar.style.width = `${avgNum * 10}%`;
                }, 10);
            });
        } catch (err) {
            console.error('Error saving rating', err);
        }
    }
    function openRatingModal(movieId) {
        ratingMovieId = movieId;
        setupRatingModal();
        const modal = document.getElementById('rating-modal');
        modal?.classList.remove('hidden');
    }
    function setupAccountSwitchModal() {
        const modal = document.getElementById('account-switch-modal');
        const closeBtn = document.getElementById('account-switch-close');
        const otherBtn = document.getElementById('account-switch-other');
        const shareBtn = document.getElementById('account-share-subscription');
        closeBtn?.addEventListener('click', () => modal?.classList.add('hidden'));
        otherBtn?.addEventListener('click', () => {
            modal?.classList.add('hidden');
            handleLogout();
        });
        // Show share subscription modal with promo codes instead of directly generating a code
        shareBtn?.addEventListener('click', (e) => {
            e.preventDefault();
            modal?.classList.add('hidden');
            openShareSubscriptionModal();
        });
    }
    function openAccountSwitchModal() {
        const modal = document.getElementById('account-switch-modal');
        const list = document.getElementById('account-list');
        if (!list) return;
        list.innerHTML = '';
        // Display accounts in a flexible grid of circles
        list.className = 'flex flex-wrap justify-center gap-6';
        const accounts = JSON.parse(localStorage.getItem('soundora-accounts')) || [];
        accounts.forEach(acc => {
            const wrapper = document.createElement('div');
            wrapper.className = 'flex flex-col items-center gap-2 cursor-pointer';
            const isActive = currentUser && currentUser.uid === acc.uid;
            const circle = document.createElement('div');
            circle.className = `w-20 h-20 rounded-full flex items-center justify-center text-white text-3xl font-bold bg-gray-700 ${isActive ? 'border-4 border-green-500' : 'border-2 border-gray-600'}`;
            const labelText = (acc.displayName || acc.email || acc.phoneNumber || 'U')[0];
            circle.textContent = labelText ? labelText.toUpperCase() : 'U';
            const nameLabel = document.createElement('span');
            nameLabel.className = 'text-sm text-center text-gray-300 w-24 truncate';
            nameLabel.textContent = acc.displayName || acc.email || acc.phoneNumber || 'User';
            wrapper.appendChild(circle);
            wrapper.appendChild(nameLabel);
            wrapper.addEventListener('click', async () => {
                // Save selected account ID
                localStorage.setItem('soundora-selected-account', acc.uid);
                // If we have stored credentials, sign into this account directly
                if (acc.email && acc.password) {
                    try {
                        await signOut(auth);
                    } catch (e) {
                        console.error('Error signing out before switching', e);
                    }
                    try {
                        await signInWithEmailAndPassword(auth, acc.email, acc.password);
                        // Hide modal after successful sign in
                        modal?.classList.add('hidden');
                        return;
                    } catch (e) {
                        console.error('Error signing in selected account', e);
                    }
                }
                // Fallback: just log out and go to login page
                handleLogout();
            });
            list.appendChild(wrapper);
        });
        // Add 'add profile' option
        const addProfileWrapper = document.createElement('div');
        addProfileWrapper.className = 'flex flex-col items-center gap-2 cursor-pointer';
        const addCircle = document.createElement('div');
        addCircle.className = 'w-20 h-20 rounded-full flex items-center justify-center text-white text-4xl font-bold bg-gray-600 border-2 border-gray-500';
        addCircle.textContent = '+';
        const addLabel = document.createElement('span');
        addLabel.className = 'text-sm text-center text-gray-300 w-24 truncate';
        addLabel.textContent = translations[currentLanguage]?.addProfile || 'Add profile';
        addProfileWrapper.appendChild(addCircle);
        addProfileWrapper.appendChild(addLabel);
        addProfileWrapper.addEventListener('click', () => {
            showToast(translations[currentLanguage]?.thankYouForRating || 'Coming soon', true);
        });
        list.appendChild(addProfileWrapper);
        // Add 'add kids' option
        const addKidsWrapper = document.createElement('div');
        addKidsWrapper.className = 'flex flex-col items-center gap-2 cursor-pointer';
        const kidsCircle = document.createElement('div');
        kidsCircle.className = 'w-20 h-20 rounded-full flex items-center justify-center text-white text-4xl font-bold bg-gray-600 border-2 border-gray-500';
        kidsCircle.textContent = '+';
        const kidsLabel = document.createElement('span');
        kidsLabel.className = 'text-sm text-center text-gray-300 w-24 truncate';
        kidsLabel.textContent = translations[currentLanguage]?.addKids || 'Add kids';
        addKidsWrapper.appendChild(kidsCircle);
        addKidsWrapper.appendChild(kidsLabel);
        addKidsWrapper.addEventListener('click', () => {
            showToast(translations[currentLanguage]?.thankYouForRating || 'Coming soon', true);
        });
        list.appendChild(addKidsWrapper);
        setupAccountSwitchModal();
        modal?.classList.remove('hidden');
    }

    // Open the share subscription modal which lists existing promo codes and allows generating new ones
    function openShareSubscriptionModal() {
        const modal = document.getElementById('share-modal');
        if (!modal || !currentUser) return;
        const listEl = modal.querySelector('#promo-codes-list');
        listEl.innerHTML = '';
        let allCodes = [];
        try {
            allCodes = JSON.parse(localStorage.getItem('soundora-promo-codes')) || [];
        } catch (e) {
            allCodes = [];
        }
        const userId = currentUser?.uid;
        const codes = allCodes.filter(c => c.userId === userId);
        if (codes.length === 0) {
            listEl.innerHTML = `<p class="text-gray-400" data-lang-key="noPromoCodes"></p>`;
        } else {
            codes.forEach((codeObj) => {
                const row = document.createElement('div');
                row.className = 'flex items-center justify-between bg-gray-800/50 p-3 rounded-lg';
                // Code label
                const label = document.createElement('span');
                label.className = 'text-white font-mono';
                label.textContent = codeObj.code;
                // Status badge
                const status = document.createElement('span');
                status.className = 'text-xs px-2 py-1 rounded-full ' + (codeObj.used ? 'bg-gray-700 text-gray-300' : 'bg-green-700 text-green-200');
                status.setAttribute('data-lang-key', codeObj.used ? 'codeUsed' : 'codeUnused');
                // Copy button
                const copyBtn = document.createElement('button');
                copyBtn.className = 'ml-3 px-2 py-1 bg-gray-700 hover:bg-gray-600 text-white text-xs rounded';
                copyBtn.setAttribute('data-lang-key', 'copy');
                copyBtn.addEventListener('click', () => {
                    copyToClipboard(codeObj.code);
                    showToast(translations[currentLanguage]?.promoCodeCopied || 'Promo code copied!');
                });
                row.appendChild(label);
                row.appendChild(status);
                row.appendChild(copyBtn);
                listEl.appendChild(row);
            });
        }
        const limit = currentUser && currentUser.isPremium ? 4 : 2;
        const unusedExists = codes.some(c => !c.used);
        const generateBtn = modal.querySelector('#generate-promo-btn');
        // Hide generate button if user has reached limit and still has unused codes
        if (codes.length >= limit && unusedExists) {
            generateBtn.style.display = 'none';
        } else {
            generateBtn.style.display = 'block';
        }
        generateBtn.onclick = () => {
            let codesAll = [];
            try {
                codesAll = JSON.parse(localStorage.getItem('soundora-promo-codes')) || [];
            } catch (e) {
                codesAll = [];
            }
            const userCodes = codesAll.filter(c => c.userId === userId);
            const unused = userCodes.find(c => !c.used);
            // If there is an unused code, simply copy it and show a toast
            if (unused) {
                copyToClipboard(unused.code);
                showToast(`Promo code ${unused.code} copied to clipboard!`);
                openShareSubscriptionModal();
                return;
            }
            if (userCodes.length >= limit) {
                showToast('Promo code limit reached.', true);
                return;
            }
            // Generate a unique new code
            const generateCode = () => Math.random().toString(36).substring(2, 10).toUpperCase();
            let newCode;
            do {
                newCode = generateCode();
            } while (codesAll.some(c => c.code === newCode));
            const now = Date.now();
            const expiresAt = now + 7 * 24 * 60 * 60 * 1000;
            const newCodeObj = { code: newCode, userId, createdAt: now, expiresAt, used: false };
            codesAll.push(newCodeObj);
            localStorage.setItem('soundora-promo-codes', JSON.stringify(codesAll));
            copyToClipboard(newCode);
            showToast(`Promo code ${newCode} copied to clipboard!`);
            openShareSubscriptionModal();
        };
        modal.classList.remove('hidden');
    }

    // Setup event listeners for the share modal (close action)
    function setupShareModal() {
        const modal = document.getElementById('share-modal');
        const closeBtn = document.getElementById('share-modal-close');
        closeBtn?.addEventListener('click', () => {
            modal?.classList.add('hidden');
        });
    }

    /**
     * Initialize series controls (seasons, ranges, episodes) for a given movie ID.
     * This will dynamically populate three rows of buttons: season numbers,
     * episode ranges (e.g., "1-10"), and individual episode numbers. When a range
     * or season is selected, the corresponding episodes are displayed. Clicking
     * an episode button will trigger playback via handlePlayClick.
     * This UI is shown only on mobile (via CSS classes) and for series with episodes.
     *
     * @param {string|number} movieId The movie ID to initialize controls for.
     */
    function initializeSeriesControls(movieId) {
        const movie = movies.find(m => m.id === String(movieId));
        if (!movie || !Array.isArray(movie.episodes) || movie.episodes.length === 0) return;
        const seasonRow = document.getElementById('season-row');
        const rangeRow = document.getElementById('range-row');
        const episodeRow = document.getElementById('episode-row');
        if (!seasonRow || !rangeRow || !episodeRow) return;
        // Clear any existing buttons
        seasonRow.innerHTML = '';
        rangeRow.innerHTML = '';
        episodeRow.innerHTML = '';
        const totalRanges = Math.ceil(movie.episodes.length / 10);
        // Populate season buttons (1,2,3,...)
        for (let i = 0; i < totalRanges; i++) {
            const btn = document.createElement('button');
            btn.className = 'season-btn px-3 py-2 rounded bg-gray-800 text-white hover:bg-red-600 transition-colors';
            btn.dataset.index = i;
            btn.textContent = String(i + 1);
            seasonRow.appendChild(btn);
        }
        // Populate range buttons (1-10,11-20,...)
        for (let i = 0; i < totalRanges; i++) {
            const start = i * 10 + 1;
            const end = Math.min((i + 1) * 10, movie.episodes.length);
            const btn = document.createElement('button');
            btn.className = 'range-btn px-3 py-2 rounded bg-gray-800 text-white hover:bg-red-600 transition-colors';
            btn.dataset.index = i;
            btn.textContent = `${start}-${end}`;
            rangeRow.appendChild(btn);
        }
        // Helper to render episodes for a selected range index
        function renderEpisodes(rangeIndex) {
            episodeRow.innerHTML = '';
            const startIdx = rangeIndex * 10;
            const endIdx = Math.min(startIdx + 10, movie.episodes.length);
            for (let i = startIdx; i < endIdx; i++) {
                const epBtn = document.createElement('button');
                epBtn.className = 'episode-btn flex-1 text-center px-3 py-2 rounded bg-gray-800 text-white hover:bg-red-600 transition-colors';
                epBtn.dataset.index = i;
                epBtn.textContent = String(i + 1);
                episodeRow.appendChild(epBtn);
            }
        }
        // Highlight the selected season and range buttons
        function highlightSelection(index) {
            seasonRow.querySelectorAll('.season-btn').forEach(btn => {
                const btnIdx = parseInt(btn.dataset.index);
                if (btnIdx === index) {
                    btn.classList.add('bg-red-600');
                    btn.classList.remove('bg-gray-800');
                } else {
                    btn.classList.remove('bg-red-600');
                    btn.classList.add('bg-gray-800');
                }
            });
            rangeRow.querySelectorAll('.range-btn').forEach(btn => {
                const btnIdx = parseInt(btn.dataset.index);
                if (btnIdx === index) {
                    btn.classList.add('bg-red-600');
                    btn.classList.remove('bg-gray-800');
                } else {
                    btn.classList.remove('bg-red-600');
                    btn.classList.add('bg-gray-800');
                }
            });
        }
        // Initial render of first range
        highlightSelection(0);
        renderEpisodes(0);
        // Event listeners for season and range row
        seasonRow.addEventListener('click', (e) => {
            const btn = e.target.closest('.season-btn');
            if (!btn) return;
            const idx = parseInt(btn.dataset.index);
            highlightSelection(idx);
            renderEpisodes(idx);
        });
        rangeRow.addEventListener('click', (e) => {
            const btn = e.target.closest('.range-btn');
            if (!btn) return;
            const idx = parseInt(btn.dataset.index);
            highlightSelection(idx);
            renderEpisodes(idx);
        });
        // Episode click: reuse handlePlayClick for playback
        episodeRow.addEventListener('click', (e) => {
            const btn = e.target.closest('.episode-btn');
            if (!btn) return;
            const epIndex = parseInt(btn.dataset.index);
            // Build a synthetic target to match handlePlayClick signature
            handlePlayClick({
                currentTarget: { dataset: { movieId: String(movieId), episodeIndex: epIndex } }
            });
        });
    }

    /**
     * Request a Google Cast session. If the Cast SDK is available, this will prompt
     * the user to choose a Cast-enabled device and start casting the current player.
     */
    function requestCastingSession() {
        try {
            if (window.cast && cast.framework) {
                const context = cast.framework.CastContext.getInstance();
                context.setOptions({ receiverApplicationId: window.SOUNDORA_CAST_APP_ID });
                context.requestSession().catch((error) => {
                    console.error('Cast session error', error);
                    showToast('РћС€РёР±РєР° РєР°СЃС‚РёРЅРіР°');
                });
            } else {
                showToast('Cast SDK РЅРµРґРѕСЃС‚СѓРїРµРЅ');
            }
        } catch (err) {
            console.error('Cast error', err);
            showToast('Cast SDK РЅРµРґРѕСЃС‚СѓРїРµРЅ');
        }
    }

    function initApp() {
        const savedLang = localStorage.getItem('soundora-lang') || 'ru';
        setLanguage(savedLang);
        // Initialize rating, account switch and share subscription modals
        setupRatingModal();
        setupAccountSwitchModal();
        setupShareModal();

        // Til filtri tugmasini va dropdownni dastlabki holatga o'rnatamiz.
        initLanguageFilter();

        initFirebaseAndLoadContent();

        document.getElementById('home-link-header').addEventListener('click', (e) => { e.preventDefault(); navigate({ page: 'main' }); });
        document.getElementById('notification-button-header').addEventListener('click', toggleNotificationPanel);
        document.getElementById('home-link-bottom').addEventListener('click', (e) => { e.preventDefault(); navigate({ page: 'main' }); });
        document.getElementById('favorites-link-bottom').addEventListener('click', (e) => { e.preventDefault(); navigate({ page: 'favorites' }); });
        document.getElementById('profile-link-bottom').addEventListener('click', (e) => {
            e.preventDefault();
            navigate({ page: 'profile' });
        });
        // Only attach search modal handler if the search button exists (some layouts remove it)
        const searchBtnNav = document.getElementById('search-button-bottom-nav');
        if (searchBtnNav) {
            searchBtnNav.addEventListener('click', showSearchModal);
        }

        window.addEventListener('popstate', (e) => {
            if (!modalOverlay.classList.contains('hidden')) {
                closeModal();
                history.pushState(currentHistoryState, '', `#${currentHistoryState.page}`);
                return;
            }

            const currentPage = currentHistoryState?.page;

            if (currentPage === 'main') {
                if (navigator.app && navigator.app.exitApp) {
                    navigator.app.exitApp();
                }
                return;
            }

            const topLevelSections = ['favorites', 'profile', 'guest-profile', 'premium'];
            if (topLevelSections.includes(currentPage)) {
                e.preventDefault();
                navigate({ page: 'main' });
                return;
            }

            const newState = e.state || { page: 'main' };
            processNavigation(newState, false);
        });

        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'hidden' && activeVideoElement && !activeVideoElement.paused && document.pictureInPictureEnabled && !activeVideoElement.disablePictureInPicture) {
                activeVideoElement.requestPictureInPicture().catch(error => {
                    console.error('PiP Error:', error);
                });
            }
        });
    }

    try {
        window.navigate = navigate;
    } catch (_) {}
    initApp();
});
</script>

<!-- Custom premium kassa logic -->
<script>
    /**
     * Premium purchase modal functionality adapted from the standalone kassa page.
     * Only Russia (ru) and Central Asia (ca) regions are supported.
     */
    (function() {
      // Define region and payment configurations
      const kassaRegions = {
        // Russia uses rubles as the base and has a rate of 1
        ru: {
          name: 'Russia',
          currency: 'в‚Ѕ',
          rate: 1,
          paymentMethods: ['SBP', 'Card']
        },
        // Approximate conversion rates for Central Asian currencies based on 2025 averages
        kz: {
          name: 'Kazakhstan',
          currency: 'в‚ё',
          rate: 6,
          paymentMethods: ['Card']
        },
        uz: {
          name: 'Uzbekistan',
          currency: 'UZS ',
          rate: 150,
          paymentMethods: ['Card']
        },
        kg: {
          name: 'Kyrgyzstan',
          currency: 'KGS ',
          rate: 1,
          paymentMethods: ['Card']
        },
        tj: {
          name: 'Tajikistan',
          currency: 'TJS ',
          rate: 0.11,
          paymentMethods: ['Card']
        },
        tm: {
          name: 'Turkmenistan',
          currency: 'TMT ',
          rate: 0.04,
          paymentMethods: ['Card']
        }
      };
      let kassaCurrentRegion = 'ru';
      async function kassaDetectRegion() {
        const saved = localStorage.getItem('soundora-region');
        if (saved && kassaRegions[saved]) {
          return saved;
        }
        try {
          const response = await fetch('https://ipapi.co/json/');
          if (!response.ok) throw new Error('IP API request failed');
          const data = await response.json();
          // Attempt to use the ISO country code returned by the API. Lowercase it for our keys.
          let code = data && data.country_code ? data.country_code.toLowerCase() : 'ru';
          // If we don't have a configuration for this country, default to Russia.
          if (!kassaRegions[code]) {
            code = 'ru';
          }
          localStorage.setItem('soundora-region', code);
          return code;
        } catch (err) {
          console.warn('Region auto-detection failed:', err);
        }
        localStorage.setItem('soundora-region', 'ru');
        return 'ru';
      }
      function kassaPopulateRegionSelect() {
        const select = document.getElementById('kassa-region-select');
        if (!select) return;
        select.innerHTML = '';
        Object.keys(kassaRegions).forEach(code => {
          const option = document.createElement('option');
          option.value = code;
          option.textContent = kassaRegions[code].name;
          select.appendChild(option);
        });
        select.value = kassaCurrentRegion;
        select.addEventListener('change', () => {
          kassaCurrentRegion = select.value;
          try {
            localStorage.setItem('soundora-region', kassaCurrentRegion);
          } catch (err) {
            console.warn('Unable to save region preference:', err);
          }
          kassaUpdatePlanDetails();
          kassaUpdatePaymentMethods();
        });
      }
      function kassaUpdatePlanDetails() {
        const regionData = kassaRegions[kassaCurrentRegion];
        // Determine the base price in rubles. currentKassaTotalPrice represents the price for the selected plan in rubles.
        const baseRubPrice = window.currentKassaTotalPrice ? Number(window.currentKassaTotalPrice) : 299;
        // Convert the price into the selected region's currency using its conversion rate. Round to avoid long decimals.
        const convertedPrice = Math.round(baseRubPrice * (regionData.rate || 1));
        const months = window.currentKassaPlanMonths || 1;
        const planNameEl = document.getElementById('kassa-plan-name');
        const durationEl = document.getElementById('kassa-plan-duration');
        const priceEl = document.getElementById('kassa-plan-price');
        if (planNameEl) planNameEl.textContent = 'Premium Plan';
        if (durationEl) durationEl.textContent = 'Duration: ' + months + ' month' + (Number(months) > 1 ? 's' : '');
        if (priceEl) priceEl.textContent = regionData.currency + convertedPrice;
        const summaryPriceEl = document.getElementById('kassa-summary-price');
        if (summaryPriceEl) summaryPriceEl.textContent = regionData.currency + convertedPrice;
      }
      function kassaUpdatePaymentMethods() {
        const select = document.getElementById('kassa-payment-method');
        if (!select) return;
        select.innerHTML = '';
        kassaRegions[kassaCurrentRegion].paymentMethods.forEach(method => {
          const option = document.createElement('option');
          option.value = method;
          option.textContent = method === 'SBP' ? 'РЎР‘Рџ' : method;
          select.appendChild(option);
        });
      }
      function kassaComputeExpirationDate() {
        const months = window.currentKassaPlanMonths || 1;
        const now = new Date();
        const expiration = new Date(now.getFullYear(), now.getMonth() + Number(months), now.getDate());
        return expiration.toLocaleDateString();
      }

      // Translations for the premium kassa modal.
      // Contains localized strings for English (en), Russian (ru) and Uzbek (uz).
      const kassaTranslations = {
        en: {
          planDetails: "Plan Details",
          email: "Email",
          subscriptionPlan: "Subscription Plan",
          duration: "Duration",
          selectPaymentMethod: "Select payment method",
          region: "Region:",
          continue: "Continue",
          back: "Back",
          orderSummary: "Order Summary",
          plan: "Plan",
          regionLabel: "Region",
          price: "Price",
          expires: "Expires",
          paymentDetails: "Payment Details",
          nameOnCard: "Name on card",
          cardNumber: "Card Number",
          expiryDate: "Expiry Date",
          cvc: "CVC",
          payerName: "Payer Name",
          uzcardNumber: "Uzcard/Humo Number",
          purchaseConfirmed: "Purchase Confirmed!",
          purchaseActivated: "Your premium subscription has been activated!",
          confirmPurchase: "Confirm Purchase",
          close: "Close"
        },
        ru: {
          planDetails: "Р”РµС‚Р°Р»Рё РїР»Р°РЅР°",
          email: "Р­Р». РїРѕС‡С‚Р°",
          subscriptionPlan: "РџР»Р°РЅ РїРѕРґРїРёСЃРєРё",
          duration: "Р”Р»РёС‚РµР»СЊРЅРѕСЃС‚СЊ",
          selectPaymentMethod: "Р’С‹Р±РµСЂРёС‚Рµ СЃРїРѕСЃРѕР± РѕРїР»Р°С‚С‹",
          region: "Р РµРіРёРѕРЅ:",
          continue: "РџСЂРѕРґРѕР»Р¶РёС‚СЊ",
          back: "РќР°Р·Р°Рґ",
          orderSummary: "РЎРІРѕРґРєР° Р·Р°РєР°Р·Р°",
          plan: "РџР»Р°РЅ",
          regionLabel: "Р РµРіРёРѕРЅ",
          price: "Р¦РµРЅР°",
          expires: "Р”РµР№СЃС‚РІРёС‚РµР»СЊРЅРѕ РґРѕ",
          paymentDetails: "РџР»Р°С‚РµР¶РЅР°СЏ РёРЅС„РѕСЂРјР°С†РёСЏ",
          nameOnCard: "РРјСЏ РЅР° РєР°СЂС‚Рµ",
          cardNumber: "РќРѕРјРµСЂ РєР°СЂС‚С‹",
          expiryDate: "РЎСЂРѕРє РґРµР№СЃС‚РІРёСЏ",
          cvc: "CVC",
          payerName: "РРјСЏ РїР»Р°С‚РµР»СЊС‰РёРєР°",
          uzcardNumber: "РќРѕРјРµСЂ Uzcard/Humo",
          purchaseConfirmed: "РџРѕРєСѓРїРєР° РїРѕРґС‚РІРµСЂР¶РґРµРЅР°!",
          purchaseActivated: "Р’Р°С€Р° РїСЂРµРјРёСѓРј РїРѕРґРїРёСЃРєР° Р°РєС‚РёРІРёСЂРѕРІР°РЅР°!",
          confirmPurchase: "РџРѕРґС‚РІРµСЂРґРёС‚СЊ РїРѕРєСѓРїРєСѓ",
          close: "Р—Р°РєСЂС‹С‚СЊ"
        },
        uz: {
          planDetails: "Reja tafsilotlari",
          email: "Elektron pochta",
          subscriptionPlan: "Obuna rejasi",
          duration: "Davomiyligi",
          selectPaymentMethod: "To'lov usulini tanlang",
          region: "Hudud:",
          continue: "Davom etish",
          back: "Orqaga",
          orderSummary: "Buyurtma tafsilotlari",
          plan: "Reja",
          regionLabel: "Hudud",
          price: "Narxi",
          expires: "Muddati tugaydi",
          paymentDetails: "To'lov tafsilotlari",
          nameOnCard: "Karta egasi nomi",
          cardNumber: "Karta raqami",
          expiryDate: "Amal qilish muddati",
          cvc: "CVC",
          payerName: "To'lovchi nomi",
          uzcardNumber: "Uzcard/Humo raqami",
          purchaseConfirmed: "Xarid tasdiqlandi!",
          purchaseActivated: "Premium obunangiz faollashtirildi!",
          confirmPurchase: "Xaridni tasdiqlash",
          close: "Yopish"
        }
      };

      /**
       * Apply translations to the kassa modal based on the current interface language.
       */
      function kassaApplyTranslations() {
        let lang = typeof currentLanguage !== 'undefined' ? currentLanguage : 'ru';
        if (!['en', 'ru', 'uz'].includes(lang)) lang = 'ru';
        const t = kassaTranslations[lang] || kassaTranslations['en'];
        // Step1 elements
        const step1Title = document.getElementById('kassa-step1-title');
        if (step1Title) step1Title.textContent = t.planDetails;
        const emailLabel = document.getElementById('kassa-email-label');
        if (emailLabel) emailLabel.textContent = t.email;
        const planHeading = document.getElementById('kassa-plan-heading');
        if (planHeading) planHeading.textContent = t.subscriptionPlan;
        const durationEl = document.getElementById('kassa-plan-duration');
        if (durationEl) {
          const months = window.currentKassaPlanMonths || 1;
          durationEl.textContent = t.duration + ': ' + months + ' month' + (Number(months) > 1 ? 's' : '');
        }
        const paymentMethodLabel = document.getElementById('kassa-payment-method-label');
        if (paymentMethodLabel) paymentMethodLabel.textContent = t.selectPaymentMethod;
        const regionLabelEl = document.getElementById('kassa-region-label');
        if (regionLabelEl) regionLabelEl.textContent = t.region;
        const continueBtn = document.getElementById('kassa-continue-btn');
        if (continueBtn) continueBtn.textContent = t.continue;
        // Step2 headings and labels
        const step2 = document.getElementById('kassa-step2');
        if (step2) {
          const h2s = step2.querySelectorAll('h2');
          if (h2s[0]) h2s[0].textContent = t.orderSummary;
          if (h2s[1]) h2s[1].textContent = t.paymentDetails;
          const summaryContainer = step2.querySelector('.md\\:w-1\\/2');
          if (summaryContainer) {
            const labelSpans = summaryContainer.querySelectorAll('p span.font-semibold');
            if (labelSpans.length >= 5) {
              labelSpans[0].textContent = t.plan + ':';
              labelSpans[1].textContent = t.duration + ':';
              labelSpans[2].textContent = t.regionLabel + ':';
              labelSpans[3].textContent = t.price + ':';
              labelSpans[4].textContent = t.expires + ':';
            }
          }
        }
        // Payment form labels
        const cardRU = document.getElementById('kassa-payment-form-card-ru');
        if (cardRU) {
          const labels = cardRU.querySelectorAll('label');
          if (labels[0]) labels[0].textContent = t.nameOnCard;
          if (labels[1]) labels[1].textContent = t.cardNumber;
          if (labels[2]) labels[2].textContent = t.expiryDate;
          if (labels[3]) labels[3].textContent = t.cvc;
        }
        const cardCA = document.getElementById('kassa-payment-form-card-ca');
        if (cardCA) {
          const labelsCA = cardCA.querySelectorAll('label');
          if (labelsCA[0]) labelsCA[0].textContent = t.payerName;
          if (labelsCA[1]) labelsCA[1].textContent = t.uzcardNumber;
          if (labelsCA[2]) labelsCA[2].textContent = t.expiryDate;
        }
        const confirmBtn = document.getElementById('kassa-confirm-btn');
        if (confirmBtn) confirmBtn.textContent = t.confirmPurchase;
        const backLink = document.getElementById('kassa-back-link');
        if (backLink) backLink.innerHTML = '&larr; ' + t.back;
        // Step3 success messages
        const step3 = document.getElementById('kassa-step3');
        if (step3) {
          const titleEl = step3.querySelector('h1');
          const msgEl = step3.querySelector('p');
          if (titleEl) titleEl.textContent = t.purchaseConfirmed;
          if (msgEl) msgEl.textContent = t.purchaseActivated;
          const closeBtn = document.getElementById('kassa-success-close');
          if (closeBtn) {
            if (typeof translations !== 'undefined' && translations[currentLanguage] && translations[currentLanguage].close) {
              closeBtn.textContent = translations[currentLanguage].close;
            } else {
              closeBtn.textContent = t.close;
            }
          }
        }
      }
      function kassaShowPaymentForm(method) {
        const cardRU = document.getElementById('kassa-payment-form-card-ru');
        const cardCA = document.getElementById('kassa-payment-form-card-ca');
        const sbp = document.getElementById('kassa-payment-form-sbp');
        if (cardRU) cardRU.classList.add('hidden');
        if (cardCA) cardCA.classList.add('hidden');
        if (sbp) sbp.classList.add('hidden');
        if (method === 'Card') {
          if (kassaCurrentRegion === 'ru' && cardRU) {
            cardRU.classList.remove('hidden');
          } else if (kassaCurrentRegion !== 'ru' && cardCA) {
            // For all non-Russian regions use the Central Asia card form
            cardCA.classList.remove('hidden');
          }
        } else if (method === 'SBP' && sbp) {
          sbp.classList.remove('hidden');
        }
      }
      function kassaInitEventListeners() {
        if (window.__kassaListenersInitialized) return;
        window.__kassaListenersInitialized = true;
        const continueBtn = document.getElementById('kassa-continue-btn');
        if (continueBtn) {
          continueBtn.addEventListener('click', () => {
            const emailVal = document.getElementById('kassa-email')?.value.trim() || '';
            const planName = 'Premium Plan';
            const months = window.currentKassaPlanMonths || 1;
            const regionData = kassaRegions[kassaCurrentRegion];
            // Convert the total price (rubles) to the selected region's currency
            const baseRub = window.currentKassaTotalPrice ? Number(window.currentKassaTotalPrice) : 299;
            const converted = Math.round(baseRub * (regionData.rate || 1));
            document.getElementById('kassa-summary-plan-name').textContent = planName;
            document.getElementById('kassa-summary-plan-duration').textContent = months + ' month' + (Number(months) > 1 ? 's' : '');
            document.getElementById('kassa-summary-region').textContent = regionData.name;
            document.getElementById('kassa-summary-price').textContent = regionData.currency + converted;
            document.getElementById('kassa-summary-expiration').textContent = kassaComputeExpirationDate();
            const selectedMethod = document.getElementById('kassa-payment-method').value;
            kassaShowPaymentForm(selectedMethod);
            document.getElementById('kassa-step1').classList.add('hidden');
            document.getElementById('kassa-step2').classList.remove('hidden');
          });
        }
        const paymentSelect = document.getElementById('kassa-payment-method');
        if (paymentSelect) {
          paymentSelect.addEventListener('change', () => {
            kassaShowPaymentForm(paymentSelect.value);
          });
        }
        const backLink = document.getElementById('kassa-back-link');
        if (backLink) {
          backLink.addEventListener('click', (e) => {
            e.preventDefault();
            document.getElementById('kassa-step2').classList.add('hidden');
            document.getElementById('kassa-step1').classList.remove('hidden');
          });
        }
        const confirmBtn = document.getElementById('kassa-confirm-btn');
        if (confirmBtn) {
          confirmBtn.addEventListener('click', () => {
            const s1 = document.getElementById('kassa-step1');
            const s2 = document.getElementById('kassa-step2');
            const s3 = document.getElementById('kassa-step3');
            if (s1) s1.classList.add('hidden');
            if (s2) s2.classList.add('hidden');
            if (s3) s3.classList.remove('hidden');
          });
        }
      }
      window.showPremiumKassa = async function() {
        kassaCurrentRegion = await kassaDetectRegion();
        kassaPopulateRegionSelect();
        kassaUpdatePlanDetails();
        kassaUpdatePaymentMethods();
        const emailInput = document.getElementById('kassa-email');
        if (emailInput) emailInput.value = '';
        kassaShowPaymentForm(document.getElementById('kassa-payment-method')?.value || 'Card');
        const s1 = document.getElementById('kassa-step1');
        const s2 = document.getElementById('kassa-step2');
        const s3 = document.getElementById('kassa-step3');
        if (s1) s1.classList.remove('hidden');
        if (s2) s2.classList.add('hidden');
        if (s3) s3.classList.add('hidden');
        kassaInitEventListeners();
        // Apply translations to the kassa modal based on current language
        if (typeof kassaApplyTranslations === 'function') {
          kassaApplyTranslations();
        }
      };
    })();
</script>

<!-- Script to handle offline/online status and restore last state -->
<script>
    // Functions to show and hide offline/online banners
    function showOfflineBanner() {
        const banner = document.getElementById('offline-banner');
        if (banner) banner.classList.remove('hidden');
    }
    function hideOfflineBanner() {
        const banner = document.getElementById('offline-banner');
        if (banner) banner.classList.add('hidden');
    }
    function showOnlineBanner() {
        const banner = document.getElementById('online-banner');
        if (banner) banner.classList.remove('hidden');
    }
    function hideOnlineBanner() {
        const banner = document.getElementById('online-banner');
        if (banner) banner.classList.add('hidden');
    }

    // Event listeners for network status
    window.addEventListener('offline', () => {
        showOfflineBanner();
    });
    window.addEventListener('online', () => {
        showOnlineBanner();
    });

    document.addEventListener('DOMContentLoaded', async () => {
        if (await checkRegionRestriction()) {
            return;
        }
        // Setup OK buttons for banners
        const offBtn = document.getElementById('offline-ok-btn');
        const onBtn  = document.getElementById('online-ok-btn');
        offBtn?.addEventListener('click', () => {
            hideOfflineBanner();
        });
        onBtn?.addEventListener('click', () => {
            hideOnlineBanner();
        });
        // Restore last navigation state if offline
        if (!navigator.onLine) {
            try {
                const lastStateRaw = localStorage.getItem('soundora-lastState');
                if (lastStateRaw) {
                    const lastState = JSON.parse(lastStateRaw);
                    if (lastState && lastState.page) {
                        processNavigation(lastState, false);
                    }
                }
            } catch (err) {
                console.error('Error restoring last state:', err);
            }
            showOfflineBanner();
        }
    });
</script>
<!-- Rating Modal -->
<div id="rating-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/60 hidden">
    <div class="bg-gray-900 rounded-lg w-11/12 max-w-md p-6 relative">
        <button id="rating-modal-close" class="absolute top-3 right-3 text-gray-500 hover:text-white"><i class="fas fa-times"></i></button>
        <h3 class="text-lg font-bold mb-2" data-lang-key="yourRatingTitle"></h3>
        <p class="text-sm text-gray-400 mb-4" data-lang-key="ratingImproves"></p>
        <div id="rating-stars" class="flex justify-center mb-4"></div>
        <div class="mb-4 space-y-2">
            <label class="flex items-center gap-2"><input type="checkbox" id="rating-dir" class="h-4 w-4 text-red-600"><span data-lang-key="directionCheckbox"></span></label>
            <label class="flex items-center gap-2"><input type="checkbox" id="rating-plot" class="h-4 w-4 text-red-600"><span data-lang-key="plotCheckbox"></span></label>
            <label class="flex items-center gap-2"><input type="checkbox" id="rating-spectacle" class="h-4 w-4 text-red-600"><span data-lang-key="spectacleCheckbox"></span></label>
            <label class="flex items-center gap-2"><input type="checkbox" id="rating-actors" class="h-4 w-4 text-red-600"><span data-lang-key="actorsCheckbox"></span></label>
        </div>
        <button id="rating-submit" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 rounded-lg" data-lang-key="rateButton"></button>
    </div>
</div>
<!-- Account Switch Modal -->
<div id="account-switch-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/60 hidden">
    <div class="bg-gray-900 rounded-lg w-11/12 max-w-lg p-6 relative overflow-y-auto max-h-[80vh]">
        <button id="account-switch-close" class="absolute top-3 right-3 text-gray-500 hover:text-white"><i class="fas fa-times"></i></button>
        <h3 class="text-lg font-bold mb-4" data-lang-key="whoIsWatching"></h3>
        <div id="account-list" class="space-y-2"></div>
        <button id="account-switch-other" class="mt-4 w-full bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg" data-lang-key="otherAccount"></button>
        <button id="account-share-subscription" class="mt-2 w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold py-2 px-4 rounded-lg" data-lang-key="shareSubscription"></button>
    </div>
</div>

<!-- Share Subscription Modal -->
<div id="share-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/60 hidden">
    <div class="bg-gray-900 rounded-lg w-11/12 max-w-lg p-6 relative overflow-y-auto max-h-[80vh]">
        <button id="share-modal-close" class="absolute top-3 right-3 text-gray-500 hover:text-white"><i class="fas fa-times"></i></button>
        <h3 class="text-lg font-bold mb-4" data-lang-key="promoCodesList"></h3>
        <div id="promo-codes-list" class="space-y-4"></div>
        <button id="generate-promo-btn" class="mt-4 w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg" data-lang-key="generateCode"></button>
    </div>
</div>
<!-- Kassa overlay for premium subscription purchases -->
<div id="kassa-overlay" class="fixed inset-0 z-50 flex items-center justify-center bg-black/70 hidden">
    <div class="bg-gray-900 rounded-lg w-11/12 max-w-2xl p-4 relative">
        <button id="kassa-close-btn" class="absolute top-2 right-2 text-gray-400 hover:text-white text-2xl"><i class="fas fa-times"></i></button>
        <!-- Inline Premium Kassa -->
        <div id="kassa-container" class="w-full max-h-[80vh] overflow-y-auto text-white">
            <!-- Step 1: Subscription Details -->
            <!-- Step 1: Plan Details and Payment Method -->
            <div id="kassa-step1" class="p-6">
                <h1 id="kassa-step1-title" class="text-3xl font-bold mb-6">Plan Details</h1>
                <!-- Email input -->
                <div class="mb-6">
                    <label id="kassa-email-label" for="kassa-email" class="block font-medium mb-2">Email</label>
                    <input type="email" id="kassa-email" class="w-full p-2 rounded bg-gray-700 border border-gray-600 focus:border-red-500 focus:outline-none" placeholder="you@example.com" required>
                </div>
                <!-- Plan overview -->
                <div class="mb-6">
                    <h2 id="kassa-plan-heading" class="text-xl font-semibold mb-2">Subscription Plan</h2>
                    <p id="kassa-plan-name" class="text-lg">Premium Plan</p>
                    <p id="kassa-plan-duration" class="text-sm text-gray-400 mb-1">Duration: 1 month</p>
                    <p id="kassa-plan-price" class="text-lg font-bold"></p>
                </div>
                <!-- Payment method selection -->
                <div class="mb-6">
                    <label id="kassa-payment-method-label" class="block font-medium mb-2" for="kassa-payment-method">Select payment method</label>
                    <select id="kassa-payment-method" class="w-full p-2 rounded bg-gray-700 border border-gray-600"></select>
                </div>
                <!-- Navigation row: region selection and continue button -->
                <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                    <div class="flex items-center gap-2">
                        <label id="kassa-region-label" for="kassa-region-select" class="text-sm">Region:</label>
                        <select id="kassa-region-select" class="bg-gray-700 border border-gray-600 p-1 rounded text-sm"></select>
                    </div>
                    <button id="kassa-continue-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-6 rounded w-full md:w-auto">Continue</button>
                </div>
            </div>
            <!-- Step 2: Payment Details -->
            <!-- Step 2: Checkout -->
            <div id="kassa-step2" class="hidden p-6">
                <a href="#" id="kassa-back-link" class="text-sm text-red-500 mb-4 inline-block">&larr; Back</a>
                <div class="flex flex-col md:flex-row gap-8">
                    <!-- Order summary -->
                    <div class="md:w-1/2">
                        <h2 class="text-2xl font-bold mb-4">Order Summary</h2>
                        <div class="space-y-2">
                            <p><span class="font-semibold">Plan:</span> <span id="kassa-summary-plan-name"></span></p>
                            <p><span class="font-semibold">Duration:</span> <span id="kassa-summary-plan-duration"></span></p>
                            <p><span class="font-semibold">Region:</span> <span id="kassa-summary-region"></span></p>
                            <p><span class="font-semibold">Price:</span> <span id="kassa-summary-price"></span></p>
                            <p><span class="font-semibold">Expires:</span> <span id="kassa-summary-expiration"></span></p>
                        </div>
                    </div>
                    <!-- Payment details -->
                    <div class="md:w-1/2">
                        <h2 class="text-2xl font-bold mb-4">Payment Details</h2>
                        <!-- Card form for Russia -->
                        <div id="kassa-payment-form-card-ru" class="hidden">
                            <div class="mb-4">
                                <label class="block font-medium mb-1" for="kassa-card-name-ru">Name on card</label>
                                <input type="text" id="kassa-card-name-ru" class="w-full p-2 rounded bg-gray-700 border border-gray-600" placeholder="John Doe">
                            </div>
                            <div class="mb-4">
                                <label class="block font-medium mb-1" for="kassa-card-number-ru">Card Number</label>
                                <input type="text" id="kassa-card-number-ru" class="w-full p-2 rounded bg-gray-700 border border-gray-600" placeholder="**** **** **** 1234" maxlength="19">
                            </div>
                            <div class="flex gap-4 mb-4">
                                <div class="flex-1">
                                    <label class="block font-medium mb-1" for="kassa-card-exp-ru">Expiry Date</label>
                                    <input type="text" id="kassa-card-exp-ru" class="w-full p-2 rounded bg-gray-700 border border-gray-600" placeholder="MM/YY" maxlength="5">
                                </div>
                                <div class="flex-1">
                                    <label class="block font-medium mb-1" for="kassa-card-cvc-ru">CVC</label>
                                    <input type="text" id="kassa-card-cvc-ru" class="w-full p-2 rounded bg-gray-700 border border-gray-600" placeholder="123" maxlength="4">
                                </div>
                            </div>
                        </div>
                        <!-- Card form for Central Asia -->
                        <div id="kassa-payment-form-card-ca" class="hidden">
                            <div class="mb-4">
                                <label class="block font-medium mb-1" for="kassa-card-name-ca">Payer Name</label>
                                <input type="text" id="kassa-card-name-ca" class="w-full p-2 rounded bg-gray-700 border border-gray-600" placeholder="John Doe">
                            </div>
                            <div class="mb-4">
                                <label class="block font-medium mb-1" for="kassa-card-number-ca">Uzcard/Humo Number</label>
                                <input type="text" id="kassa-card-number-ca" class="w-full p-2 rounded bg-gray-700 border border-gray-600" placeholder="8600 00** **** 1234">
                            </div>
                            <div class="mb-4">
                                <label class="block font-medium mb-1" for="kassa-card-exp-ca">Expiry Date</label>
                                <input type="text" id="kassa-card-exp-ca" class="w-full p-2 rounded bg-gray-700 border border-gray-600" placeholder="MM/YY">
                            </div>
                        </div>
                        <!-- SBP form -->
                        <div id="kassa-payment-form-sbp" class="hidden">
                            <p class="mb-4">To pay via SBP (РЎР‘Рџ), please scan the QR code shown in your banking app or follow the instructions provided after confirming your purchase.</p>
                        </div>
                        <button id="kassa-confirm-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-6 rounded w-full">Confirm Purchase</button>
                    </div>
                </div>
            </div>
            <!-- Step 3: Success Message -->
            <div id="kassa-step3" class="p-6 hidden text-center">
                <div class="bg-green-500 rounded-full w-20 h-20 flex items-center justify-center mx-auto mb-6">
                    <i class="fa-solid fa-check text-5xl text-white"></i>
                </div>
                <h1 class="text-3xl font-bold mb-2">Purchase Confirmed!</h1>
                <p class="mb-6 text-slate-300">Your premium subscription has been activated!</p>
                <button id="kassa-success-close" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors">Close</button>
            </div>
        </div>
    </div>
</div>
<script>
    window.addEventListener('load', function() {
  handleLogout = async function() {
    try { await signOut(auth); } catch (e) { console.error('Logout error:', e); }
    try { localStorage.removeItem('soundora-lastUid'); } catch(_) {}
    localStorage.removeItem('soundora-accounts');
    localStorage.removeItem('soundora-selected-account');
    window.location.replace('auth.html');
  };
});
// Expose a function to open the premium kassa overlay from plan cards.
    // It accepts the number of months and the total price (without currency sign) and populates the modal accordingly.
    window.openKassa = function(months, totalPrice) {
      const overlay = document.getElementById('kassa-overlay');
      if (!overlay) return;
      // Store plan information globally so it can be used in subsequent steps
      window.currentKassaPlanMonths = months;
      window.currentKassaTotalPrice = totalPrice;
  // The new kassa implementation will handle region selection, plan details and payment method rendering.
  // Display the overlay and initialize the premium kassa modal.
  overlay.classList.remove('hidden');
  if (typeof showPremiumKassa === 'function') {
    // Invoke after a slight delay to ensure modal elements are present in the DOM
    setTimeout(() => { showPremiumKassa(); }, 0);
  }
    };

    // Close the kassa overlay when the main close button is clicked
    const kassaCloseBtn = document.getElementById('kassa-close-btn');
    if (kassaCloseBtn) {
      kassaCloseBtn.addEventListener('click', function() {
        const overlay = document.getElementById('kassa-overlay');
        if (overlay) overlay.classList.add('hidden');
      });
    }

    // Enable/disable the proceed button based on email and region inputs
    function updateKassaProceedState() {
      const emailInput = document.getElementById('kassa-email');
      const regionSelect = document.getElementById('kassa-region');
      const proceedBtn = document.getElementById('kassa-proceed');
      if (!emailInput || !regionSelect || !proceedBtn) return;
      const emailValid = emailInput.checkValidity() && emailInput.value.trim().length > 0;
      // Persist selected region for future use
      if (regionSelect.value) {
        try {
          localStorage.setItem('soundora-region', regionSelect.value);
        } catch (err) {
          console.warn('Unable to save region preference:', err);
        }
      }
      if (regionSelect.value && emailValid) {
        proceedBtn.disabled = false;
        proceedBtn.classList.remove('opacity-50');
        proceedBtn.classList.remove('cursor-not-allowed');
      } else {
        proceedBtn.disabled = true;
        proceedBtn.classList.add('opacity-50');
        proceedBtn.classList.add('cursor-not-allowed');
      }
    }

    // Attach listeners for email and region changes to update proceed state
    (function() {
      const emailInput = document.getElementById('kassa-email');
      const regionSelect = document.getElementById('kassa-region');
      const proceedBtn = document.getElementById('kassa-proceed');
      if (emailInput) emailInput.addEventListener('input', updateKassaProceedState);
      if (regionSelect) regionSelect.addEventListener('change', updateKassaProceedState);
      // Proceed to step2 when the proceed button is clicked
      if (proceedBtn) {
        proceedBtn.addEventListener('click', function() {
          const months = window.currentKassaPlanMonths;
          const total = window.currentKassaTotalPrice;
          const emailVal = document.getElementById('kassa-email').value.trim();
          const regionVal = document.getElementById('kassa-region').value;
          // Populate summary fields
          const summaryPlan = document.getElementById('kassa-summary-plan');
          const summaryTotal = document.getElementById('kassa-summary-total');
          const summaryRegion = document.getElementById('kassa-summary-region');
          const summaryEmail = document.getElementById('kassa-summary-email');
          if (summaryPlan) summaryPlan.textContent = months + ' month' + (Number(months) > 1 ? 's' : '');
          if (summaryTotal) summaryTotal.textContent = total + ' в‚Ѕ';
          if (summaryRegion) summaryRegion.textContent = regionSelect.options[regionSelect.selectedIndex]?.text || regionVal;
          if (summaryEmail) summaryEmail.textContent = emailVal;
          // Build payment fields for the selected region
          renderKassaPaymentFields(regionVal);
          // Show step2 and hide step1
          const s1 = document.getElementById('kassa-step1');
          const s2 = document.getElementById('kassa-step2');
          if (s1) s1.classList.add('hidden');
          if (s2) s2.classList.remove('hidden');
        });
      }
    })();

    // Function to render payment form fields based on selected region
    function renderKassaPaymentFields(region) {
      const container = document.getElementById('kassa-payment-fields');
      if (!container) return;
      container.innerHTML = '';
      if (region === 'balance') {
        const msg = document.createElement('p');
        msg.textContent = 'Your account balance will be used for this purchase. No card details are required.';
        msg.className = 'text-slate-300';
        container.appendChild(msg);
        return;
      }
      let cardNumberLabel = 'Card Number';
      // Use Uzcard/Humo label for Central Asia (ca) and Uzbekistan (uz)
      if (region === 'uz' || region === 'ca') {
        cardNumberLabel = 'Uzcard/Humo Number';
      }
      const nameDiv = document.createElement('div');
      const nameLabel = document.createElement('label');
      nameLabel.className = 'block text-sm font-medium text-slate-300 mb-1';
      nameLabel.textContent = (region === 'ru' || region === 'other') ? 'Name on Card' : 'Payer Name';
      const nameInput = document.createElement('input');
      nameInput.type = 'text';
      nameInput.required = true;
      nameInput.placeholder = 'John Doe';
      nameInput.className = 'w-full bg-slate-700 border-slate-600 rounded-md p-2 text-white focus:ring-red-500 focus:border-red-500';
      nameDiv.appendChild(nameLabel);
      nameDiv.appendChild(nameInput);
      container.appendChild(nameDiv);
      const cardDiv = document.createElement('div');
      const cardLabel = document.createElement('label');
      cardLabel.className = 'block text-sm font-medium text-slate-300 mb-1';
      cardLabel.textContent = cardNumberLabel;
      const cardInput = document.createElement('input');
      cardInput.type = 'text';
      cardInput.required = true;
      cardInput.placeholder = (region === 'uz' || region === 'ca') ? '8600 00** **** 1234' : '**** **** **** 1234';
      cardInput.className = 'w-full bg-slate-700 border-slate-600 rounded-md p-2 text-white focus:ring-red-500 focus:border-red-500';
      cardDiv.appendChild(cardLabel);
      cardDiv.appendChild(cardInput);
      container.appendChild(cardDiv);
      // For Russia show card fields with expiry and CVC; for Central Asia (ca) or Uzbekistan show only expiry (no CVC)
      if (region === 'ru') {
        const wrapper = document.createElement('div');
        wrapper.className = 'flex space-x-3';
        const expDiv = document.createElement('div');
        expDiv.className = 'flex-1';
        const expLabel = document.createElement('label');
        expLabel.className = 'block text-sm font-medium text-slate-300 mb-1';
        expLabel.textContent = 'Expiry Date';
        const expInput = document.createElement('input');
        expInput.type = 'text';
        expInput.required = true;
        expInput.placeholder = 'MM/YY';
        expInput.className = 'w-full bg-slate-700 border-slate-600 rounded-md p-2 text-white focus:ring-red-500 focus:border-red-500';
        expDiv.appendChild(expLabel);
        expDiv.appendChild(expInput);
        const cvcDiv = document.createElement('div');
        cvcDiv.className = 'flex-1';
        const cvcLabel = document.createElement('label');
        cvcLabel.className = 'block text-sm font-medium text-slate-300 mb-1';
        cvcLabel.textContent = 'CVC';
        const cvcInput = document.createElement('input');
        cvcInput.type = 'text';
        cvcInput.required = true;
        cvcInput.placeholder = '123';
        cvcInput.className = 'w-full bg-slate-700 border-slate-600 rounded-md p-2 text-white focus:ring-red-500 focus:border-red-500';
        cvcDiv.appendChild(cvcLabel);
        cvcDiv.appendChild(cvcInput);
        wrapper.appendChild(expDiv);
        wrapper.appendChild(cvcDiv);
        container.appendChild(wrapper);
      } else if (region === 'uz' || region === 'ca') {
        const expDiv = document.createElement('div');
        expDiv.className = 'flex-1';
        const expLabel = document.createElement('label');
        expLabel.className = 'block text-sm font-medium text-slate-300 mb-1';
        expLabel.textContent = 'Expiry Date';
        const expInput = document.createElement('input');
        expInput.type = 'text';
        expInput.required = true;
        expInput.placeholder = 'MM/YY';
        expInput.className = 'w-full bg-slate-700 border-slate-600 rounded-md p-2 text-white focus:ring-red-500 focus:border-red-500';
        expDiv.appendChild(expLabel);
        expDiv.appendChild(expInput);
        container.appendChild(expDiv);
      }
    }

    // Handle payment form submission (confirm purchase)
    (function() {
      const paymentForm = document.getElementById('kassa-payment-form');
      if (paymentForm) {
        paymentForm.addEventListener('submit', function(e) {
          e.preventDefault();
          const s2 = document.getElementById('kassa-step2');
          const s3 = document.getElementById('kassa-step3');
          if (s2) s2.classList.add('hidden');
          if (s3) s3.classList.remove('hidden');
        });
      }
    })();

    // Handle back button from step2 to step1
    (function() {
      const backBtn = document.getElementById('kassa-back');
      if (backBtn) {
        backBtn.addEventListener('click', function() {
          const s1 = document.getElementById('kassa-step1');
          const s2 = document.getElementById('kassa-step2');
          if (s1) s1.classList.remove('hidden');
          if (s2) s2.classList.add('hidden');
        });
      }
    })();

    // Close overlay after success
    (function() {
      const successClose = document.getElementById('kassa-success-close');
      if (successClose) {
        successClose.addEventListener('click', function() {
          const overlay = document.getElementById('kassa-overlay');
          if (overlay) overlay.classList.add('hidden');
        });
      }
    })();
</script>


<!-- === SND: Full-screen Search Overlay Patch === -->
<script>
(function () {
  const overlayHTML = `
  <div id="snd-search-overlay" class="fixed inset-0 z-[60] hidden bg-[#05070d]/95 backdrop-blur-sm flex flex-col">
    <div class="p-4 flex items-center gap-3 border-b border-gray-800">
      <button id="snd-search-back" class="text-white text-xl hover:text-red-400 transition">
        <i class="fas fa-arrow-left"></i>
      </button>
      <div class="relative flex-1">
        <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-500"></i>
        <input id="snd-search-input" type="text" autocomplete="off"
               class="w-full bg-gray-900/70 text-white rounded-xl pl-10 pr-20 py-2.5 outline-none focus:ring-2 focus:ring-red-500 transition"
               placeholder="">
        <button id="snd-search-mic" type="button"
                class="absolute right-10 top-1/2 -translate-y-1/2 text-gray-600 hover:text-gray-300 transition"
                title="">
          <i class="fas fa-microphone"></i>
        </button>
        <button id="snd-search-clear" type="button"
                class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 hidden hover:text-white transition">
          <i class="fas fa-times"></i>
        </button>
      </div>
    </div>
    <div class="flex-1 overflow-hidden">
      <div class="h-full overflow-y-auto px-4 py-4 space-y-6">
        <section>
          <div class="flex items-center justify-between mb-2">
            <h2 id="snd-history-title" class="text-sm font-semibold uppercase tracking-wide text-gray-400"></h2>
            <button id="snd-history-clear-all" class="text-xs text-gray-400 hover:text-red-400 transition"></button>
          </div>
          <div id="snd-search-history" class="space-y-2"></div>
        </section>
        <section>
          <div class="flex items-center justify-between mb-2">
            <h2 id="snd-trending-title" class="text-sm font-semibold uppercase tracking-wide text-gray-400"></h2>
          </div>
          <div id="snd-search-trending" class="space-y-2"></div>
        </section>
        <section>
          <div class="flex items-center justify-between mb-2">
            <h2 id="snd-results-title" class="text-sm font-semibold uppercase tracking-wide text-gray-400"></h2>
          </div>
          <div id="snd-search-results" class="space-y-3 pb-2"></div>
        </section>
      </div>
    </div>
  </div>`;
  const overlayCopy = {
    ru: {
      placeholder: "Поиск фильмов, сериалов и жанров",
      historyTitle: "Недавние запросы",
      historyEmpty: "Нет сохранённых запросов.",
      historyClearAll: "Очистить всё",
      historyRemove: "Удалить из истории",
      trendingTitle: "Популярные запросы",
      trendingEmpty: "Популярных запросов пока нет.",
      resultsTitle: "Результаты",
      resultsEmpty: "Ничего не найдено.",
      resultsNoQuery: "Введите запрос, чтобы увидеть результаты.",
      voiceHint: "Голосовой поиск скоро появится"
    },
    uz: {
      placeholder: "Film, serial va janrlarni qidiring",
      historyTitle: "So'nggi qidiruvlar",
      historyEmpty: "Saqlangan qidiruvlar yo'q.",
      historyClearAll: "Hammasini tozalash",
      historyRemove: "Tarixdan o'chirish",
      trendingTitle: "Mashhur qidiruvlar",
      trendingEmpty: "Hozircha mashhur qidiruvlar yo'q.",
      resultsTitle: "Natijalar",
      resultsEmpty: "Hech narsa topilmadi.",
      resultsNoQuery: "Natijalar shu yerda paydo bo'ladi.",
      voiceHint: "Ovozli qidiruv tez orada"
    },
    en: {
      placeholder: "Search for movies, series, or genres",
      historyTitle: "Recent searches",
      historyEmpty: "No saved searches yet.",
      historyClearAll: "Clear all",
      historyRemove: "Remove from history",
      trendingTitle: "Popular searches",
      trendingEmpty: "No popular searches yet.",
      resultsTitle: "Results",
      resultsEmpty: "Nothing found.",
      resultsNoQuery: "Results will appear here after you search.",
      voiceHint: "Voice search coming soon"
    }
  };
  const DEFAULT_TRENDING = {
    ru: [
      { label: "Брат 2", icon: "fas fa-chart-line text-amber-400" },
      { label: "Кавказская пленница", icon: "fas fa-chart-line text-amber-300" },
      { label: "Ирония судьбы", icon: "fas fa-chart-line text-amber-300" },
      { label: "Офицеры", icon: "fas fa-chart-line text-amber-200" },
      { label: "Белое солнце пустыни", icon: "fas fa-chart-line text-amber-200" }
    ],
    uz: [
      { label: "Mahabbat (O'zbekiston)", icon: "fas fa-chart-line text-amber-400" },
      { label: "Suleyman Too (Qirg'iziston)", icon: "fas fa-chart-line text-amber-300" },
      { label: "Istiqbol (Tojikiston)", icon: "fas fa-chart-line text-amber-300" },
      { label: "Brat 2", icon: "fas fa-chart-line text-amber-200" },
      { label: "Kavkazskaya plennitsa", icon: "fas fa-chart-line text-amber-200" }
    ],
    en: [
      { label: "Brother 2", icon: "fas fa-chart-line text-amber-400" },
      { label: "Prisoner of the Caucasus", icon: "fas fa-chart-line text-amber-300" },
      { label: "Irony of Fate", icon: "fas fa-chart-line text-amber-300" },
      { label: "Officers", icon: "fas fa-chart-line text-amber-200" },
      { label: "White Sun of the Desert", icon: "fas fa-chart-line text-amber-200" }
    ],
    default: [
      { label: "Brat 2", icon: "fas fa-chart-line text-amber-400" },
      { label: "Kavkazskaya plennitsa", icon: "fas fa-chart-line text-amber-300" },
      { label: "Ironiya sudby", icon: "fas fa-chart-line text-amber-300" },
      { label: "Ofitsery", icon: "fas fa-chart-line text-amber-200" },
      { label: "Beloye solnce pustyni", icon: "fas fa-chart-line text-amber-200" }
    ]
  };
  const MAX_HISTORY_ITEMS = 12;
  let scrollLockSnapshot = null;
  let pendingSearchNavigation = null;
  let shouldPopOverlayState = false;

  function getOverlayCopy() {
    const lang = (typeof currentLanguage === "string" ? currentLanguage : "ru").toLowerCase();
    return overlayCopy[lang] || overlayCopy.ru;
  }

  function getTrendingDefaults() {
    const lang = (typeof currentLanguage === "string" ? currentLanguage : "ru").toLowerCase();
    return DEFAULT_TRENDING[lang] || DEFAULT_TRENDING.default || [];
  }

  function ensureOverlay() {
    if (!document.getElementById("snd-search-overlay")) {
      document.body.insertAdjacentHTML("beforeend", overlayHTML);
    }
  }

  function applyOverlayLocale() {
    const overlay = document.getElementById("snd-search-overlay");
    if (!overlay) return;
    const copy = getOverlayCopy();
    const input = document.getElementById("snd-search-input");
    const mic = document.getElementById("snd-search-mic");
    const historyTitle = document.getElementById("snd-history-title");
    const trendingTitle = document.getElementById("snd-trending-title");
    const resultsTitle = document.getElementById("snd-results-title");
    const clearAllBtn = document.getElementById("snd-history-clear-all");

    if (input) input.placeholder = copy.placeholder;
    if (mic) mic.title = copy.voiceHint;
    if (historyTitle) historyTitle.textContent = copy.historyTitle;
    if (trendingTitle) trendingTitle.textContent = copy.trendingTitle;
    if (resultsTitle) resultsTitle.textContent = copy.resultsTitle;
    if (clearAllBtn) clearAllBtn.textContent = copy.historyClearAll;
  }

  function lockScroll() {
    const body = document.body;
    if (!body || scrollLockSnapshot) return;
    scrollLockSnapshot = {
      overflow: body.style.overflow || "",
      paddingRight: body.style.paddingRight || ""
    };
    const scrollBarWidth = window.innerWidth - document.documentElement.clientWidth;
    if (scrollBarWidth > 0) {
      body.style.paddingRight = `${scrollBarWidth}px`;
    }
    body.style.overflow = "hidden";
  }

  function unlockScroll() {
    const body = document.body;
    if (!body || !scrollLockSnapshot) return;
    body.style.overflow = scrollLockSnapshot.overflow;
    body.style.paddingRight = scrollLockSnapshot.paddingRight;
    scrollLockSnapshot = null;
  }

  function flushPendingNavigation() {
    if (!pendingSearchNavigation) return;
    const target = pendingSearchNavigation;
    pendingSearchNavigation = null;
    const navFn = typeof window.navigate === "function" ? window.navigate : null;
    if (navFn) {
      navFn(target);
    } else if (target && target.page === "movie-details" && target.movieId) {
      window.location.hash = `#movie-details?movieId=${encodeURIComponent(target.movieId)}`;
    }
  }

  function getHistory() {
    try {
      const stored = JSON.parse(localStorage.getItem("soundora-search-history") || "[]");
      return Array.isArray(stored) ? stored.filter(item => typeof item === "string" && item.trim()) : [];
    } catch (_) {
      return [];
    }
  }

  function setHistory(history) {
    try {
      localStorage.setItem("soundora-search-history", JSON.stringify(history));
    } catch (_) {}
  }

  function removeHistoryItem(value) {
    const history = getHistory().filter(item => item !== value);
    setHistory(history);
    try {
      const stats = JSON.parse(localStorage.getItem("soundora-search-stats") || "{}");
      if (stats && Object.prototype.hasOwnProperty.call(stats, value)) {
        delete stats[value];
        localStorage.setItem("soundora-search-stats", JSON.stringify(stats));
      }
    } catch (_) {}
    renderHistory();
    renderTrending();
  }

  function clearHistoryAll() {
    try {
      localStorage.removeItem("soundora-search-history");
      localStorage.removeItem("soundora-search-stats");
    } catch (_) {}
    renderHistory();
    renderTrending();
  }

  function saveHistoryItem(value) {
    const query = (value || "").trim();
    if (!query) return;
    const history = getHistory();
    const existingIndex = history.findIndex(item => item.toLowerCase() === query.toLowerCase());
    if (existingIndex !== -1) {
      history.splice(existingIndex, 1);
    }
    history.unshift(query);
    while (history.length > MAX_HISTORY_ITEMS) {
      history.pop();
    }
    setHistory(history);
    try {
      const stats = JSON.parse(localStorage.getItem("soundora-search-stats") || "{}");
      stats[query] = (typeof stats[query] === "number" ? stats[query] : 0) + 1;
      localStorage.setItem("soundora-search-stats", JSON.stringify(stats));
    } catch (_) {}
    renderHistory();
    renderTrending();
  }

  function renderHistory() {
    const wrap = document.getElementById("snd-search-history");
    const clearAllBtn = document.getElementById("snd-history-clear-all");
    if (!wrap) return;
    const copy = getOverlayCopy();
    const history = getHistory();
    wrap.innerHTML = "";
    if (clearAllBtn) {
      clearAllBtn.disabled = history.length === 0;
      clearAllBtn.classList.toggle("opacity-40", history.length === 0);
      clearAllBtn.classList.toggle("pointer-events-none", history.length === 0);
    }
    if (history.length === 0) {
      const empty = document.createElement("p");
      empty.className = "text-gray-500 text-sm";
      empty.textContent = copy.historyEmpty;
      wrap.appendChild(empty);
      return;
    }
    const frag = document.createDocumentFragment();
    history.forEach((entry) => {
      const row = document.createElement("div");
      row.className = "flex items-center gap-3 px-3 py-2 rounded-lg bg-gray-900/40 hover:bg-gray-800 transition";
      const queryBtn = document.createElement("button");
      queryBtn.type = "button";
      queryBtn.className = "flex-1 text-left text-sm text-gray-100 truncate";
      queryBtn.dataset.q = entry;
      queryBtn.dataset.role = "query";
      queryBtn.textContent = entry;
      const removeBtn = document.createElement("button");
      removeBtn.type = "button";
      removeBtn.className = "text-gray-500 hover:text-red-400 transition";
      removeBtn.dataset.q = entry;
      removeBtn.dataset.role = "delete";
      removeBtn.setAttribute("aria-label", copy.historyRemove);
      removeBtn.innerHTML = '<i class="fas fa-times"></i>';
      row.append(queryBtn, removeBtn);
      frag.appendChild(row);
    });
    wrap.appendChild(frag);
    wrap.querySelectorAll("button[data-q]").forEach((btn) => {
      if (btn.dataset.role === "delete") {
        btn.addEventListener("click", (event) => {
          event.stopPropagation();
          removeHistoryItem(btn.dataset.q || "");
        });
      } else {
        btn.addEventListener("click", () => {
          const value = btn.dataset.q || "";
          saveHistoryItem(value);
          const input = document.getElementById("snd-search-input");
          if (input) {
            input.value = value;
            input.focus();
          }
          doSearch(value);
        });
      }
    });
  }

  function renderTrending() {
    const wrap = document.getElementById("snd-search-trending");
    if (!wrap) return;
    const copy = getOverlayCopy();
    wrap.innerHTML = "";
    let stats = {};
    try {
      stats = JSON.parse(localStorage.getItem("soundora-search-stats") || "{}");
    } catch (_) {
      stats = {};
    }
    const fromStats = Object.entries(stats)
      .filter(([label, count]) => typeof label === "string" && label.trim() && typeof count === "number")
      .sort((a, b) => b[1] - a[1])
      .slice(0, 8)
      .map(([label]) => ({ label, icon: "fas fa-chart-line text-amber-300" }));
    const items = fromStats.length ? fromStats : getTrendingDefaults();
    if (!items.length) {
      const empty = document.createElement("p");
      empty.className = "text-gray-500 text-sm";
      empty.textContent = copy.trendingEmpty;
      wrap.appendChild(empty);
      return;
    }
    const frag = document.createDocumentFragment();
    items.forEach((item) => {
      const label = (item && item.label) ? item.label : "";
      if (!label.trim()) return;
      const row = document.createElement("button");
      row.type = "button";
      row.className = "w-full flex items-center justify-between gap-3 px-3 py-2 rounded-lg bg-gray-900/40 hover:bg-gray-800 transition";
      row.dataset.q = label;
      const left = document.createElement("span");
      left.className = "flex items-center gap-3 text-sm text-gray-100 truncate";
      const icon = document.createElement("i");
      icon.className = item.icon || "fas fa-chart-line text-amber-300";
      const text = document.createElement("span");
      text.className = "truncate";
      text.textContent = label;
      left.append(icon, text);
      const rightIcon = document.createElement("i");
      rightIcon.className = "fas fa-magnifying-glass text-gray-500";
      row.append(left, rightIcon);
      row.addEventListener("click", () => {
        saveHistoryItem(label);
        const input = document.getElementById("snd-search-input");
        if (input) {
          input.value = label;
          input.focus();
        }
        doSearch(label);
      });
      frag.appendChild(row);
    });
    wrap.appendChild(frag);
  }

  function setResultsMessage(message) {
    const container = document.getElementById("snd-search-results");
    if (!container) return;
    container.innerHTML = "";
    const note = document.createElement("p");
    note.className = "text-gray-500 text-sm px-2 py-4 text-center";
    note.textContent = message;
    container.appendChild(note);
  }

  function renderResults(list, emptyMessage) {
    const container = document.getElementById("snd-search-results");
    if (!container) return;
    const copy = getOverlayCopy();
    container.innerHTML = "";
    if (!Array.isArray(list) || list.length === 0) {
      setResultsMessage(emptyMessage || copy.resultsEmpty);
      return;
    }
    const input = document.getElementById("snd-search-input");
    const frag = document.createDocumentFragment();
    list.forEach((movie) => {
      if (!movie || !movie.id) return;
      const item = document.createElement("a");
      item.href = "#";
      item.className = "snd-search-result flex items-center gap-3 p-3 rounded-xl bg-gray-900/40 hover:bg-gray-800 transition";
      item.dataset.movieId = String(movie.id);
      const posterWrap = document.createElement("div");
      posterWrap.className = "w-12 h-16 rounded-lg overflow-hidden bg-gray-800 flex-shrink-0";
      const img = document.createElement("img");
      const fallbackPoster = `https://placehold.co/200x300/1f2937/ffffff?text=${encodeURIComponent(movie.title || "Movie")}`;
      img.src = typeof movie.poster === "string" && movie.poster.trim() ? movie.poster : fallbackPoster;
      img.alt = movie.title || "";
      img.className = "w-full h-full object-cover";
      img.addEventListener("error", () => {
        img.onerror = null;
        img.src = fallbackPoster;
      });
      posterWrap.appendChild(img);
      const info = document.createElement("div");
      info.className = "flex-1 min-w-0";
      const titleEl = document.createElement("p");
      titleEl.className = "text-sm font-semibold text-white truncate";
      titleEl.textContent = movie.title || "";
      const subtitleEl = document.createElement("p");
      subtitleEl.className = "text-xs text-gray-400 truncate";
      const genreText = Array.isArray(movie.genre) ? movie.genre.join(", ") : (movie.genre || "");
      const subtitleParts = [movie.year || "", genreText].filter(Boolean);
      subtitleEl.textContent = subtitleParts.join(" | ");
      info.append(titleEl, subtitleEl);
      const chevron = document.createElement("i");
      chevron.className = "fas fa-chevron-right text-gray-600";
      item.append(posterWrap, info, chevron);
      item.addEventListener("click", (event) => {
        event.preventDefault();
        const currentQuery = input && input.value ? input.value.trim() : "";
        if (currentQuery) {
          saveHistoryItem(currentQuery);
        }
        const movieId = item.dataset.movieId;
        pendingSearchNavigation = movieId ? { page: "movie-details", movieId } : null;
        const hasOverlayState = history.state && history.state.overlay === "search";
        closeOverlay();
        if (pendingSearchNavigation && hasOverlayState) {
          shouldPopOverlayState = true;
          setTimeout(() => history.back(), 0);
        } else {
          flushPendingNavigation();
        }
      });
      frag.appendChild(item);
    });
    if (!frag.children.length) {
      setResultsMessage(emptyMessage || copy.resultsEmpty);
      return;
    }
    container.appendChild(frag);
  }

  function parseQuery(q) {
    const tokens = (q || "").toLowerCase().split(/\s+/).filter(Boolean);
    const result = { text: [], years: [] };
    tokens.forEach((token) => {
      if (/^\d{2,4}$/.test(token)) {
        result.years.push(token);
      } else {
        result.text.push(token);
      }
    });
    return result;
  }

  function doSearch(raw) {
    const query = (raw || "").trim();
    const copy = getOverlayCopy();
    const clearBtn = document.getElementById("snd-search-clear");
    const micBtn = document.getElementById("snd-search-mic");
    if (clearBtn) clearBtn.classList.toggle("hidden", query.length === 0);
    if (micBtn) micBtn.classList.toggle("hidden", query.length > 0);
    if (!query) {
      renderResults([], copy.resultsNoQuery);
      return;
    }
    const source = Array.isArray(window.movies) ? window.movies : (Array.isArray(window.sndMovies) ? window.sndMovies : []);
    if (!source.length) {
      renderResults([], copy.resultsEmpty);
      return;
    }
    const filters = parseQuery(query);
    const results = source.filter((movie) => {
      const title = String(movie.title || "").toLowerCase();
      const original = String(movie.originalTitle || "").toLowerCase();
      const genre = Array.isArray(movie.genre) ? movie.genre.join(" ").toLowerCase() : String(movie.genre || "").toLowerCase();
      if (filters.text.length && !filters.text.every((token) => title.includes(token) || original.includes(token) || genre.includes(token))) {
        return false;
      }
      if (filters.years.length) {
        const year = String(movie.year || "");
        if (!filters.years.every((token) => year.startsWith(token))) {
          return false;
        }
      }
      return true;
    }).slice(0, 60);
    renderResults(results, copy.resultsEmpty);
  }

  function debounce(fn, delay) {
    let timeout;
    return function (...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => fn.apply(this, args), delay);
    };
  }

  function attachOverlayEvents() {
    const backBtn = document.getElementById("snd-search-back");
    const clearBtn = document.getElementById("snd-search-clear");
    const clearAllBtn = document.getElementById("snd-history-clear-all");
    const input = document.getElementById("snd-search-input");

    if (backBtn) {
      backBtn.onclick = () => history.back();
    }
    if (clearBtn && input) {
      clearBtn.onclick = () => {
        input.value = "";
        doSearch("");
        input.focus();
      };
    }
    if (clearAllBtn) {
      clearAllBtn.onclick = () => clearHistoryAll();
    }
    if (input) {
      input.oninput = debounce(() => doSearch(input.value), 150);
      input.addEventListener("keydown", (event) => {
        if (event.key === "Enter") {
          const value = input.value.trim();
          if (value) {
            saveHistoryItem(value);
            doSearch(value);
          }
        }
        if (event.key === "Escape") {
          history.back();
        }
      });
    }
  }

  function openOverlay() {
    ensureOverlay();
    const overlay = document.getElementById("snd-search-overlay");
    if (!overlay) return;
    if (!window._sndSearchOpen) {
      history.pushState({ page: (window.currentHistoryState && window.currentHistoryState.page) || "main", overlay: "search" }, "", location.href);
    }
    overlay.classList.remove("hidden");
    pendingSearchNavigation = null;
    shouldPopOverlayState = false;
    lockScroll();
    applyOverlayLocale();
    attachOverlayEvents();
    const input = document.getElementById("snd-search-input");
    const clearBtn = document.getElementById("snd-search-clear");
    const micBtn = document.getElementById("snd-search-mic");
    if (input) {
      input.value = "";
      input.focus();
    }
    if (clearBtn) clearBtn.classList.add("hidden");
    if (micBtn) micBtn.classList.remove("hidden");
    renderHistory();
    renderTrending();
    renderResults([], getOverlayCopy().resultsNoQuery);
    window._sndSearchOpen = true;
  }

  function closeOverlay() {
    const overlay = document.getElementById("snd-search-overlay");
    if (!overlay || overlay.classList.contains("hidden")) {
      window._sndSearchOpen = false;
      return;
    }
    overlay.classList.add("hidden");
    unlockScroll();
    window._sndSearchOpen = false;
  }

  function patchHeader() {
    const headerRight = document.querySelector("header .flex.items-center.space-x-4");
    if (!headerRight) return;
    const langWrap = document.getElementById("language-button-wrapper-header");
    if (langWrap) langWrap.style.display = "none";
    if (!document.getElementById("snd-open-search-btn")) {
      const btn = document.createElement("button");
      btn.id = "snd-open-search-btn";
      btn.className = "text-gray-300 hover:text-white transition duration-300";
      btn.innerHTML = '<i class="fas fa-search text-lg"></i>';
      headerRight.insertBefore(btn, headerRight.firstChild);
      btn.addEventListener("click", (event) => {
        event.preventDefault();
        openOverlay();
      });
    }
  }

  window.addEventListener("popstate", (event) => {
    if (event && event.state && event.state.overlay === "search") {
      openOverlay();
      return;
    }
    if (window._sndSearchOpen) {
      closeOverlay();
    }
    if (shouldPopOverlayState) {
      shouldPopOverlayState = false;
      flushPendingNavigation();
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    patchHeader();
  });

  window.sndOpenSearch = openOverlay;
  window.sndCloseSearch = closeOverlay;
  window.sndRefreshSearchLocale = applyOverlayLocale;
})();
</script>

</body>
</html>



