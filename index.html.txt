<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no, viewport-fit=cover">
    <title>Soundora Films</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        html, body {
            width: 100%;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0a0a0a;
            color: #F3F4F6;
            -webkit-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-touch-callout: none;
        }
        #app-container {
            background-color: #111827;
            width: 100%;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        main {
            padding-bottom: 4rem; /* Bottom nav space */
        }
        body::-webkit-scrollbar, #category-nav::-webkit-scrollbar, #episode-list::-webkit-scrollbar, #search-results::-webkit-scrollbar, #notification-list::-webkit-scrollbar, #ai-chat-messages::-webkit-scrollbar { display: none; }
        body, #category-nav, #episode-list, #search-results, #notification-list, #ai-chat-messages { -ms-overflow-style: none; scrollbar-width: none; }

        nav {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 4rem; /* 64px */
            z-index: 20;
            flex-shrink: 0;
        }
        #player {
            position: fixed;
            inset: 0;
            z-index: 50;
            background-color: #000;
        }
        .category-btn.active { background-color: #DC2626; color: #FFFFFF; }
        .episode-item.active { background-color: #DC2626; }
        .lang-btn.active { background-color: #DC2626; color: #FFFFFF; font-weight: bold; }
        .bottom-nav-link.active { color: #ef4444; }
        .fav-button.favorited { color: #ef4444; }
        .quality-option.active, .speed-option.active, .subtitle-option.active { color: #ef4444; font-weight: bold; }
        .player-controls { opacity: 0; transition: opacity 0.3s ease-in-out; pointer-events: none; }
        .player-controls.visible { opacity: 1; pointer-events: auto; }
        #center-play-btn.hidden, #center-pause-btn.hidden { display: none; }
        .seek-indicator {
            position: absolute;
            top: 50%;
            transform: translateY(-50%) scale(0.5);
            color: white;
            background-color: rgba(0, 0, 0, 0.6);
            padding: 1rem;
            border-radius: 50%;
            font-size: 1.8rem;
            opacity: 0;
            transition: opacity 0.4s ease-out, transform 0.4s ease-out;
            pointer-events: none;
        }
        .seek-indicator.show { opacity: 1; transform: translateY(-50%) scale(1); }
        /* Smoothly animate rating bars to their target width */
        .rating-bar-fill {
            transition: width 0.5s ease-in-out;
        }
        input[type="range"] { -webkit-appearance: none; appearance: none; background: transparent; cursor: pointer; width: 100%; }
        input[type="range"]::-webkit-slider-runnable-track { background: rgba(255, 255, 255, 0.3); height: 0.35rem; border-radius: 1rem; }
        input[type="range"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; margin-top: -6px; background-color: #ef4444; height: 1.1rem; width: 1.1rem; border-radius: 50%; border: 2px solid #111827; }

        #player-settings-panel {
            position: absolute;
            right: 1rem;
            bottom: 5rem;
            width: 280px;
            max-height: calc(100% - 6rem);
            background-color: rgba(20, 20, 20, 0.9);
            backdrop-filter: blur(8px);
            border-radius: 12px;
            transform: translateX(150%);
            transition: transform 0.3s ease-in-out, opacity 0.3s ease-in-out;
            z-index: 40;
            opacity: 0;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }
        #player-settings-panel.open {
            transform: translateX(0);
            opacity: 1;
        }
        .settings-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 16px;
            cursor: pointer;
        }
        .settings-item:hover {
            background-color: rgba(255,255,255,0.1);
        }
        .settings-item i {
            width: 24px;
            text-align: center;
        }
        .toggle-checkbox:checked { right: 0; border-color: #DC2626; }
        .toggle-checkbox:checked + .toggle-label { background-color: #DC2626; }
        #mini-player-container { transition: opacity 0.3s ease-in-out; cursor: grab; }
        #mini-player-container.grabbing { cursor: grabbing; }
        #mini-player-container.hidden { opacity: 0; pointer-events: none; }
        #mini-player-container video { width: 100%; height: 100%; object-fit: cover; pointer-events: none; }
        .toast-notification { transition: opacity 0.3s, transform 0.3s; }
        .notification-dot {
            position: absolute; top: -2px; right: -2px; width: 8px; height: 8px;
            background-color: #ef4444; border-radius: 50%; border: 1px solid #111827;
        }
        #notification-panel { transition: opacity 0.3s; }
        .details-hero-bg {
            position: relative; height: 250px; overflow: hidden;
        }
        .details-hero-bg::before {
            content: ''; position: absolute; top: 0; left: 0; right: 0; bottom: 0;
            background-size: cover; background-position: center;
            filter: blur(10px) brightness(0.7); transform: scale(1.2);
            background-image: var(--bg-image);
        }
        .details-hero-bg .overlay {
            position: absolute; top: 0; left: 0; right: 0; bottom: 0;
            background: linear-gradient(to top, rgba(17, 24, 39, 1) 0%, rgba(17, 24, 39, 0.5) 50%, rgba(17, 24, 39, 0.2) 100%);
        }
        .chat-bubble-user { background-color: #DC2626; }
        .chat-bubble-ai { background-color: #374151; }
        .typing-indicator span {
            height: 8px; width: 8px; margin: 0 2px;
            background-color: #9CA3AF; border-radius: 50%;
            display: inline-block;
            animation: bounce 1.4s infinite ease-in-out both;
        }
        .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
        .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }
        @keyframes bounce {
            0%, 80%, 100% { transform: scale(0); }
            40% { transform: scale(1.0); }
        }

        #player-loading-spinner {
            pointer-events: none;
        }
        .player-loader {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            border: 5px solid rgba(255, 255, 255, 0.2);
            border-top-color: #FFF;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        .speed-indicator {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background-color: rgba(0, 0, 0, 0.6);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 1rem;
            font-size: 1rem;
            font-weight: bold;
            opacity: 0;
            transition: opacity 0.2s ease-in-out;
            pointer-events: none;
            z-index: 30;
        }
        /* Login/Register Tabs */
        .auth-tab {
            border-bottom: 2px solid transparent;
        }
        .auth-tab.active {
            border-bottom-color: #ef4444;
            color: #ef4444;
        }
    </style>
    <!-- Google Cast SDK (sender) va HLS qo'llab-quvvatlovi -->
    <!--
      Google tomonidan tavsiya etilgan Cast Web Sender SDK skript manzili.
      Oldingi manzil (https://www.gstatic.com/cast/sdk/libs/cast_sender.js) ayrim brauzerlarda 404 qaytarar edi,
      shuning uchun uni quyidagi rasmiy kutilgan URLga almashtirdik. "loadCastFramework=1" parametri
      Cast Framework API ni yuklashni ta'minlaydi.
    -->
    <script src="https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1"></script>
    <!-- HLS.js kutubxonasi avtomatik sifat uchun -->
    <script src="https://cdn.jsdelivr.net/npm/hls.js@1.4.12/dist/hls.min.js"></script>
    <script>
        window.SOUNDORA_CAST_APP_ID = '2433D30A';
    </script>
    <script>
        // Register service worker to enable offline capabilities and caching
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('sw.js')
                .then(() => console.log('Service Worker registered'))
                .catch(err => console.error('Service Worker registration failed:', err));
        }
    </script>
</head>
<body class="antialiased">

<div id="loading-overlay" class="hidden fixed inset-0 bg-black bg-opacity-75 z-[100] flex items-center justify-center">
    <i class="fas fa-spinner fa-spin text-white text-4xl"></i>
</div>

<div id="app-container">
    <header class="bg-gray-900/80 backdrop-blur-sm z-30 shadow-md flex-shrink-0 hidden">
        <div class="container mx-auto px-4">
            <div class="flex items-center justify-between h-16">
                <a id="home-link-header" href="#" class="text-xl font-bold text-white tracking-wider">SOUNDORA <span class="text-red-500">FILMS</span></a>
                <div class="flex items-center space-x-4">
                    <!-- Til filtri uchun tugma va ochiluvchi ro'yxat -->
                    <div id="language-button-wrapper-header" class="relative">
                        <button id="language-button-header" class="px-3 py-1 border border-red-500 text-red-500 rounded-md text-sm font-bold"></button>
                        <div id="language-dropdown" class="absolute right-0 mt-2 bg-gray-800 border border-gray-700 rounded-md shadow-lg hidden z-50">
                            <ul id="language-dropdown-list" class="py-2"></ul>
                        </div>
                    </div>
                    <div id="notification-button-wrapper-header" class="relative">
                        <button id="notification-button-header" class="text-gray-300 hover:text-red-500 transition duration-300"><i class="fas fa-bell text-lg"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div id="notification-panel" class="hidden fixed top-0 right-0 w-full h-full sm:top-4 sm:right-4 sm:w-80 sm:h-auto sm:max-h-[80vh] max-w-[90vw] bg-gray-800 rounded-lg shadow-2xl z-40 border border-gray-700 flex flex-col"></div>

    <main>
        <div id="main"></div>
        <div id="movie-details" class="hidden"></div>
        <div id="favorites" class="hidden"></div>
        <!-- Container for downloads page; added so navigation to 'downloads' works -->
        <div id="downloads" class="hidden"></div>
        <div id="profile" class="hidden"></div>
        <div id="guest-profile" class="hidden"></div>
        <div id="login" class="hidden"></div>
        <div id="register" class="hidden"></div>
        <div id="settings" class="hidden"></div>
        <div id="edit-profile" class="hidden"></div>
        <div id="language-settings" class="hidden"></div>
        <div id="content-settings" class="hidden"></div>
        <div id="playback-settings" class="hidden"></div>
        <div id="privacy-policy" class="hidden"></div>
        <div id="faq" class="hidden"></div>
        <div id="premium" class="hidden"></div>
    </main>

    <!-- Modal for showing video download progress -->
    <div id="download-progress-modal" class="hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50">
        <div class="bg-gray-800 p-4 rounded-lg w-80 text-center">
            <h3 class="text-lg font-bold mb-3" data-lang-key="downloading">Downloading...</h3>
            <div class="w-full h-4 bg-gray-600 rounded overflow-hidden">
                <div id="download-progress-bar" class="h-full bg-red-500" style="width: 0%;"></div>
            </div>
            <div id="download-progress-text" class="mt-2 text-gray-300 text-sm">0 MB / 0 MB</div>
        </div>
    </div>

    <!-- Offline and Online banners -->
    <div id="offline-banner" class="hidden fixed top-0 left-0 right-0 bg-yellow-500 text-black p-3 z-50 flex justify-between items-center">
        <span data-lang-key="offlineMode">You are offline</span>
        <button id="offline-ok-btn" class="bg-black bg-opacity-50 hover:bg-opacity-70 text-white px-3 py-1 rounded-md">OK</button>
    </div>
    <div id="online-banner" class="hidden fixed top-0 left-0 right-0 bg-green-500 text-black p-3 z-50 flex justify-between items-center">
        <span data-lang-key="onlineMode">You are online</span>
        <button id="online-ok-btn" class="bg-black bg-opacity-50 hover:bg-opacity-70 text-white px-3 py-1 rounded-md">OK</button>
    </div>

    <nav class="bg-gray-900/90 backdrop-blur-sm border-t border-gray-800">
        <div class="flex justify-around h-full">
            <a id="home-link-bottom" href="#" class="bottom-nav-link flex flex-col items-center justify-center text-gray-300 w-full hover:text-red-500 transition-colors">
                <i class="fas fa-home text-xl"></i>
                <span data-lang-key="bottomNavHome" class="text-xs mt-1">Главная</span>
            </a>
            <button id="search-button-bottom-nav" class="flex flex-col items-center justify-center text-gray-300 w-full hover:text-red-500 transition-colors">
                <i class="fas fa-search text-xl"></i>
                <span data-lang-key="bottomNavSearch" class="text-xs mt-1">Поиск</span>
            </button>
            <a id="favorites-link-bottom" href="#" class="bottom-nav-link flex flex-col items-center justify-center text-gray-300 w-full hover:text-red-500 transition-colors">
                <i class="fas fa-heart text-xl"></i>
                <span data-lang-key="bottomNavFavorites" class="text-xs mt-1">Избранное</span>
            </a>
            <a id="profile-link-bottom" href="#" class="bottom-nav-link flex flex-col items-center justify-center text-gray-300 w-full hover:text-red-500 transition-colors">
                <i class="fas fa-user text-xl"></i>
                <span data-lang-key="bottomNavProfile" class="text-xs mt-1">Профиль</span>
            </a>
        </div>
    </nav>
</div>

<!-- Player container -->
<div id="player" class="hidden"></div>

<div id="modal-overlay" class="hidden fixed inset-0 bg-black bg-opacity-80 z-[70] flex items-center justify-center p-4"></div>
<div id="mini-player-container" class="hidden fixed bottom-20 md:bottom-4 right-4 w-64 h-36 bg-gray-900 rounded-lg shadow-2xl overflow-hidden z-40"></div>
<div id="toast-notification" class="toast-notification hidden fixed bottom-20 left-1/2 -translate-x-1/2 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg opacity-0 transform translate-y-4"></div>

<script type="module">
    // Firebase SDK'larini import qilish
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import {
        getAuth,
        onAuthStateChanged,
        signOut,
        createUserWithEmailAndPassword,
        signInWithEmailAndPassword,
        updatePassword,
        EmailAuthProvider,
        reauthenticateWithCredential,
        RecaptchaVerifier, // Telefon raqami uchun qo'shildi
        signInWithPhoneNumber // Telefon raqami uchun qo'shildi
    } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, collection, onSnapshot, doc, setDoc, getDoc, updateDoc, query, where, getDocs, addDoc, serverTimestamp, arrayUnion, arrayRemove, runTransaction } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    import { getMessaging, getToken, onMessage, isSupported } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-messaging.js";

    // Firebase konfiguratsiyasi
    const firebaseConfig = {
        apiKey: "AIzaSyBeYmiy_FX22I4--UnNTRxjWiAh--sX9Ug",
        authDomain: "soundora-music.firebaseapp.com",
        projectId: "soundora-music",
        storageBucket: "soundora-music.appspot.com",
        messagingSenderId: "92363153683",
        appId: "1:92363153683:web:16feda8fb9607d8da97ae6",
        measurementId: "G-KP08NSCRD6"
    };

    // Firebase ilovasini ishga tushirish
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);

    document.addEventListener('DOMContentLoaded', () => {

    // Increase the application version to force service worker cache refresh
    const APP_VERSION = '1.0.1';
    let movies = [];
    let currentUser = null;
    let notifications = [];
    let operatorCountdownInterval = null;
    let isPlayerLocked = false;
    // Til bo‘yicha filtr. 'all' tanlovi barcha tillarga mos filmlarni ko'rsatadi. Foydalanuvchining tanlagan tilini ushbu o'zgaruvchida saqlaymiz.
    let selectedLangFilter = 'all';
    // Mavjud til kodlari ro'yxati. Ushbu ro'yxat katalogda til bo'yicha filtr tugmalarini yaratishda ishlatiladi.
    const LANGUAGE_FILTERS = ['all', 'uz', 'tj', 'kz', 'kg', 'ru', 'en'];

    /**
     * Til tanlash tugmasi matnini yangilaydi. 'all' bo'lsa, "All" deb ko'rsatiladi,
     * aks holda til kodi katta harflarda yoziladi.
     */
    function renderLanguageButton() {
        const btn = document.getElementById('language-button-header');
        if (!btn) return;
        const label = selectedLangFilter === 'all' ? 'All' : selectedLangFilter.toUpperCase();
        btn.textContent = label;
    }

    /**
     * Ochiluvchi til ro'yxatini quradi. Har bir til uchun tugma yaratib, bosilganda ushbu
     * tilni tanlaydi va filmlar ro'yxatini qayta filtrlaydi. Tanlangan til foydalanuvchi
     * hisobida saqlanadi yoki guest uchun localStorage'ga yoziladi.
     */
    function buildLanguageDropdown() {
        const list = document.getElementById('language-dropdown-list');
        if (!list) return;
        list.innerHTML = '';
        LANGUAGE_FILTERS.forEach((lang) => {
            const li = document.createElement('li');
            li.className = 'px-4 py-2 hover:bg-gray-700 cursor-pointer text-sm';
            const label = lang === 'all' ? 'All' : lang.toUpperCase();
            li.textContent = label;
            li.dataset.langValue = lang;
            // Faol tilni ta'kidlash
            if (selectedLangFilter === lang) {
                li.classList.add('bg-gray-700', 'text-red-400');
            }
            li.addEventListener('click', async (e) => {
                const newLang = e.currentTarget.dataset.langValue;
                if (newLang === selectedLangFilter) {
                    hideLanguageDropdown();
                    return;
                }
                selectedLangFilter = newLang;
                // Tanlangan tilni saqlash: foydalanuvchi login bo'lsa Firestorega, aks holda localStorage'ga
                try {
                    if (currentUser && currentUser.uid) {
                        await updateDoc(doc(db, 'users', currentUser.uid), { preferredMovieLang: selectedLangFilter });
                    } else {
                        localStorage.setItem('soundora-preferredMovieLang', selectedLangFilter);
                    }
                } catch (err) {
                    console.error('Error saving preferred movie language', err);
                }
                // Til tugmasi va dropdownni yangilash. buildLanguageDropdown chaqirilishi yangi holatni aks ettirish uchun kerak.
                renderLanguageButton();
                buildLanguageDropdown();
                hideLanguageDropdown();
                // Joriy kategoriya bo'yicha filmlarni qayta filtrla
                const activeCategoryButton = document.querySelector('#category-nav .category-btn.active');
                const currentCategory = activeCategoryButton ? activeCategoryButton.dataset.categoryValue : 'categoryAll';
                filterAndDisplayMovies(currentCategory);
            });
            list.appendChild(li);
        });
    }

    /**
     * Dropdownni toggl qilish uchun yordamchi funksiyasi. Hidden classni ochib/yopadi.
     */
    function toggleLanguageDropdown() {
        const dropdown = document.getElementById('language-dropdown');
        if (!dropdown) return;
        dropdown.classList.toggle('hidden');
    }

    /**
     * Dropdownni yopadi. Hidden classni qo'llaydi.
     */
    function hideLanguageDropdown() {
        const dropdown = document.getElementById('language-dropdown');
        if (!dropdown) return;
        dropdown.classList.add('hidden');
    }

    /**
     * Til filtri tugmasini va dropdownni dastlabki holatda sozlaydi. LocalStorage yoki user hujjatidan
     * saqlangan tilni yuklab, tugmani yangilaydi va dropdown ro'yxatini quradi. Tugmani bosishda
     * dropdown ochiladi; sahifaga tashqaridan bosilganda esa yopiladi.
     */
    function initLanguageFilter() {
        // Guest foydalanuvchi uchun mahalliy saqlangan tilni o'qish
        try {
            if (!currentUser) {
                const stored = localStorage.getItem('soundora-preferredMovieLang');
                if (stored) {
                    selectedLangFilter = stored;
                }
            }
        } catch (err) {
            console.error('Error reading preferred movie language from localStorage', err);
        }
        renderLanguageButton();
        buildLanguageDropdown();
        const langBtn = document.getElementById('language-button-header');
        if (langBtn) {
            langBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                toggleLanguageDropdown();
            });
        }
        // Tashqi kliklar dropdownni yopishi uchun global listener
        document.addEventListener('click', (e) => {
            const dropdown = document.getElementById('language-dropdown');
            const wrapper = document.getElementById('language-button-wrapper-header');
            if (!dropdown || !wrapper) return;
            if (!dropdown.contains(e.target) && !wrapper.contains(e.target)) {
                hideLanguageDropdown();
            }
        });
    }
    // Telefon raqami orqali kirish uchun global o'zgaruvchilar
    window.recaptchaVerifier = null;
    window.confirmationResult = null;

    // Google Cast konteksti sozlanadi. Agar cast framework yuklangan bo'lsa, qabul qiluvchi ilova identifikatori
    // SOUNDORA_CAST_APP_ID o'zgaruvchisidan olinadi. autoJoinPolicy bilan Chrome cast sessiyalarni boshqarish
    // va to'g'ri context sozlanadi.
    try {
        if (window.cast && cast.framework && typeof cast.framework.CastContext === 'function') {
            const castContext = cast.framework.CastContext.getInstance();
            castContext.setOptions({
                receiverApplicationId: window.SOUNDORA_CAST_APP_ID || '2433D30A',
                autoJoinPolicy: window.chrome && chrome.cast && chrome.cast.AutoJoinPolicy ? chrome.cast.AutoJoinPolicy.ORIGIN_SCOPED : undefined
            });
        }
    } catch (err) {
        console.error('Cast context initialization failed', err);
    }

    // Davlatlar ro'yxati (nomi, bayrog'i va kodi)
    const countries = [
        { name: "Uzbekistan", code: "+998", flag: "🇺🇿" },
        { name: "Russia", code: "+7", flag: "🇷🇺" },
        { name: "Kazakhstan", code: "+7", flag: "🇰🇿" },
        { name: "Tajikistan", code: "+992", flag: "🇹🇯" },
        { name: "Kyrgyzstan", code: "+996", flag: "🇰🇬" },
        { name: "Turkey", code: "+90", flag: "🇹🇷" },
        { name: "USA", code: "+1", flag: "🇺🇸" },
        { name: "Germany", code: "+49", flag: "🇩🇪" },
        { name: "South Korea", code: "+82", flag: "🇰🇷" },
        { name: "China", code: "+86", flag: "🇨🇳" }
    ];

    // Tarjimalar obyekti
    const translations = {
        en: { heroTitle: "Endless Worlds, Endless Stories", heroSubtitle: "Watch the best movies and series in high quality only on Soundora Films.", heroButton: "Watch Now", searchPlaceholder: "Search for movies...", noResults: "No movies found.", noFavorites: "Your favorites list is empty. Add movies to see them here.", backButton: "Back", description: "Description", producerTitle: "Producer", castTitle: "Cast", genre: "Genre", country: "Country", language: "Language", rating: "Rating", duration: "Duration", watchTrailer: "Watch Trailer", episodes: "Episodes", series: "Series", episode: "Episode", addToFavorites: "Add to List", removeFromFavorites: "Remove from List", bottomNavHome: "Home", bottomNavSearch: "Search", bottomNavFavorites: "Favorites", bottomNavProfile: "Profile", rightsReserved: "All Rights Reserved.", studio: "Studio", myFavorites: "My Favorites", settings: "Settings", languageSettingTitle: "App Language", profile: "Profile", favorites: "Favorites", categoryTrending: "Trending", categoryAll: "All", categoryNew: "New", editProfile: "Edit Profile", content: "Content", save: "Save", contentSettingsTitle: "Content Settings", show18Plus: "Show 18+ content", name: "Name", email: "Email", logout: "Logout", loginTitle: "Login", registerTitle: "Register", loginWithEmail: "Sign in with Email", password: "Password", login: "Login", dontHaveAccount: "Don't have an account?", registerNow: "Register now", alreadyHaveAccount: "Already have an account?", loginNow: "Login now", or: "or", loginRequired: "Please log in to watch.", invalidCredentials: "Invalid login or password.", playback: "Playback", enableMiniPlayer: "Enable Mini Player", miniPlayerHint: "Continue watching in a small window while Browse.", privacyPolicy: "Privacy Policy", faq: "FAQ", appVersion: "App Version", liveChat: "Support", privacyTitle: "Privacy Policy", privacy1Title: "1. Information We Collect", privacy1Text: "We collect information to provide better services to all our users. This includes: information you provide us (like your name and email when you register), and information we get from your use of our services (like movies you watch, your favorites, and device information).", privacy2Title: "2. How We Use Information", privacy2Text: "We use the information we collect to provide, maintain, protect, and improve our services, to develop new ones, and to protect Soundora Films and our users. We also use this information to offer you tailored content – like giving you more relevant movie recommendations.", privacy3Title: "3. Information We Share", privacy3Text: "We do not share personal information with companies, organizations, and individuals outside of Soundora Films unless one of the following circumstances applies: with your consent, for external processing, or for legal reasons. This is a demo application, and your data is not shared with any third parties.", privacy4Title: "4. Your Rights", privacy4Text: "You have the right to access, update, and delete your personal information. You can review and update your personal information by signing into your profile and visiting the 'Edit Profile' page. If you have any questions, please contact our support.", faqTitle: "Frequently Asked Questions", faq1Title: "Q: How do I change my password?", faq1Answer: "A: You can change your password by going to Profile > Settings > Edit Profile. This is a demo feature and is not currently functional.", faq2Title: "Q: Is Soundora Films free?", faq2Answer: "A: This is a demonstration version, and its use is completely free. There are no subscriptions or fees.", faq3Title: "Q: How do I enable the mini-player?", faq3Answer: "A: You can enable or disable the mini-player feature by navigating to Profile > Settings > Playback.", notifications: "Notifications", noNewNotifications: "No new notifications", markAllAsRead: "Mark all as read", refresh: "Refresh", newMovieAdded: "has been added.", newSeriesAdded: "has been added.", premium: "Premium", getPremium: "Get Premium Access", premiumHint: "Unlock exclusive movies, ad-free watching, and more!", subscribeNow: "Subscribe Now", premiumRequiredTitle: "Premium Required", premiumRequiredText: "To watch this content, you need a premium subscription.", goToPremium: "Go to Premium", plan1Month: "1 Month", plan3Months: "3 Months", plan7Months: "7 Months", plan12Months: "12 Months", pricePerMonth: "/month", total: "Total", mostPopular: "Most Popular", bestValue: "Best Value", howToSubscribe: "How to Subscribe?", subscribeStep1: "1. Copy your User ID from the Profile page.", subscribeStep2: "2. Open the Live Chat and send your ID to the operator.", subscribeStep3: "3. Inform the operator about your desired subscription plan and follow their instructions.", copyId: "Copy ID", idCopied: "ID Copied!", watchNow: "Watch Now", download: "Download", likes: "Likes", dislikes: "Dislikes", originalTitle: "Original Title", free: "Free", year: "Year", quality: "Quality", apControl: "Admin Panel", profileUpdateSuccess: "Profile updated successfully!", profileUpdateError: "Error updating profile.", aiChatTitle: "Emro AI Assistant", aiChatWelcome: "Hello! I'm Emro, your AI assistant. How can I help you find a movie or navigate the site today? Type 'operator' to speak to a human.", aiChatPlaceholder: "Ask Emro AI...", loginToAccess: "To access your profile, favorites, and settings, please log in or create an account.", operatorRedirectTitle: "Connecting to Operator", operatorRedirectText: "You will be redirected to live chat in", operatorRedirectCancel: "Cancel", operatorConnectPrompt: "Please click the button below to connect.", operatorConnectNow: "Connect Now", aiDefaultSorry: "Sorry, I can only help with finding movies or navigating the site.", playerSettings: "Settings", playbackSpeed: "Playback Speed", subtitles: "Subtitles", screenLock: "Screen Lock", more: "More", loopVideo: "Loop video", normalSpeed: "Normal", exitMessage: "Press back again to exit", noSubtitles: "Off", fullscreenError: "Fullscreen mode is not available",
        registerWarningTitle: "Important Warning", registerWarningText: "Creating an account does not require any real information. The login and password can be entered randomly, but you need to know the login and password to access the account. Do not forget and do not give the information to others.", fullName: "Full Name", loginLabel: "Login (Email)", dobLabel: "Date of Birth", secretWordLabel: "Secret Word", secretWordPlaceholder: "For password recovery",
        changePassword: "Change Password", newPassword: "New password", confirmPassword: "Confirm new password", passwordUpdateSuccess: "Password updated successfully!", passwordUpdateError: "Error updating password.", passwordsDoNotMatch: "Passwords do not match.",
        loginWithPhone: "Phone", phoneNumber: "Phone Number", sendCode: "Send Code", verificationCode: "Verification Code", verify: "Verify", invalidPhoneNumber: "Invalid phone number.", smsSent: "SMS with code has been sent.", invalidCode: "Invalid verification code.",
        registerWithPhone: "Register with Phone",
        },
        ru: { heroTitle: "Бесконечные миры, бесконечные истории", heroSubtitle: "Смотрите лучшие фильмы и сериалы в высоком качестве только на Soundora Films.", heroButton: "Смотреть сейчас", searchPlaceholder: "Поиск фильмов...", noResults: "Фильмы не найдены.", noFavorites: "Ваш список избранного пуст. Добавляйте фильмы, чтобы увидеть их здесь.", backButton: "Назад", description: "Описание", producerTitle: "Продюсер", castTitle: "В ролях", genre: "Жанр", country: "Страна", language: "Язык", rating: "Рейтинг", duration: "Длительность", watchTrailer: "Трейлер", episodes: "Эпизоды", series: "Сериал", episode: "Эпизод", addToFavorites: "В избранное", removeFromFavorites: "Убрать из избранного", bottomNavHome: "Главная", bottomNavSearch: "Поиск", bottomNavFavorites: "Избранное", bottomNavProfile: "Профиль", rightsReserved: "Все права защищены.", studio: "Студия", myFavorites: "Мои избранные", settings: "Настройки", languageSettingTitle: "Язык приложения", profile: "Профиль", favorites: "Избранное", categoryTrending: "В тренде", categoryAll: "Все", categoryNew: "Новые", editProfile: "Изменить профиль", content: "Контент", save: "Сохранить", contentSettingsTitle: "Настройки контента", show18Plus: "Показывать контент 18+", name: "Имя", email: "Эл. почта", logout: "Выйти", loginTitle: "Вход", registerTitle: "Регистрация", loginWithEmail: "Email", password: "Пароль", login: "Войти", dontHaveAccount: "Нет аккаунта?", registerNow: "Зарегистрироваться", alreadyHaveAccount: "Уже есть аккаунт?", loginNow: "Войти", or: "или", loginRequired: "Пожалуйста, войдите, чтобы посмотреть.", invalidCredentials: "Неверный логин или пароль.", playback: "Воспроизведение", enableMiniPlayer: "Включить мини-плеер", miniPlayerHint: "Продолжайте просмотр в маленьком окне во время навигации.", privacyPolicy: "Политика конфиденциальности", faq: "FAQ", appVersion: "Версия приложения", liveChat: "Поддержка", privacyTitle: "Политика конфиденциальности", privacy1Title: "1. Какую информацию мы собираем", privacy1Text: "Мы собираем информацию для улучшения наших сервисов для всех пользователей. Это включает: информацию, которую вы предоставляете (например, ваше имя и email при регистрации), и информацию, которую мы получаем от использования вами наших сервисов (например, какие фильмы вы смотрите, ваше избранное и информация об устройстве).", privacy2Title: "2. Как мы используем информацию", privacy2Text: "Мы используем собранную информацию для предоставления, поддержки, защиты и улучшения наших сервисов, для разработки новых, а также для защиты Soundora Films и наших пользователей. Мы также используем эту информацию, чтобы предлагать вам персонализированный контент, например, более релевантные рекомендации фильмов.", privacy3Title: "3. Какой информацией мы делимся", privacy3Text: "Мы не передаем личную информацию компаниям, организациям и частным лицам, не связанным с Soundora Films, за исключением следующих случаев: с вашего согласия, для внешней обработки или по юридическим причинам. Это демонстрационное приложение, и ваши данные не передаются третьим лицам.", privacy4Title: "4. Ваши права", privacy4Text: "Вы имеете право на доступ, обновление и удаление вашей личной информации. Вы можете просматривать и обновлять свою личную информацию, войдя в свой профиль и посетив страницу 'Изменить профиль'. Если у вас есть вопросы, пожалуйста, свяжитесь с нашей поддержкой.", faqTitle: "Часто задаваемые вопросы", faq1Title: "В: Как изменить мой пароль?", faq1Answer: "О: Вы можете изменить свой пароль, перейдя в Профиль > Настройки > Изменить профиль. Это демонстрационная функция и в настоящее время не работает.", faq2Title: "В: Soundora Films бесплатный?", faq2Answer: "О: Это демонстрационная версия, и ее использование абсолютно бесплатно. Подписок или платежей нет.", faq3Title: "В: Как включить мини-плеер?", faq3Answer: "О: Вы можете включить или выключить функцию мини-плеера, перейдя в Профиль > Настройки > Воспроизведение.", notifications: "Уведомления", noNewNotifications: "Нет новых уведомлений", markAllAsRead: "Отметить все как прочитанные", refresh: "Обновить", newMovieAdded: "добавлен.", newSeriesAdded: "добавлен.", premium: "Премиум", getPremium: "Получить Премиум", premiumHint: "Откройте эксклюзивные фильмы, просмотр без рекламы и многое другое!", subscribeNow: "Подписаться", premiumRequiredTitle: "Нужен Премиум", premiumRequiredText: "Для просмотра этого контента требуется премиум-подписка.", goToPremium: "Перейти к Премиум", plan1Month: "1 Месяц", plan3Months: "3 Месяца", plan7Months: "7 Месяцев", plan12Months: "12 Месяцев", pricePerMonth: "/месяц", total: "Итого", mostPopular: "Популярный", bestValue: "Выгодно", howToSubscribe: "Как подписаться?", subscribeStep1: "1. Скопируйте ваш ID пользователя на странице Профиля.", subscribeStep2: "2. Откройте Онлайн-чат и отправьте ваш ID оператору.", subscribeStep3: "3. Сообщите оператору желаемый план подписки и следуйте инструкциям.", copyId: "Копировать ID", idCopied: "ID скопирован!", watchNow: "Смотреть", download: "Скачать", likes: "Лайки", dislikes: "Дизлайки", originalTitle: "Оригинальное название", free: "Бесплатно", year: "Год", quality: "Качество", apControl: "Панель Администратора", profileUpdateSuccess: "Профиль успешно обновлен!", profileUpdateError: "Ошибка при обновлении профиля.", aiChatTitle: "Ассистент Emro AI", aiChatWelcome: "Здравствуйте! Я Emro, ваш AI-ассистент. Чем я могу помочь вам сегодня: найти фильм или сориентировать на сайте? Введите 'оператор', чтобы связаться с человеком.", aiChatPlaceholder: "Спросите у Emro AI...", loginToAccess: "Чтобы получить доступ к своему профилю, избранному и настройкам, войдите в систему или создайте учетную запись.", operatorRedirectTitle: "Соединение с оператором", operatorRedirectText: "Вы будете перенаправлены в чат через", operatorRedirectCancel: "Отмена", operatorConnectPrompt: "Нажмите кнопку ниже для подключения.", operatorConnectNow: "Подключиться сейчас", aiDefaultSorry: "Извините, я могу помочь только с поиском фильмов или навигацией по сайту.", playerSettings: "Настройки", playbackSpeed: "Скорость", subtitles: "Субтитры", screenLock: "Screen Lock", more: "Ещё", loopVideo: "Повтор видео", normalSpeed: "Обычная", exitMessage: "Нажмите еще раз для выхода", noSubtitles: "Выкл.", fullscreenError: "Полноэкранный режим недоступен",
        registerWarningTitle: "Важное предупреждение", registerWarningText: "Создание учетной записи не требует никаких реальных данных. Логин и пароль можно вводить произвольно, но для входа в аккаунт их необходимо знать. Не забывайте и не передавайте свои данные другим.", fullName: "Имя, Фамилия", loginLabel: "Логин (Email)", dobLabel: "Дата рождения", secretWordLabel: "Секретное слово", secretWordPlaceholder: "Для восстановления пароля",
        changePassword: "Сменить пароль", newPassword: "Новый пароль", confirmPassword: "Подтвердите новый пароль", passwordUpdateSuccess: "Пароль успешно изменен!", passwordUpdateError: "Ошибка при смене пароля.", passwordsDoNotMatch: "Пароли не совпадают.",
        loginWithPhone: "Телефон", phoneNumber: "Номер телефона", sendCode: "Отправить код", verificationCode: "Код подтверждения", verify: "Подтвердить", invalidPhoneNumber: "Неверный номер телефона.", smsSent: "SMS с кодом отправлено.", invalidCode: "Неверный код подтверждения.",
        registerWithPhone: "Регистрация по телефону",
        },
        uz: { heroTitle: "Cheksiz dunyolar, cheksiz hikoyalar", heroSubtitle: "Eng yaxshi filmlar va seriallarni yuqori sifatda faqat Soundora Films'da tomosha qiling.", heroButton: "Hozir Ko'rish", searchPlaceholder: "Filmlarni qidirish...", noResults: "Filmlar topilmadi.", noFavorites: "Sevimlilar roʻyxatingiz boʻsh. Ularni ko'rish uchun film qo'shing.", backButton: "Orqaga", description: "Tavsif", producerTitle: "Prodyuser", castTitle: "Rollarda", genre: "Janr", country: "Davlat", language: "Til", rating: "Reyting", duration: "Davomiyligi", watchTrailer: "Treylerni Ko'rish", episodes: "Qismlar", series: "Serial", episode: "Qism", addToFavorites: "Sevimlilarga", removeFromFavorites: "Sevimlilardan o'chirish", bottomNavHome: "Bosh Sahifa", bottomNavSearch: "Qidiruv", bottomNavFavorites: "Sevimlilar", bottomNavProfile: "Profil", rightsReserved: "Barcha huquqlar himoyalangan.", studio: "Studiya", myFavorites: "Mening sevimlilarim", settings: "Sozlamalar", languageSettingTitle: "Ilova tili", profile: "Profil", favorites: "Sevimlilar", categoryTrending: "Trenddagilar", categoryAll: "Barchasi", categoryNew: "Yangilar", editProfile: "Profilni tahrirlash", content: "Kontent", save: "Saqlash", contentSettingsTitle: "Kontent Sozlamalari", show18Plus: "18+ kontentni ko'rsatish", name: "Ism", email: "Email", logout: "Chiqish", loginTitle: "Hisobga Kirish", registerTitle: "Ro'yxatdan o'tish", loginWithEmail: "Email", password: "Parol", login: "Kirish", dontHaveAccount: "Hisobingiz yo'qmi?", registerNow: "Ro'yxatdan o'ting", alreadyHaveAccount: "Hisobingiz bormi?", loginNow: "Hisobga kiring", or: "yoki", loginRequired: "Tomosha qilish uchun hisobga kiring.", invalidCredentials: "Login yoki parol xato.", playback: "Ijro etish", enableMiniPlayer: "Mini-pleyerni yoqish", miniPlayerHint: "Boshqa sahifalarni ko'rayotganda kichik oynada tomosha qilishni davom eting.", privacyPolicy: "Maxfiylik siyosati", faq: "FAQ", appVersion: "Ilova versiyasi", liveChat: "Qo'llab-quvvatlash", privacyTitle: "Maxfiylik siyosati", privacy1Title: "1. Biz yig'adigan ma'lumotlar", privacy1Text: "Biz barcha foydalanuvchilarimizga yaxshiroq xizmat ko'rsatish uchun ma'lumotlarni yig'amiz. Bunga quyidagilar kiradi: siz bizga taqdim etgan ma'lumotlar (masalan, ro'yxatdan o'tayotganda ismingiz va elektron pochta manzilingiz) va xizmatlarimizdan foydalanish natijasida olingan ma'lumotlar (masalan, siz tomosha qilgan filmlar, sevimlilar ro'yxatingiz va qurilmangiz haqidagi ma'lumotlar).", privacy2Title: "2. Ma'lumotlardan qanday foydalanamiz", privacy2Text: "Biz yig'ilgan ma'lumotlardan xizmatlarimizni taqdim etish, qo'llab-quvvatlash, himoya qilish va yaxshilash, yangilarini ishlab chiqish hamda Soundora Films va foydalanuvchilarimizni himoya qilish uchun foydalanamiz. Shuningdek, biz ushbu ma'lumotlardan sizga moslashtirilgan kontentni taklif qilish uchun foydalanamiz - masalan, sizga ko'proq mos keladigan film tavsiyalarini berish.", privacy3Title: "3. Biz ulashadigan ma'lumotlar", privacy3Text: "Biz shaxsiy ma'lumotlarni Soundora Films bilan bog'liq bo'lmagan kompaniyalar, tashkilotlar va shaxslar bilan ulashmaymiz, quyidagi holatlar bundan mustasno: sizning roziligingiz bilan, tashqi qayta ishlash uchun yoki qonuniy sabablarga ko'ra. Bu demo-ilova bo'lgani uchun sizning ma'lumotlaringiz hech qanday uchinchi tomonga berilmaydi.", privacy4Title: "4. Sizning huquqlaringiz", privacy4Text: "Siz o'z shaxsiy ma'lumotlaringizga kirish, ularni yangilash va o'chirish huquqiga egasiz. Profilingizga kirib, 'Profilni tahrirlash' sahifasiga o'tish orqali shaxsiy ma'lumotlaringizni ko'rib chiqishingiz va yangilashingiz mumkin. Savollaringiz bo'lsa, qo'llab-quvvatlash xizmatimizga murojaat qiling.", faqTitle: "Ko'p beriladigan savollar", faq1Title: "S: Parolni qanday o'zgartirish mumkin?", faq1Answer: "J: Parolni o'zgartirish uchun Profil > Sozlamalar > Profilni tahrirlash bo'limiga o'ting. Bu demo xususiyat bo'lib, hozirda ishlamaydi.", faq2Title: "S: Soundora Films bepulmi?", faq2Answer: "J: Bu namoyish versiyasi va undan foydalanish mutlaqo bepul. Obuna yoki to'lovlar yo'q.", faq3Title: "S: Mini-pleyerni qanday yoqish mumkin?", faq3Answer: "J: Mini-pleyer funksiyasini Profil > Sozlamalar > Ijro etish bo'limiga o'tib yoqishingiz yoki o'chirishingiz mumkin.", notifications: "Bildirishnomalar", noNewNotifications: "Yangi bildirishnomalar yo'q", markAllAsRead: "Barchasini o'qilgan deb belgilash", refresh: "Yangilash", newMovieAdded: "qo'shildi.", newSeriesAdded: "qo'shildi.", premium: "Premium", getPremium: "Premium'ga ega bo'ling", premiumHint: "Eksklyuziv filmlar, reklamasiz tomosha va boshqa imkoniyatlarni oching!", subscribeNow: "Obuna bo'lish", premiumRequiredTitle: "Premium Obuna Kerak", premiumRequiredText: "Ushbu kontentni tomosha qilish uchun premium obuna kerak.", goToPremium: "Premium'ga o'tish", plan1Month: "1 Oy", plan3Months: "3 Oy", plan7Months: "7 Oy", plan12Months: "12 Oy", pricePerMonth: "/oyiga", total: "Jami", mostPopular: "Ommabop", bestValue: "Eng Yaxshi Taklif", howToSubscribe: "Qanday obuna bo'lish mumkin?", subscribeStep1: "1. Profil sahifasidan ID raqamingizdan nusxa oling.", subscribeStep2: "2. Jonli Chat'ni ochib, ID raqamingizni operatorga yuboring.", subscribeStep3: "3. Operatorga kerakli obuna rejasini ayting va uning ko'rsatmalariga amal qiling.", copyId: "ID'dan nusxa olish", idCopied: "ID nusxalandi!", watchNow: "Tomosha Qilish", download: "Yuklab Olish", likes: "Layklar", dislikes: "Dizlayklar", originalTitle: "Asl nomi", free: "Bepul", year: "Yili", quality: "Sifat", apControl: "Admin Paneli", profileUpdateSuccess: "Profil muvaffaqiyatli yangilandi!", profileUpdateError: "Profilni yangilashda xatolik.", aiChatTitle: "Emro AI Yordamchisi", aiChatWelcome: "Salom! Men Emro, sizning AI yordamchingizman. Bugun sizga qanday yordam bera olaman: kino topish yoki saytda yo'l ko'rsatish bo'yicha? Haqiqiy odam bilan gaplashish uchun 'operator' deb yozing.", aiChatPlaceholder: "Emro AI'dan so'rang...", loginToAccess: "Profilingiz, sevimlilaringiz va sozlamalaringizga kirish uchun tizimga kiring yoki hisob yarating.", operatorRedirectTitle: "Operatorga ulanmoqda", operatorRedirectText: "Siz jonli suhbatga yo'naltirilmoqdasiz", operatorRedirectCancel: "Bekor qilish", operatorConnectPrompt: "Ulanish uchun quyidagi tugmani bosing.", operatorConnectNow: "Hozir Ulanish", aiDefaultSorry: "Kechirasiz, men faqat filmlarni topishda yoki saytda harakatlanishda yordam bera olaman.", playerSettings: "Sozlamalar", playbackSpeed: "Tezlik", subtitles: "Subtitrlar", screenLock: "Ekran blokirovkasi", more: "Qo'shimcha", loopVideo: "Videoni takrorlash", normalSpeed: "Normal", exitMessage: "Chiqish uchun yana bir marta bosing", noSubtitles: "O'chirilgan", fullscreenError: "To'liq ekran rejimi mavjud emas",
        registerWarningTitle: "Muhim Ogohlantirish", registerWarningText: "Hisob yaratishda hech qanday haqiqiy ma'lumot shart emas. Login va parol tasodifiy kiritish mumkin, lekin hisobga kirish uchun login va parolni bilishingiz kerak. Esdan chiqarmang va ma'lumotlarni boshqalarga bermang.", fullName: "Ism, Familiya", loginLabel: "Login (Email)", dobLabel: "Tug'ilgan kun", secretWordLabel: "Maxfiy so'z", secretWordPlaceholder: "Parolni tiklash uchun",
        changePassword: "Parolni o'zgartirish", newPassword: "Yangi parol", confirmPassword: "Yangi parolni tasdiqlang", passwordUpdateSuccess: "Parol muvaffaqiyatli o'zgartirildi!", passwordUpdateError: "Parolni o'zgartirishda xatolik.", passwordsDoNotMatch: "Parollar mos kelmadi.",
        loginWithPhone: "Telefon", phoneNumber: "Telefon raqam", sendCode: "Kodni yuborish", verificationCode: "Tasdiqlash kodi", verify: "Tasdiqlash", invalidPhoneNumber: "Telefon raqami noto'g'ri.", smsSent: "Kodli SMS yuborildi.", invalidCode: "Tasdiqlash kodi noto'g'ri.",
        registerWithPhone: "Telefon orqali",
        }
    };

    let currentLanguage = 'ru';
    // --- Additional translations for new features ---
    const extraTranslations = {
        en: {
            detailsTab: "Details",
        actorsTab: "Actors",
        ratingTab: "Rating",
            creatorsTab: "Creators",
            yourRatingTitle: "Your rating",
            ratingImproves: "Ratings improve recommendations",
            directionCheckbox: "Direction",
            plotCheckbox: "Plot",
            spectacleCheckbox: "Spectacle",
            actorsCheckbox: "Actors",
            rateButton: "Rate",
            whoIsWatching: "Who's watching Soundora?",
            otherAccount: "Sign in to another account",
            shareSubscription: "Share subscription",
            thankYouForRating: "Thank you for rating!",
            sndRating: "SND Rating",
            rateThisMovie: "Rate this movie",
            directorTitle: "Director",
            privacyLastUpdated: "Last updated: August 23, 2025",
            switchAccount: "Switch account"
            , downloads: "Downloads"
            , noDownloads: "No downloaded movies yet."
            , downloadAdded: "Movie added to downloads"
            , downloadStarted: "Downloading..."
            , downloadCompleted: "Downloaded"
            , downloadButton: "Download"
            , offlineMode: "You are offline"
            , onlineMode: "You are online"
            , resumeMessage: "You stopped earlier. Continue watching from where you left off?"
            , resumeYes: "Yes"
            , resumeNo: "No"
            , enableResumePrompt: "Ask to resume playback"
            , resumePromptHint: "Show a prompt to continue from your last position when returning to a movie"
            , expiresOn: "Expires on"
            , daysLeft: "days left"
            , votes: "ratings"
            , addProfile: "Add profile"
            , addKids: "Add kids"
            , promoCode: "Promo code"
            , enterPromoCode: "Enter promo code"
            , activatePromo: "Redeem"
            , promoCodesList: "Your Promo Codes"
            , codeUsed: "Activated"
            , codeUnused: "Unused"
            , copy: "Copy"
            , generateCode: "Generate Code"
            , noPromoCodes: "No promo codes yet."
            , promoCodeCopied: "Promo code copied!"
            , supportChatTitle: "Support Chat"
            , supportChatWaiting: "Please wait for an agent to join."
            , supportChatQueue: "Your position in queue:"
            , supportChatPlaceholder: "Type your message..."
            , supportChatSend: "Send"
            , supportChatSystem: "System"
            , supportChatAgentPrefix: "Agent"
            , supportChatUserPrefix: "You"
            , supportChatOperatorQuick: "Operator"
            , subscribeStep2: "2. Open the support chat (type 'operator' in the AI chat) and send your ID to the agent."
        },
        ru: {
            detailsTab: "Детали",
        actorsTab: "Актеры",
        ratingTab: "Рейтинг",
            creatorsTab: "Создатели",
            yourRatingTitle: "Твоя оценка",
            ratingImproves: "Оценки улучшают рекомендации",
            directionCheckbox: "Режиссура",
            plotCheckbox: "Сюжет",
            spectacleCheckbox: "Зрелищность",
            actorsCheckbox: "Актёры",
            rateButton: "Оценить",
            whoIsWatching: "Кто смотрит Soundora?",
            otherAccount: "Войти в другой аккаунт",
            shareSubscription: "Поделиться подпиской",
            thankYouForRating: "Спасибо за оценку!",
            sndRating: "SND рейтинг",
            rateThisMovie: "Оценить фильм",
            directorTitle: "Режиссёр",
            privacyLastUpdated: "Последнее обновление: 23 августа 2025",
            switchAccount: "Сменить аккаунт"
            , downloads: "Загрузки"
            , noDownloads: "Нет загруженных фильмов."
            , downloadAdded: "Фильм добавлен в загрузки"
            , downloadStarted: "Началась загрузка. Фильм появится в разделе загрузок"
            , downloadCompleted: "Загружено"
            , downloadButton: "Скачать"
            , offlineMode: "Вы офлайн"
            , onlineMode: "Вы онлайн"
            , resumeMessage: "Вы остановились ранее. Продолжить просмотр с этого места?"
            , resumeYes: "Да"
            , resumeNo: "Нет"
            , enableResumePrompt: "Показывать запрос продолжения"
            , resumePromptHint: "При возврате к фильму спрашивать, хотите ли продолжить с сохранённого места"
            , expiresOn: "Действительно до"
            , daysLeft: "дней осталось"
            , votes: "оценок"
            , addProfile: "Добавить профиль"
            , addKids: "Добавить детский"
            , promoCode: "Промокод"
            , enterPromoCode: "Введите промокод"
            , activatePromo: "Активировать"
            , promoCodesList: "Ваши промокоды"
            , codeUsed: "Активирован"
            , codeUnused: "Не использован"
            , copy: "Копировать"
            , generateCode: "Создать код"
            , noPromoCodes: "Промокодов нет."
            , promoCodeCopied: "Промокод скопирован!"
            , supportChatTitle: "Чат поддержки"
            , supportChatWaiting: "Пожалуйста, дождитесь подключения оператора."
            , supportChatQueue: "Ваша позиция в очереди:"
            , supportChatPlaceholder: "Введите сообщение..."
            , supportChatSend: "Отправить"
            , supportChatSystem: "Система"
            , supportChatAgentPrefix: "Оператор"
            , supportChatUserPrefix: "Вы"
            , supportChatOperatorQuick: "Оператор"
            , subscribeStep2: "2. Откройте чат поддержки (напишите 'оператор' в AI-чат) и отправьте свой ID оператору."
        },
        uz: {
            detailsTab: "Ma'lumotlar",
        actorsTab: "Aktyorlar",
        ratingTab: "Reyting",
            creatorsTab: "Yaratganlar",
            yourRatingTitle: "Sizning bahongiz",
            ratingImproves: "Baholar tavsiyalarni yaxshilaydi",
            directionCheckbox: "Rejissura",
            plotCheckbox: "Syujet",
            spectacleCheckbox: "Tomosha",
            actorsCheckbox: "Aktyorlar",
            rateButton: "Baholash",
            whoIsWatching: "Soundora-ni kim ko'rmoqda?",
            otherAccount: "Boshqa akkauntga kirish",
            shareSubscription: "Obunani baham ko'rish",
            thankYouForRating: "Baholaganingiz uchun rahmat!",
            sndRating: "SND reytingi",
            rateThisMovie: "Filmdan baho bering",
            directorTitle: "Rejissyor",
            privacyLastUpdated: "Oxirgi yangilanish: 23-avgust, 2025",
            switchAccount: "Hisobni almashtirish"
            , downloads: "Yuklanganlar"
            , noDownloads: "Yuklangan filmlar yo'q."
            , downloadAdded: "Film yuklanganlarga qo'shildi"
            , downloadStarted: "Yuklash boshlandi. Yuklashlar bo‘limida kuzatib boring"
            , downloadCompleted: "Yuklab olindi"
            , downloadButton: "Yuklab olish"
            , offlineMode: "Siz oflayn rejimdasiz"
            , onlineMode: "Siz onlayn rejimdasiz"
            , resumeMessage: "Siz avval to'xtagan edingiz. Shu joydan davom ettirishni xohlaysizmi?"
            , resumeYes: "Ha"
            , resumeNo: "Yo‘q"
            , enableResumePrompt: "Davom ettirish so'rovi"
            , resumePromptHint: "Filmga qaytganingizda oxirgi to'xtagan joydan davom etishni so'rov oynasi"
            , expiresOn: "Muddati"
            , daysLeft: "kun qoldi"
            , votes: "baholar"
            , addProfile: "Profil qo'shish"
            , addKids: "Bolalar profilini qo'shish"
            , promoCode: "Promokod"
            , enterPromoCode: "Promokodni kiriting"
            , activatePromo: "Faollashtirish"
            , promoCodesList: "Sizning promokodlaringiz"
            , codeUsed: "Faollashtirilgan"
            , codeUnused: "Faollashtirilmagan"
            , copy: "Nusxa olish"
            , generateCode: "Kod yaratish"
            , noPromoCodes: "Promokodlar yo'q."
            , promoCodeCopied: "Promokod nusxalandi!"
            , supportChatTitle: "Qo'llab-quvvatlash chati"
            , supportChatWaiting: "Iltimos, operator ulanishini kuting."
            , supportChatQueue: "Navbatdagi o'rningiz:"
            , supportChatPlaceholder: "Xabaringizni yozing..."
            , supportChatSend: "Yuborish"
            , supportChatSystem: "Tizim"
            , supportChatAgentPrefix: "Operator"
            , supportChatUserPrefix: "Siz"
            , supportChatOperatorQuick: "Operator"
            , subscribeStep2: "2. Qo'llab-quvvatlash chatini oching (AI chatga 'operator' deb yozing) va ID raqamingizni operatorga yuboring."
        }
    };
    // Merge extraTranslations into existing translations
    Object.keys(extraTranslations).forEach(lang => {
        translations[lang] = { ...(translations[lang] || {}), ...extraTranslations[lang] };
    });
    let isMiniPlayerEnabled = JSON.parse(localStorage.getItem('soundora-miniPlayerEnabled')) ?? true;
    // Whether to display the resume playback prompt when returning to a movie. Default true.
    let isResumePromptEnabled = JSON.parse(localStorage.getItem('soundora-resumePromptEnabled')) ?? true;
    let readNotifications = JSON.parse(localStorage.getItem('soundora-readNotifications')) || [];
    let postLoginRedirect = null;
    let activeVideoElement = null;
    let miniPlayerState = { active: false, state: null };
    let currentHistoryState = null;
    let playerControlTimeout;
    let isNotificationPanelOpen = false;

    const modalOverlay = document.getElementById('modal-overlay');
    const miniPlayerContainer = document.getElementById('mini-player-container');
    const toastNotification = document.getElementById('toast-notification');
    const notificationPanel = document.getElementById('notification-panel');
    const mainEl = document.querySelector('main');
    const loadingOverlay = document.getElementById('loading-overlay');

    function debounce(func, delay) {
        let timeout;
        return function(...args) {
            const context = this;
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(context, args), delay);
        };
    }

    async function setupPushNotifications() {
        const isMessagingSupported = await isSupported();
        // Agar brauzer Firebase Messaging'ni qo'llab-quvvatlasa va VAPID kaliti to'g'ri bo'lsa, pushni faollashtiramiz.
        if (isMessagingSupported) {
            try {
                const messaging = getMessaging(app);
                const permission = await Notification.requestPermission();
                // Firebasening ochiq VAPID kaliti konfiguratsiyasi. Uni server funksiyalar orqali (functions.config().push.vapid_key) sozlash mumkin.
                const vapidKey = (typeof functions !== 'undefined' && functions.config().push && functions.config().push.vapid_key)
                    ? functions.config().push.vapid_key
                    : 'YOUR_PUBLIC_VAPID_KEY_FROM_FIREBASE';
                // Agar ruxsat berilgan va kalit haqiqiy bo'lsa, tokenni so'raymiz.
                if (permission === 'granted' && vapidKey && vapidKey !== 'YOUR_PUBLIC_VAPID_KEY_FROM_FIREBASE') {
                    const fcmToken = await getToken(messaging, { vapidKey });
                    if (fcmToken && currentUser) {
                        const userRef = doc(db, "users", currentUser.uid);
                        await updateDoc(userRef, { fcmToken: fcmToken });
                    }
                } else if (permission === 'granted') {
                    console.warn('Push notifications disabled: VAPID key is missing or invalid.');
                }
                onMessage(messaging, (payload) => {
                    console.log('Message received. ', payload);
                    showToast(`${payload.notification.title}: ${payload.notification.body}`);
                });
            } catch (error) {
                console.error('An error occurred while setting up push notifications.', error);
            }
        } else {
            console.log("Firebase Messaging is not supported in this browser.");
        }
    }

    function updateNotificationDot() {
        const unreadExists = notifications.some(n => !readNotifications.includes(n.id));
        const wrapper = document.getElementById('notification-button-wrapper-header');
        if (!wrapper) return;

        let dot = wrapper.querySelector('.notification-dot');
        if (unreadExists && !dot) {
            const newDot = document.createElement('div');
            newDot.className = 'notification-dot';
            wrapper.appendChild(newDot);
        } else if (!unreadExists && dot) {
            dot.remove();
        }
    }

    function toggleNotificationPanel() {
        isNotificationPanelOpen = !isNotificationPanelOpen;
        if (isNotificationPanelOpen) {
            renderNotificationPanel();
            notificationPanel.classList.remove('hidden');
        } else {
            notificationPanel.classList.add('hidden');
        }
    }

    function markAllNotificationsAsRead() {
        readNotifications = notifications.map(n => n.id);
        localStorage.setItem('soundora-readNotifications', JSON.stringify(readNotifications));
        renderNotificationPanel();
        updateNotificationDot();
    }

    function formatTimeAgo(dateString) {
        const now = new Date();
        const past = new Date(dateString);
        const seconds = Math.floor((now - past) / 1000);

        let interval = seconds / 31536000;
        if (interval > 1) return Math.floor(interval) + " yil oldin";
        interval = seconds / 2592000;
        if (interval > 1) return Math.floor(interval) + " oy oldin";
        interval = seconds / 86400;
        if (interval > 1) return Math.floor(interval) + " kun oldin";
        interval = seconds / 3600;
        if (interval > 1) return Math.floor(interval) + " soat oldin";
        interval = seconds / 60;
        if (interval > 1) return Math.floor(interval) + " daqiqa oldin";
        return Math.floor(seconds) + " soniya oldin";
    }

    function renderNotificationPanel() {
        const sortedNotifications = [...notifications].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

        let content;
        if (sortedNotifications.length === 0) {
            content = `<p class="text-center text-gray-400 p-8" data-lang-key="noNewNotifications"></p>`;
        } else {
            content = sortedNotifications.map(n => {
                const isRead = readNotifications.includes(n.id);
                const movie = movies.find(m => m.id === String(n.movieId));
                if (!movie) return '';
                return `
                    <div class="notification-item p-3 flex items-start gap-3 border-b border-gray-700/50 cursor-pointer hover:bg-gray-700/70 ${isRead ? 'opacity-60' : ''}" data-movie-id="${n.movieId}" data-notification-id="${n.id}">
                        <img src="${movie.poster}" alt="${movie.title}" class="w-12 h-16 object-cover rounded-md flex-shrink-0" onerror="this.onerror=null;this.src='https://placehold.co/150x225/ef4444/ffffff?text=Error';">
                        <div class="flex-grow">
                            <p class="text-sm">
                                <strong class="font-bold">${movie.title}</strong>
                                <span data-lang-key="${n.messageKey || 'newMovieAdded'}"></span>
                            </p>
                            <p class="text-xs text-gray-400 mt-1">${formatTimeAgo(n.timestamp)}</p>
                        </div>
                        ${!isRead ? '<div class="w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0"></div>' : ''}
                    </div>
                `;
            }).join('');
        }

        notificationPanel.innerHTML = `
            <div class="p-4 flex justify-between items-center border-b border-gray-700">
                <h3 class="font-bold text-lg" data-lang-key="notifications"></h3>
                <button id="close-notifications-btn" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            <div id="notification-list" class="flex-grow overflow-y-auto">${content}</div>
            <div class="p-2 border-t border-gray-700 flex justify-between">
                <button id="refresh-notifications-btn" class="text-sm text-gray-400 hover:text-white" data-lang-key="refresh"></button>
                <button id="mark-all-read-btn" class="text-sm text-red-500 hover:text-red-400" data-lang-key="markAllAsRead"></button>
            </div>
        `;

        notificationPanel.querySelector('#close-notifications-btn').addEventListener('click', toggleNotificationPanel);
        notificationPanel.querySelector('#mark-all-read-btn').addEventListener('click', markAllNotificationsAsRead);
        notificationPanel.querySelector('#refresh-notifications-btn').addEventListener('click', () => renderNotificationPanel());

        notificationPanel.querySelectorAll('.notification-item').forEach(item => {
            item.addEventListener('click', (e) => {
                const notificationId = e.currentTarget.dataset.notificationId;
                const movieId = e.currentTarget.dataset.movieId;

                if (!readNotifications.includes(notificationId)) {
                    readNotifications.push(notificationId);
                    localStorage.setItem('soundora-readNotifications', JSON.stringify(readNotifications));
                    updateNotificationDot();
                }

                toggleNotificationPanel();
                navigate({ page: 'movie-details', movieId: movieId });
            });
        });

        setLanguage(currentLanguage);
    }

    const pageRenderers = {
        'main': renderMainPage,
        'movie-details': renderMovieDetailsPage,
        'player': renderPlayerPage,
        'favorites': renderFavoritesPage,
        'profile': renderProfilePage,
        'guest-profile': renderGuestProfilePage,
        'login': renderLoginPage,
        'register': renderRegisterPage,
        'settings': renderSettingsPage,
        'edit-profile': renderEditProfilePage,
        'language-settings': renderLanguageSettingsPage,
        'content-settings': renderContentSettingsPage,
        'playback-settings': renderPlaybackSettingsPage,
        'privacy-policy': renderPrivacyPolicyPage,
        'faq': renderFaqPage,
        'premium': renderPremiumPage,
        'downloads': renderDownloadsPage,
    };

    function showPage(pageId) {
        document.querySelectorAll('main > div, #player').forEach(div => {
            div.classList.add('hidden');
        });

        const targetPage = document.getElementById(pageId);
        if (targetPage) {
            targetPage.classList.remove('hidden');
        }

        updateActiveNav(pageId);

        const header = document.querySelector('header');
        if (header) {
            header.classList.toggle('hidden', pageId !== 'main');
        }
        window.scrollTo(0, 0);
    }

    function processNavigation(newState, push = true) {
        const leavingPlayerPage = currentHistoryState?.page === 'player';
        const leavingMoviePage = currentHistoryState?.page === 'movie-details';

        // If leaving the movie details page, pause the inline video to prevent audio playing in the background
        if (leavingMoviePage) {
            const cardVideoEl = document.getElementById('card-video');
            if (cardVideoEl && !cardVideoEl.paused) {
                try {
                    // Save current playback position when leaving
                    const movieId = currentHistoryState?.movieId;
                    if (movieId) {
                        localStorage.setItem(`soundora-play-position-${movieId}`, cardVideoEl.currentTime);
                    }
                    cardVideoEl.pause();
                } catch (err) {}
            }
        }

        if (leavingPlayerPage) {
            document.getElementById('player')?.classList.remove('fullscreen-active');
            if (isMiniPlayerEnabled && activeVideoElement) {
                showMiniPlayer(currentHistoryState);
            } else if (activeVideoElement) {
                activeVideoElement.pause();
                activeVideoElement.remove();
                activeVideoElement = null;
            }
        }

        if (newState.page === 'player' && miniPlayerState.active) {
            hideMiniPlayer(false);
        }

        if (push) {
            const stateToPush = { ...newState };
            if (stateToPush.movieId) stateToPush.movieId = String(stateToPush.movieId);

            if (stateToPush.page === 'main') {
                history.replaceState(stateToPush, '', `#${stateToPush.page}`);
            } else {
                history.pushState(stateToPush, '', `#${stateToPush.page}`);
            }
        }

        currentHistoryState = newState;
        renderPage(newState);
        // Persist last navigation state for offline restore
        try {
            localStorage.setItem('soundora-lastState', JSON.stringify(newState));
        } catch (err) {
            console.error('Error saving last state', err);
        }
    }

    function navigate(state, push = true) {
        const protectedPages = ['profile', 'favorites', 'downloads', 'settings', 'edit-profile', 'language-settings', 'content-settings', 'playback-settings', 'premium'];
        if (!currentUser && protectedPages.includes(state.page)) {
            if(state.page === 'profile') {
                processNavigation({ page: 'guest-profile' }, push);
            } else {
                postLoginRedirect = state;
                processNavigation({ page: 'login' }, push);
            }
        } else {
            processNavigation(state, push);
        }
    }

    function renderPage(state) {
        state = state || { page: 'main' };
        const renderer = pageRenderers[state.page];
        if (renderer) {
            const pageContainer = document.getElementById(state.page);
            if (pageContainer) {
                if (movies.length > 0 || !['main', 'favorites'].includes(state.page)) {
                    pageContainer.innerHTML = renderer(state);
                }
                showPage(state.page);
                setupPageEventListeners(state);
                setLanguage(currentLanguage);
            }
        }
    }

    function renderMainPage() {
        return `
            <section class="hero-bg h-60 md:h-80 flex items-center justify-center">
                <div class="text-center text-white px-4">
                    <h1 data-lang-key="heroTitle" class="text-3xl md:text-5xl font-black uppercase tracking-wider mb-3"></h1>
                    <p data-lang-key="heroSubtitle" class="text-sm md:text-lg max-w-md md:max-w-2xl mx-auto mb-6"></p>
                </div>
            </section>
            <div class="sticky top-0 bg-gray-900/80 backdrop-blur-sm z-10 py-2">
                <div class="container mx-auto">
                    <!-- Kategoriya tugmalari -->
                    <div id="category-nav" class="flex space-x-3 overflow-x-auto whitespace-nowrap px-4"></div>
                </div>
            </div>
            <div class="container mx-auto px-4 py-6">
                <div id="movies-grid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
                    <!-- Skeleton Loader -->
                    ${Array.from({length: 12}).map(() => `
                        <div class="animate-pulse bg-gray-700/50 rounded-lg aspect-[2/3]"></div>
                    `).join('')}
                </div>
            </div>`;
    }

    function renderMovieDetailsPage(state) {
        const movie = movies.find(m => m.id === String(state.movieId));
        if (!movie) {
            return `<div class="flex items-center justify-center h-screen"><i class="fas fa-spinner fa-spin text-white text-4xl"></i></div>`;
        }
        // Compute average SND rating and vote count from localStorage if not already set on the movie
        try {
            const ratingsData = JSON.parse(localStorage.getItem('soundora-ratings')) || {};
            let totalRating = 0;
            let ratingCount = 0;
            const movieIdStr = String(movie.id);
            for (const uid in ratingsData) {
                const val = ratingsData[uid]?.[movieIdStr];
                if (val) {
                    totalRating += val;
                    ratingCount++;
                }
            }
            {
                // Always compute the SND rating based on all user ratings to ensure consistency across profiles.
                const avgVal = ratingCount > 0 ? (totalRating / ratingCount) : 0;
                movie.sndRating = ratingCount > 0 ? avgVal.toFixed(1) : '0.0';
                movie.sndVotes = ratingCount;
            }
        } catch (err) {
            // If parsing fails, leave defaults
        }
        // Quality tags and premium tag
        const qualityTags = movie.qualities && Array.isArray(movie.qualities)
            ? movie.qualities.map(q => `<div class="bg-black/50 text-white text-xs font-bold px-2 py-1 rounded-md">${q}</div>`).join('')
            : (movie.sources ? Object.keys(movie.sources).filter(s => movie.sources[s]).map(q => `<div class="bg-black/50 text-white text-xs font-bold px-2 py-1 rounded-md">${q}</div>`).join('') : '');

        const premiumTag = movie.isPremium
            ? `<div class="bg-gradient-to-r from-amber-500 to-yellow-400 text-white text-xs font-bold px-2 py-1 rounded-md" data-lang-key="premium"></div>`
            : `<div class="bg-green-600 text-white text-xs font-bold px-2 py-1 rounded-md" data-lang-key="free"></div>`;

        const isFavorited = currentUser?.favorites?.includes(movie.id);

        // Determine autoplay source (prefer higher quality)
        let autoPlayUrl = '';
        if (movie.sources) {
            const qualityOrder = ['1080p', '720p', '480p'];
            for (const q of qualityOrder) {
                if (movie.sources[q]) {
                    autoPlayUrl = movie.sources[q];
                    break;
                }
            }
        }
        const cardMedia = autoPlayUrl
            ? `<video id="card-video" class="w-full h-full object-cover" poster="${movie.poster || ''}" autoplay playsinline>
                    <source src="${autoPlayUrl}" type="video/mp4">
               </video>`
            : `<img src="${movie.poster || 'https://placehold.co/800x450/1f2937/ffffff?text=No+Image'}" onerror="this.onerror=null;this.src='https://placehold.co/800x450/ef4444/ffffff?text=Error';" alt="${movie.title}" class="w-full h-full object-cover">`;

        // Build the info grid (ratings, duration, country, studio, year, language). Likes/dislikes removed; SND rating shown next to IMDb rating.
        const imdbVal = movie.rating?.split('/') && movie.rating?.split('/')[0] ? movie.rating.split('/')[0] : 'N/A';
        const sndVal = movie.sndRating ?? '0.0';
        const durationVal = movie.duration?.split(' ') && movie.duration.split(' ')[0] ? movie.duration.split(' ')[0] : '-';
        const infoGrid = `
            <div class="my-4 p-3 bg-gray-800/50 rounded-lg flex flex-col space-y-3 text-xs">
                <!-- Rating row: IMDb, SND and duration side by side -->
                <div class="flex justify-around text-center">
                    <div class="flex flex-col items-center">
                        <span class="font-bold text-lg text-yellow-400">${imdbVal}</span>
                        <span>IMDB</span>
                    </div>
                    <div class="flex flex-col items-center">
                        <span class="font-bold text-lg text-red-500">${sndVal}</span>
                        <span>SND</span>
                    </div>
                    <div class="flex flex-col items-center">
                        <span class="font-bold text-lg">${durationVal}</span>
                        <span data-lang-key="duration"></span>
                    </div>
                </div>
                <!-- Additional info row: country, studio, year, language -->
                <div class="flex flex-wrap justify-around gap-x-4 gap-y-2 text-center">
                    <div class="flex items-center gap-1">
                        <i class="fas fa-globe text-lg text-gray-300"></i><span>${movie.country || ''}</span>
                    </div>
                    <div class="flex items-center gap-1">
                        <i class="fas fa-video text-lg text-gray-300"></i><span>${movie.studio || 'N/A'}</span>
                    </div>
                    <div class="flex items-center gap-1">
                        <i class="fas fa-calendar-alt text-lg text-gray-300"></i><span>${movie.year || ''}</span>
                    </div>
                    <div class="flex items-center gap-1">
                        <i class="fas fa-language text-lg text-gray-300"></i><span>${movie.language || ''}</span>
                    </div>
                </div>
            </div>`;

        // Series controls (mobile only) for series type
        const seriesControls = (movie.type === 'series' && Array.isArray(movie.episodes)) ? `
            <div id="series-controls-container" class="block md:hidden mb-4">
                <div id="season-row" class="flex gap-2 overflow-x-auto mb-3"></div>
                <div id="range-row" class="flex gap-2 overflow-x-auto mb-3"></div>
                <div id="episode-row" class="grid grid-cols-5 gap-2"></div>
            </div>
        ` : '';

        // Info tabs row
        const infoTabs = `
            <div id="info-tabs" class="flex gap-2 mb-4">
                <button class="info-tab-btn active px-4 py-2 rounded-lg bg-gray-800 text-white hover:bg-red-600 transition-colors" data-tab="description" data-lang-key="description"></button>
                <button class="info-tab-btn px-4 py-2 rounded-lg bg-gray-800 text-white hover:bg-red-600 transition-colors" data-tab="actors" data-lang-key="actorsTab"></button>
                <button class="info-tab-btn px-4 py-2 rounded-lg bg-gray-800 text-white hover:bg-red-600 transition-colors" data-tab="rating" data-lang-key="ratingTab"></button>
            </div>`;

        // Info contents (description, actors, rating)
        const infoContents = `
            <div id="info-description" class="info-tab-content">
                <h2 data-lang-key="description" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                <p class="text-gray-300 leading-relaxed text-sm">${movie.description || ''}</p>
                <div class="mt-4">
                    <h2 data-lang-key="directorTitle" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                    <p class="text-gray-300 leading-relaxed text-sm">${movie.director || movie.producer || ''}</p>
                </div>
                <div class="mt-4">
                    <h2 data-lang-key="creatorsTab" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                    <p class="text-gray-300 leading-relaxed text-sm">${[movie.director || '', movie.producer || ''].filter(Boolean).join(', ')}</p>
                </div>
            </div>
            <div id="info-actors" class="info-tab-content hidden">
                <h2 data-lang-key="actorsTab" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                <p class="text-gray-300 leading-relaxed text-sm">${Array.isArray(movie.cast) ? movie.cast.join(', ') : ''}</p>
            </div>
            <div id="info-rating" class="info-tab-content hidden">
                <h2 data-lang-key="ratingTab" class="text-xl font-bold mb-3 border-l-4 border-red-500 pl-3"></h2>
                <div class="flex flex-col sm:flex-row sm:items-center sm:gap-6 mb-4">
                    <div class="flex items-baseline gap-2">
                        <span class="rating-value text-5xl font-bold text-yellow-400">${movie.sndRating ?? 0}</span>
                        <span class="text-sm text-gray-400 ml-2"><span class="rating-votes-count">${movie.sndVotes ?? 0}</span> <span data-lang-key="votes"></span></span>
                    </div>
                    <div class="w-full mt-4 sm:mt-0 space-y-1">
                        <div class="flex items-center gap-2">
                            <span class="w-32 text-gray-400" data-lang-key="directionCheckbox"></span>
                            <div class="flex-1 h-2 bg-gray-700 rounded-full overflow-hidden"><div class="rating-bar-fill h-2 bg-red-500" data-final="${(movie.sndRating ?? 0) * 10}" style="width: 0%"></div></div>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="w-32 text-gray-400" data-lang-key="plotCheckbox"></span>
                            <div class="flex-1 h-2 bg-gray-700 rounded-full overflow-hidden"><div class="rating-bar-fill h-2 bg-red-500" data-final="${(movie.sndRating ?? 0) * 10}" style="width: 0%"></div></div>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="w-32 text-gray-400" data-lang-key="spectacleCheckbox"></span>
                            <div class="flex-1 h-2 bg-gray-700 rounded-full overflow-hidden"><div class="rating-bar-fill h-2 bg-red-500" data-final="${(movie.sndRating ?? 0) * 10}" style="width: 0%"></div></div>
                        </div>
                        <div class="flex items-center gap-2">
                            <span class="w-32 text-gray-400" data-lang-key="actorsCheckbox"></span>
                            <div class="flex-1 h-2 bg-gray-700 rounded-full overflow-hidden"><div class="rating-bar-fill h-2 bg-red-500" data-final="${(movie.sndRating ?? 0) * 10}" style="width: 0%"></div></div>
                        </div>
                    </div>
                </div>
                <button id="snd-rate-btn" data-movie-id="${movie.id}" class="mt-2 bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg" data-lang-key="rateThisMovie"></button>
            </div>`;

        // Final markup with video control panel on the card
        return `
            <div>
                <div class="sticky top-0 z-20 bg-black">
                    <div class="relative w-full" style="height: 33vh;">
                        ${cardMedia}
                        <!-- Back button -->
                        <button id="back-button" class="absolute top-4 left-4 bg-black/50 w-10 h-10 rounded-full text-white flex items-center justify-center"><i class="fas fa-arrow-left"></i></button>
                        <!-- Favorite button -->
                        <button id="fav-button" class="fav-button absolute top-4 right-16 bg-black/50 w-10 h-10 rounded-full text-white ${isFavorited ? 'favorited' : ''}" data-movie-id="${movie.id}">
                            <i class="fas fa-heart"></i>
                        </button>
                        <!-- Settings button -->
                        <button id="card-settings-button" class="absolute top-4 right-4 bg-black/50 w-10 h-10 rounded-full text-white flex items-center justify-center"><i class="fas fa-cog"></i></button>
                        <!-- Central play/pause overlay (hidden by default) -->
                        <div id="card-center-overlay" class="absolute inset-0 flex items-center justify-center pointer-events-none hidden">
                            <button id="card-play-pause-button" class="text-white text-5xl flex items-center justify-center pointer-events-auto"><i class="fas fa-play"></i></button>
                            <!-- Speed indicator shown during hold -->
                            <div id="card-speed-indicator" class="absolute top-1/3 inset-x-0 text-center text-4xl font-bold text-white opacity-0">2x</div>
                        </div>
                        <!-- Bottom controls: progress bar and fullscreen, hidden by default -->
                        <div id="card-bottom-controls" class="absolute inset-0 flex flex-col justify-end pointer-events-none hidden">
                            <div class="w-full bg-black/50 p-2 pointer-events-auto">
                                <div class="flex items-center">
                                    <span id="card-current-time" class="text-xs text-white">00:00</span>
                                    <input id="card-progress" type="range" min="0" max="0" value="0" class="flex-grow mx-2 h-1 cursor-pointer appearance-none rounded-lg bg-gray-400">
                                    <span id="card-duration" class="text-xs text-white">00:00</span>
                                    <button id="card-fullscreen-button" data-movie-id="${movie.id}" class="ml-2 text-white text-lg"><i class="fas fa-expand"></i></button>
                                </div>
                            </div>
                        </div>

                        <!-- Settings menu overlay (hidden by default). Centered and narrower like YouTube's modal -->
                        <div id="card-settings-menu" class="absolute left-1/2 -translate-x-1/2 bottom-0 mb-[50px] w-11/12 max-w-sm px-4 py-3 bg-black/90 text-white rounded-t-lg hidden">
                            <div class="text-lg font-bold mb-2" data-lang-key="settings">Настройки</div>
                            <div id="card-settings-quality-row" class="flex justify-between items-center py-2 border-b border-gray-700">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-tv text-gray-400"></i>
                                    <span data-lang-key="quality">Качество</span>
                                </div>
                                <div class="flex items-center gap-2">
                                    <span id="card-settings-quality">720p</span>
                                    <i class="fas fa-chevron-right text-gray-500"></i>
                                </div>
                            </div>
                            <div id="card-settings-speed-row" class="flex justify-between items-center py-2 border-b border-gray-700">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-stopwatch text-gray-400"></i>
                                    <span data-lang-key="playbackSpeed">Скорость воспроизведения</span>
                                </div>
                                <div class="flex items-center gap-2">
                                    <span id="card-settings-speed" data-lang-key="normalSpeed">Обычная</span>
                                    <i class="fas fa-chevron-right text-gray-500"></i>
                                </div>
                            </div>
                            <div id="card-settings-subtitles-row" class="flex justify-between items-center py-2 border-b border-gray-700">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-closed-captioning text-gray-400"></i>
                                    <span data-lang-key="subtitles">Субтитры</span>
                                </div>
                                <div class="flex items-center gap-2">
                                    <span id="card-settings-subtitles" data-lang-key="noSubtitles">Выкл.</span>
                                    <i class="fas fa-chevron-right text-gray-500"></i>
                                </div>
                            </div>
                            <!-- Screen Lock row -->
                            <div id="card-settings-screenlock-row" class="flex justify-between items-center py-2 border-b border-gray-700">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-lock text-gray-400"></i>
                                    <span data-lang-key="screenLock">Блокировка экрана</span>
                                </div>
                                <i class="fas fa-chevron-right text-gray-500"></i>
                            </div>
                            <!-- More row -->
                            <div id="card-settings-more-row" class="flex justify-between items-center py-2">
                                <div class="flex items-center gap-3">
                                    <i class="fas fa-ellipsis-h text-gray-400"></i>
                                    <span data-lang-key="more">Ещё</span>
                                </div>
                                <i class="fas fa-chevron-right text-gray-500"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="container mx-auto p-4">
                    <h1 class="text-2xl md:text-3xl font-bold leading-tight mb-1">${movie.title || ''}</h1>
                    <p class="text-gray-400 text-sm mb-3">${movie.originalTitle || ''}</p>
                    <div class="flex flex-wrap items-center gap-2 mb-4">${premiumTag}${qualityTags}</div>
                    ${infoGrid}
                    <div class="flex gap-2 my-4">
                        <button id="download-button" class="w-auto bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300 flex items-center gap-2" data-movie-id="${movie.id}">
                            <i class="fas fa-download"></i>
                            <span data-lang-key="downloadButton">Download</span>
                        </button>
                        <button id="cast-button" class="w-auto bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-4 rounded-lg transition duration-300">
                            <i class="fas fa-tv"></i>
                        </button>
                    </div>
                    <div class="mt-6">
                        ${seriesControls}
                        ${infoTabs}
                        ${infoContents}
                    </div>
                </div>
            </div>
        `;
    }

    function renderFavoritesPage() {
        const favoriteMovies = movies.filter(m => currentUser?.favorites?.includes(m.id));
        const content = favoriteMovies.length > 0 ? favoriteMovies.map(createMovieCardHTML).join('') : `<p class="col-span-full text-center text-gray-400 mt-8" data-lang-key="noFavorites"></p>`;
        return `
            <div class="container mx-auto px-4 py-6">
                <h1 class="text-2xl md:text-4xl font-bold mb-6 border-l-4 border-red-500 pl-4" data-lang-key="favorites"></h1>
                <div id="favorites-grid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">${content}</div>
            </div>`;
    }

    // Render page showing downloaded (offline) movies
    function renderDownloadsPage() {
        // Retrieve list of downloaded movie objects (or IDs for backward compatibility)
        let downloadedRaw;
        try {
            downloadedRaw = JSON.parse(localStorage.getItem('soundora-downloads')) || [];
        } catch (e) {
            downloadedRaw = [];
        }
        // Normalize to list of strings (IDs)
        const ids = downloadedRaw.map(item => (typeof item === 'object' ? String(item.id) : String(item)));
        const uniqueIds = Array.from(new Set(ids));
        // Use a safe check in case movies data has not loaded yet
        const downloadedMovies = Array.isArray(movies)
            ? movies.filter(m => uniqueIds.includes(String(m.id)))
            : [];
        const content = downloadedMovies.length > 0
            ? downloadedMovies.map(movie => {
                // Find corresponding download entry
                const dEntry = downloadedRaw.find(item => (typeof item === 'object' && String(item.id) === String(movie.id)));
                let progressHTML = '';
                if (dEntry && dEntry.status === 'downloading') {
                    const prog = dEntry.progress || 0;
                    progressHTML = `<div class="p-2"><div class="w-full bg-gray-600 rounded h-2"><div id="download-progress-${movie.id}" class="bg-red-500 h-2 rounded" style="width:${prog}%"></div></div><div id="download-progress-text-${movie.id}" class="text-xs text-gray-400 mt-1">${Math.round(prog)}%</div></div>`;
                } else if (dEntry && dEntry.status === 'completed') {
                    progressHTML = `<div class="p-2 text-green-400 text-xs" data-lang-key="downloadCompleted">Downloaded</div>`;
                }
                return `<div class="relative">${createMovieCardHTML(movie)}${progressHTML}</div>`;
            }).join('')
            : `<p class="col-span-full text-center text-gray-400 mt-8" data-lang-key="noDownloads"></p>`;
        return `
            <div class="container mx-auto px-4 py-6">
                <h1 class="text-2xl md:text-4xl font-bold mb-6 border-l-4 border-red-500 pl-4" data-lang-key="downloads"></h1>
                <div id="downloads-grid" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">${content}</div>
            </div>`;
    }

    function renderProfilePage() {
        if (!currentUser) return '';
        return `
            <div class="container mx-auto px-4 py-6 flex flex-col" style="min-height: calc(100vh - 8rem);">
                <div class="flex-grow">
                    <div class="flex justify-between items-center mb-8">
                        <h1 class="text-2xl md:text-4xl font-bold border-l-4 border-red-500 pl-4" data-lang-key="profile"></h1>
                        <div class="flex items-center gap-4">
                            <button id="profile-ai-chat-btn" class="text-gray-400 hover:text-red-500 transition-colors"><i class="fas fa-robot text-2xl"></i></button>
                            <button id="switch-account-btn" class="text-gray-400 hover:text-red-500 transition-colors"><i class="fas fa-user-friends text-2xl"></i></button>
                        </div>
                    </div>
                        <div class="flex flex-row items-center gap-4 md:gap-8">
                        <div class="flex-shrink-0 relative">
                            <img src="${currentUser.photoURL || `https://placehold.co/150x150/ef4444/ffffff?text=${currentUser.displayName?.charAt(0) || 'U'}`}" alt="User Avatar" class="w-24 h-24 md:w-36 md:h-36 rounded-full border-4 border-gray-700 shadow-lg">
                            ${currentUser.isPremium
                                ? '<div class="absolute -top-3 md:-top-4 left-1/2 transform -translate-x-1/2"><i class="fas fa-crown text-yellow-400 text-2xl md:text-3xl"></i></div>'
                                : '<div class="absolute bottom-0 right-0 bg-gray-700 rounded-full p-1"><i class="fas fa-user text-xs text-white"></i></div>'}
                        </div>
                        <div class="text-left">
                            <h2 class="text-2xl md:text-3xl font-bold">${currentUser.displayName || 'User'}</h2>
                            <p class="text-gray-400 mt-1 md:mt-2">${currentUser.email || currentUser.phoneNumber || ''}</p>
                            <div class="mt-2">
                                <div class="flex items-center gap-2">
                                    <button id="copy-id-btn" class="bg-gray-700/50 hover:bg-gray-600/50 text-gray-300 text-sm py-1 px-3 rounded-md transition-colors flex items-center gap-2">
                                        ID: <span id="user-profile-id" class="truncate max-w-[150px]">${currentUser.customId || currentUser.uid}</span>
                                    </button>
                                    ${currentUser.isPremium ? '<div class="flex-shrink-0 bg-gradient-to-r from-amber-500 to-yellow-400 rounded-full p-1"><i class="fas fa-crown text-xs text-black"></i></div>' : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="mt-10 space-y-4">
                         <button id="settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-cog w-6 text-center mr-3"></i><span data-lang-key="settings"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                            </button>
                         <button id="premium-btn" class="w-full bg-gradient-to-r from-amber-500 to-yellow-400 text-white font-semibold py-4 px-5 rounded-lg transition-transform hover:scale-105 flex justify-between items-center text-left shadow-lg">
                            <span><i class="fas fa-crown w-6 text-center mr-3"></i><span data-lang-key="premium"></span></span><i class="fas fa-chevron-right text-gray-200"></i>
                            </button>
                         <button id="privacy-policy-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-shield-alt w-6 text-center mr-3"></i><span data-lang-key="privacyPolicy"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                            </button>
                         <button id="faq-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-question-circle w-6 text-center mr-3"></i><span data-lang-key="faq"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                            </button>
                         <!-- Downloads button for offline movies -->
                         <button id="downloads-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-download w-6 text-center mr-3"></i><span data-lang-key="downloads"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                         </button>
                        ${currentUser?.role === 'admin' ? `
                            <a id="ap-control-btn" href="./admin.html" target="_blank" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                                <span><i class="fas fa-tools w-6 text-center mr-3"></i><span data-lang-key="apControl"></span></span><i class="fas fa-external-link-alt text-gray-500"></i>
                            </a>
                        ` : ''}
                    </div>
                    <!-- Account Switch and Logout at bottom -->
                    <div class="mt-8 space-y-4">
                        <button id="switch-account-btn-bottom" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-user-friends w-6 text-center mr-3"></i><span data-lang-key="switchAccount"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                        </button>
                        <button id="logout-btn-bottom" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-red-500 font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                            <span><i class="fas fa-sign-out-alt w-6 text-center mr-3"></i><span data-lang-key="logout"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                        </button>
                    </div>
                </div>
                <p class="text-center text-gray-500 text-xs mt-8 flex-shrink-0"><span data-lang-key="appVersion"></span>: ${APP_VERSION}</p>
            </div>`;
    }

    function renderGuestProfilePage() {
        return `
            <div class="container mx-auto px-4 py-6 flex flex-col" style="min-height: calc(100vh - 8rem);">
                <div class="flex justify-between items-center mb-8">
                    <h1 class="text-2xl md:text-4xl font-bold border-l-4 border-red-500 pl-4" data-lang-key="profile"></h1>
                    <div class="flex items-center gap-4">
                       <button id="guest-ai-chat-btn" class="text-gray-400 hover:text-red-500 transition-colors"><i class="fas fa-robot text-2xl"></i></button>
                    </div>
                </div>
                <div class="flex-grow flex flex-col items-center justify-center text-center">
                    <i class="fas fa-user-circle text-6xl text-gray-600 mb-4"></i>
                    <h2 class="text-2xl font-bold mb-2" data-lang-key="loginRequired"></h2>
                    <p class="text-gray-400 mb-6 max-w-sm" data-lang-key="loginToAccess"></p>
                    <button id="guest-login-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-8 rounded-lg transition-colors">
                        <span data-lang-key="login"></span>
                    </button>
                </div>
                 <p class="text-center text-gray-500 text-xs mt-8 flex-shrink-0"><span data-lang-key="appVersion"></span>: ${APP_VERSION}</p>
            </div>
        `;
    }

    function renderLoginPage() {
        return `
            <div class="container mx-auto px-4 py-8 flex flex-col items-center justify-center min-h-[calc(100vh-8rem)]">
                <div class="w-full max-w-md">
                    <h1 class="text-3xl font-bold text-center mb-6" data-lang-key="loginTitle"></h1>

                    <!-- Tablar -->
                    <div class="flex justify-center border-b border-gray-700 mb-6">
                        <button id="email-login-tab" class="auth-tab w-1/2 py-3 font-semibold text-gray-400 active" data-lang-key="loginWithEmail"></button>
                        <button id="phone-login-tab" class="auth-tab w-1/2 py-3 font-semibold text-gray-400" data-lang-key="loginWithPhone"></button>
                    </div>

                    <!-- Email orqali kirish formasi -->
                    <div id="email-login-form-container">
                         <form id="login-form">
                            <div class="space-y-4">
                                <input type="email" id="login-email-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" data-lang-key="loginLabel" placeholder="Login (Email)" required>
                                <input type="password" id="login-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" data-lang-key="password" placeholder="Parol" required>
                            </div>
                            <button type="submit" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="login"></span>
                            </button>
                         </form>
                    </div>

                    <!-- Telefon raqami orqali kirish formasi -->
                    <div id="phone-login-form-container" class="hidden">
                        <div id="login-phone-entry-view">
                            <div class="space-y-4">
                               <label for="phone" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="phoneNumber"></label>
                               <div class="flex items-center border border-gray-700 rounded-lg focus-within:ring-1 focus-within:ring-red-500 focus-within:border-red-500 transition duration-200 bg-gray-800/50">
                                    <div class="relative">
                                        <select id="login-country-code" class="pl-3 pr-8 py-3 bg-transparent appearance-none cursor-pointer focus:outline-none text-gray-300">
                                            <!-- Davlatlar ro'yxati JavaScript orqali qo'shiladi -->
                                        </select>
                                         <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                                            <i class="fas fa-chevron-down text-xs"></i>
                                        </div>
                                    </div>
                                    <input type="tel" id="phone-number-input" class="w-full p-3 border-none bg-transparent focus:ring-0 text-white" placeholder="901234567" required>
                                </div>
                            </div>
                            <button id="send-code-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="sendCode"></span>
                            </button>
                        </div>
                        <div id="login-code-entry-view" class="hidden">
                             <div class="space-y-4">
                                <input type="text" id="verification-code-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 text-center tracking-[1em]" data-lang-key="verificationCode" placeholder="______" required maxlength="6">
                            </div>
                            <button id="verify-code-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="verify"></span>
                            </button>
                        </div>
                    </div>

                    <p id="login-error" class="text-red-500 text-center text-sm h-4 mt-4"></p>

                    <div class="text-center text-sm text-gray-400 mt-6">
                        <span data-lang-key="dontHaveAccount"></span>
                        <button id="go-to-register-btn" class="font-semibold text-red-500 hover:text-red-400" data-lang-key="registerNow"></button>
                    </div>

                    <!-- reCAPTCHA uchun konteyner -->
                    <div id="recaptcha-container" class="flex justify-center mt-4"></div>
                </div>
            </div>
        `;
    }

    function renderRegisterPage() {
        return `
            <div class="container mx-auto px-4 py-8 flex flex-col items-center justify-center min-h-[calc(100vh-8rem)]">
                <div class="w-full max-w-md">
                    <h1 class="text-3xl font-bold text-center mb-6" data-lang-key="registerTitle"></h1>

                    <!-- Tablar -->
                    <div class="flex justify-center border-b border-gray-700 mb-6">
                        <button id="email-register-tab" class="auth-tab w-1/2 py-3 font-semibold text-gray-400 active" data-lang-key="loginWithEmail"></button>
                        <button id="phone-register-tab" class="auth-tab w-1/2 py-3 font-semibold text-gray-400" data-lang-key="registerWithPhone"></button>
                    </div>

                    <!-- Email orqali ro'yxatdan o'tish -->
                    <div id="email-register-form-container">
                        <div class="bg-yellow-900/30 border border-yellow-700 text-yellow-300 px-4 py-3 rounded-lg relative mb-6" role="alert">
                          <strong class="font-bold" data-lang-key="registerWarningTitle"></strong>
                          <span class="block sm:inline" data-lang-key="registerWarningText"></span>
                        </div>
                        <form id="register-form">
                            <div class="space-y-4">
                                <div>
                                    <label for="register-name-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="fullName"></label>
                                    <input type="text" id="register-name-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" required>
                                </div>
                                <div>
                                    <label for="register-email-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="loginLabel"></label>
                                    <input type="email" id="register-email-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" required>
                                </div>
                                 <div>
                                    <label for="register-password-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="password"></label>
                                    <input type="password" id="register-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" required>
                                </div>
                                 <div>
                                    <label for="register-dob-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="dobLabel"></label>
                                    <input type="date" id="register-dob-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" required>
                                </div>
                                 <div>
                                    <label for="register-secret-input" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="secretWordLabel"></label>
                                    <input type="text" id="register-secret-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" data-lang-key="secretWordPlaceholder" required>
                                </div>
                                <p id="register-error" class="text-red-500 text-center text-sm h-4"></p>
                            </div>
                            <button type="submit" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="registerTitle"></span>
                            </button>
                        </form>
                    </div>

                    <!-- Telefon orqali ro'yxatdan o'tish -->
                    <div id="phone-register-form-container" class="hidden">
                        <div id="register-phone-entry-view">
                            <div class="space-y-4">
                               <label for="phone" class="block text-sm font-medium text-gray-400 mb-1" data-lang-key="phoneNumber"></label>
                               <div class="flex items-center border border-gray-700 rounded-lg focus-within:ring-1 focus-within:ring-red-500 focus-within:border-red-500 transition duration-200 bg-gray-800/50">
                                    <div class="relative">
                                        <select id="register-country-code" class="pl-3 pr-8 py-3 bg-transparent appearance-none cursor-pointer focus:outline-none text-gray-300">
                                            <!-- Davlatlar ro'yxati JavaScript orqali qo'shiladi -->
                                        </select>
                                         <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-400">
                                            <i class="fas fa-chevron-down text-xs"></i>
                                        </div>
                                    </div>
                                    <input type="tel" id="register-phone-number-input" class="w-full p-3 border-none bg-transparent focus:ring-0 text-white" placeholder="901234567" required>
                                </div>
                            </div>
                            <button id="register-send-code-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="sendCode"></span>
                            </button>
                        </div>
                        <div id="register-code-entry-view" class="hidden">
                             <div class="space-y-4">
                                <input type="text" id="register-verification-code-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 text-center tracking-[1em]" data-lang-key="verificationCode" placeholder="______" required maxlength="6">
                            </div>
                            <button id="register-verify-code-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors mt-6">
                                <span data-lang-key="verify"></span>
                            </button>
                        </div>
                    </div>

                    <p id="register-page-error" class="text-red-500 text-center text-sm h-4 mt-4"></p>

                    <p class="text-center text-sm text-gray-400 mt-6">
                        <span data-lang-key="alreadyHaveAccount"></span>
                        <button id="go-to-login-btn" class="font-semibold text-red-500 hover:text-red-400" data-lang-key="loginNow"></button>
                    </p>

                    <div id="register-recaptcha-container" class="flex justify-center mt-4"></div>
                </div>
            </div>
        `;
    }

    function renderSettingsPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="settings"></h1>
                </div>
                <div class="space-y-4">
                    <button id="edit-profile-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-user-edit w-6 text-center mr-3"></i><span data-lang-key="editProfile"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                    <button id="language-settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-language w-6 text-center mr-3"></i><span data-lang-key="language"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                    <button id="playback-settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-play-circle w-6 text-center mr-3"></i><span data-lang-key="playback"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                    <button id="content-settings-btn" class="w-full bg-gray-800/50 hover:bg-gray-700/50 text-white font-semibold py-4 px-5 rounded-lg transition-colors flex justify-between items-center text-left">
                        <span><i class="fas fa-eye w-6 text-center mr-3"></i><span data-lang-key="content"></span></span><i class="fas fa-chevron-right text-gray-500"></i>
                    </button>
                </div>
            </div>`;
    }

    function renderPrivacyPolicyPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="privacyTitle"></h1>
                </div>
                <p class="text-sm text-gray-500 mb-4" data-lang-key="privacyLastUpdated"></p>
                <div class="space-y-6 text-gray-300 leading-relaxed">
                    <div>
                        <h2 class="text-xl font-bold" data-lang-key="privacy1Title"></h2>
                        <p data-lang-key="privacy1Text"></p>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold" data-lang-key="privacy2Title"></h2>
                        <p data-lang-key="privacy2Text"></p>
                    </div>
                    <div>
                         <h2 class="text-xl font-bold" data-lang-key="privacy3Title"></h2>
                        <p data-lang-key="privacy3Text"></p>
                    </div>
                    <div>
                         <h2 class="text-xl font-bold" data-lang-key="privacy4Title"></h2>
                        <p data-lang-key="privacy4Text"></p>
                    </div>
                </div>
            </div>`;
    }

    function renderFaqPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="faqTitle"></h1>
                </div>
                <div class="space-y-6 text-gray-300">
                    <div>
                        <h2 class="text-xl font-bold mb-2" data-lang-key="faq1Title"></h2>
                        <p data-lang-key="faq1Answer"></p>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold mb-2" data-lang-key="faq2Title"></h2>
                        <p data-lang-key="faq2Answer"></p>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold mb-2" data-lang-key="faq3Title"></h2>
                        <p data-lang-key="faq3Answer"></p>
                    </div>
                </div>
            </div>`;
    }

    function renderPlaybackSettingsPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="playback"></h1>
                </div>
                <div class="bg-gray-800/50 rounded-lg p-5">
                    <!-- Mini player toggle -->
                    <div class="flex justify-between items-center">
                        <div>
                            <label for="mini-player-toggle" class="text-white font-semibold" data-lang-key="enableMiniPlayer"></label>
                            <p class="text-gray-400 text-sm mt-1" data-lang-key="miniPlayerHint"></p>
                        </div>
                        <div class="relative inline-block w-12 mr-2 align-middle select-none transition duration-200 ease-in">
                            <input type="checkbox" name="mini-player-toggle" id="mini-player-toggle" class="toggle-checkbox absolute block w-7 h-7 rounded-full bg-white border-4 appearance-none cursor-pointer" ${isMiniPlayerEnabled ? 'checked' : ''}/>
                            <label for="mini-player-toggle" class="toggle-label block overflow-hidden h-7 rounded-full bg-gray-600 cursor-pointer"></label>
                        </div>
                    </div>
                    <!-- Resume prompt toggle -->
                    <div class="flex justify-between items-center mt-4">
                        <div>
                            <label for="resume-prompt-toggle" class="text-white font-semibold" data-lang-key="enableResumePrompt"></label>
                            <p class="text-gray-400 text-sm mt-1" data-lang-key="resumePromptHint"></p>
                        </div>
                        <div class="relative inline-block w-12 mr-2 align-middle select-none transition duration-200 ease-in">
                            <input type="checkbox" name="resume-prompt-toggle" id="resume-prompt-toggle" class="toggle-checkbox absolute block w-7 h-7 rounded-full bg-white border-4 appearance-none cursor-pointer" ${isResumePromptEnabled ? 'checked' : ''}/>
                            <label for="resume-prompt-toggle" class="toggle-label block overflow-hidden h-7 rounded-full bg-gray-600 cursor-pointer"></label>
                        </div>
                    </div>
                </div>
            </div>`;
    }

    function renderEditProfilePage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="editProfile"></h1>
                </div>
                <div class="space-y-6">
                    <div>
                        <label for="username-input" class="block text-sm font-medium text-gray-400 mb-2" data-lang-key="name"></label>
                        <input type="text" id="username-input" value="${currentUser?.displayName || ''}" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition">
                    </div>
                    <div>
                        <label for="email-input-display" class="block text-sm font-medium text-gray-400 mb-2" data-lang-key="email"></label>
                        <input type="email" id="email-input-display" value="${currentUser?.email || ''}" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3" disabled>
                    </div>
                    <button id="save-profile-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg transition-colors">
                        <span data-lang-key="save"></span>
                    </button>
                </div>

                ${currentUser?.email ? `
                <div class="mt-8 pt-6 border-t border-gray-600">
                     <h2 class="text-xl font-bold mb-4" data-lang-key="changePassword"></h2>
                     <form id="change-password-form" class="space-y-4">
                        <input type="password" id="current-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3" data-lang-key="password" placeholder="Joriy parol" required>
                        <input type="password" id="new-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3" data-lang-key="newPassword" placeholder="Yangi parol" required>
                        <input type="password" id="confirm-password-input" class="w-full bg-gray-800/50 border border-gray-700 rounded-lg p-3" data-lang-key="confirmPassword" placeholder="Yangi parolni tasdiqlang" required>
                        <p id="password-error" class="text-red-500 text-sm h-4"></p>
                        <button type="submit" class="w-full bg-gray-700 hover:bg-gray-600 text-white font-bold py-3 px-6 rounded-lg transition-colors">
                            <span data-lang-key="changePassword"></span>
                        </button>
                     </form>
                </div>` : ''}
            </div>`;
    }

    function renderLanguageSettingsPage() {
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="languageSettingTitle"></h1>
                </div>
                <div class="flex flex-col space-y-3">
                    <button class="lang-btn text-left w-full p-4 rounded-md bg-gray-800/50 hover:bg-gray-700/50 transition-colors" data-lang="ru">Русский</button>
                    <button class="lang-btn text-left w-full p-4 rounded-md bg-gray-800/50 hover:bg-gray-700/50 transition-colors" data-lang="en">English</button>
                    <button class="lang-btn text-left w-full p-4 rounded-md bg-gray-800/50 hover:bg-gray-700/50 transition-colors" data-lang="uz">O'zbekcha</button>
                </div>
            </div>`;
    }

    function renderContentSettingsPage() {
        const show18Plus = JSON.parse(localStorage.getItem('soundora-show18plus')) || false;
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="contentSettingsTitle"></h1>
                </div>
                <div class="bg-gray-800/50 rounded-lg p-5 flex justify-between items-center">
                    <label for="content-toggle" class="text-white font-semibold" data-lang-key="show18Plus"></label>
                    <div class="relative inline-block w-12 mr-2 align-middle select-none transition duration-200 ease-in">
                        <input type="checkbox" name="content-toggle" id="content-toggle" class="toggle-checkbox absolute block w-7 h-7 rounded-full bg-white border-4 appearance-none cursor-pointer" ${show18Plus ? 'checked' : ''}/>
                        <label for="content-toggle" class="toggle-label block overflow-hidden h-7 rounded-full bg-gray-600 cursor-pointer"></label>
                    </div>
                </div>
            </div>`;
    }

    function renderPremiumPage() {
        const plans = [
            { months: 1, pricePerMonth: 199, tagKey: null },
            { months: 3, pricePerMonth: 169, tagKey: 'mostPopular' },
            { months: 7, pricePerMonth: 149, tagKey: null },
            { months: 12, pricePerMonth: 129, tagKey: 'bestValue' }
        ];

        const plansHTML = plans.map(plan => `
            <div class="bg-gray-700/50 rounded-lg p-4 relative">
                ${plan.tagKey ? `<div class="absolute top-0 -right-2 bg-red-600 text-white text-xs font-bold px-2 py-1 rounded-full" data-lang-key="${plan.tagKey}"></div>` : ''}
                <h3 class="text-xl font-bold" data-lang-key="plan${plan.months}Months"></h3>
                <p class="text-3xl font-black my-2">${plan.pricePerMonth} ₽<span class="text-base font-normal text-gray-400" data-lang-key="pricePerMonth"></span></p>
                <p class="text-sm text-gray-400"><span data-lang-key="total"></span>: ${plan.months * plan.pricePerMonth} ₽</p>
            </div>
        `).join('');

        // Build current subscription status card
        const isPremiumUser = currentUser?.isPremium;
        let statusHTML = '';
        if (isPremiumUser) {
            let expiresDate;
            const expiresData = currentUser?.premiumExpiresAt;
            try {
                if (expiresData && typeof expiresData.toDate === 'function') {
                    expiresDate = expiresData.toDate();
                } else if (expiresData?.seconds) {
                    expiresDate = new Date(expiresData.seconds * 1000);
                } else if (expiresData) {
                    expiresDate = new Date(expiresData);
                }
            } catch (err) {
                expiresDate = null;
            }
            let daysLeft = '';
            let expStr = '';
            if (expiresDate) {
                const diffMs = expiresDate.getTime() - Date.now();
                const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
                if (!isNaN(diffDays)) {
                    daysLeft = diffDays > 0 ? diffDays : 0;
                }
                expStr = expiresDate.toLocaleDateString();
            }
            const expLabel = translations[currentLanguage]?.expiresOn || 'Expires on';
            const daysLabel = translations[currentLanguage]?.daysLeft || 'days left';
            statusHTML = `<h2 class="text-2xl font-bold mb-2">${translations[currentLanguage]?.premium || 'Premium'}</h2><p class="text-gray-400">${expLabel}: ${expStr}${daysLeft !== '' ? ' (' + daysLeft + ' ' + daysLabel + ')' : ''}</p>`;
        } else {
            statusHTML = `<h2 class="text-2xl font-bold mb-2" data-lang-key="getPremium"></h2><p class="text-gray-400" data-lang-key="premiumHint"></p>`;
        }
        return `
            <div class="container mx-auto px-4 py-6">
                <div class="flex items-center mb-8">
                    <button id="back-button" class="text-2xl mr-4"><i class="fas fa-arrow-left"></i></button>
                    <h1 class="text-2xl md:text-4xl font-bold" data-lang-key="premium"></h1>
                </div>
                <!-- Promo code and status section -->
                <div class="md:flex md:gap-4 mb-8">
                    <!-- Promo code input -->
                    <div class="md:w-1/2 order-2 md:order-1 mb-6 md:mb-0">
                        <div class="bg-gray-800/50 rounded-lg p-6">
                            <h3 class="text-lg font-bold mb-2" data-lang-key="promoCode"></h3>
                            <input id="promo-code-input" type="text" class="w-full bg-gray-700/50 border border-gray-600 rounded-lg p-3 text-white focus:outline-none focus:border-red-500" placeholder="${translations[currentLanguage]?.enterPromoCode || 'Enter promo code'}">
                            <button id="redeem-promo-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors mt-4" data-lang-key="activatePromo"></button>
                            <p id="promo-feedback" class="text-sm mt-2"></p>
                        </div>
                    </div>
                    <!-- Status and hero -->
                    <div class="md:w-1/2 order-1 md:order-2">
                        <div class="bg-gray-800/50 rounded-lg p-6 text-center">
                            <i class="fas fa-crown text-5xl text-yellow-400 mb-4"></i>
                            ${statusHTML}
                        </div>
                    </div>
                </div>
                <!-- Plans and subscription steps (only for free users) -->
                ${!isPremiumUser ? `<div class="grid grid-cols-2 gap-4 mb-8">${plansHTML}</div><div class="bg-gray-800/50 rounded-lg p-6"><h3 class="text-lg font-bold mb-4" data-lang-key="howToSubscribe"></h3><ol class="list-decimal list-inside space-y-2 text-gray-300"><li data-lang-key="subscribeStep1"></li><li data-lang-key="subscribeStep2"></li><li data-lang-key="subscribeStep3"></li></ol></div>` : ''}
            </div>`;
    }

    function renderPlayerPage(state) {
        const movie = movies.find(m => m.id === String(state.movieId));
        if (!movie) return '';
        const episodeIndex = state.episodeIndex || 0;
        const sources = movie.type === 'series' && movie.episodes ? movie.episodes[episodeIndex].sources : movie.sources;
        if (!sources) { console.error("Video sources not found!"); return ''; }

        const episodesHTML = movie.type === 'series' && Array.isArray(movie.episodes) ? `
            <div id="episode-list-panel" class="fixed top-0 right-0 h-full w-full sm:w-80 bg-gray-900 shadow-lg z-50 transform translate-x-full lg:relative lg:translate-x-0 lg:w-80 lg:flex-shrink-0 flex flex-col">
                <div class="p-4 border-b border-gray-700 flex justify-between items-center">
                    <h3 class="text-lg font-bold" data-lang-key="episodes"></h3><button id="close-episodes-btn" class="lg:hidden text-2xl">&times;</button>
                </div>
                <div id="episode-list" class="flex-grow overflow-y-auto">
                    ${movie.episodes.map((ep, i) => `<div class="episode-item p-4 border-b border-gray-800 hover:bg-gray-700 cursor-pointer flex items-center space-x-4 ${i === episodeIndex ? 'active' : ''}" data-movie-id="${movie.id}" data-episode-index="${i}"><span class="text-red-400 font-bold w-8 text-center">${i + 1}</span><div class="flex-grow"><p data-lang-key="episode"></p></div><i class="fas fa-play text-gray-500"></i></div>`).join('')}
                </div>
            </div>` : '';

        return `
            <div class="w-full h-full flex flex-col lg:flex-row bg-black">
                <div class="flex-grow flex flex-col relative overflow-hidden">
                    <div id="player-container" class="player-container w-full h-full bg-black relative overflow-hidden">
                         <div id="player-loading-spinner" class="hidden absolute inset-0 z-30 flex items-center justify-center bg-transparent">
                             <div class="player-loader"></div>
                         </div>
                        <!-- Controls Panel -->
                        <div class="player-controls absolute inset-0 bg-gradient-to-t from-black/80 via-black/30 to-transparent flex flex-col justify-between p-4 z-20">
                            <div class="flex justify-between items-center">
                                <button id="player-back-button" class="bg-black/50 hover:bg-black/70 w-10 h-10 rounded-full text-white transition-colors"><i class="fas fa-arrow-left"></i></button>
                                <div><h3 class="text-white text-lg font-bold truncate max-w-[50vw]">${movie.title} ${movie.type === 'series' ? `- <span data-lang-key="episode"></span> ${episodeIndex + 1}` : ''}</h3></div>
                                <div class="flex items-center gap-4">
                                    <!-- Cast tugmasi qo'shildi -->
                                    <button id="cast-btn" class="text-white text-xl"><i class="fas fa-tv"></i></button>
                                    <button id="player-settings-btn" class="text-white text-xl"><i class="fas fa-cog"></i></button>
                                    ${movie.type === 'series' ? `<button id="toggle-episodes-btn" class="bg-black/50 hover:bg-black/70 w-10 h-10 rounded-full text-white transition-colors lg:hidden"><i class="fas fa-list-ul"></i></button>` : ''}
                                </div>
                            </div>

                            <!-- Center indicators and button -->
                            <div class="absolute inset-0 flex items-center justify-around pointer-events-none">
                                <div id="rewind-indicator" class="seek-indicator left-1/4"><i class="fas fa-undo"></i> -10s</div>
                                <div class="flex items-center gap-12 pointer-events-auto">
                                    <button id="center-play-btn" class="text-white text-5xl bg-black/40 rounded-full w-20 h-20 flex items-center justify-center hover:bg-black/60 transition-all"><i class="fas fa-play"></i></button>
                                    <button id="center-pause-btn" class="text-white text-5xl bg-black/40 rounded-full w-20 h-20 flex items-center justify-center hover:bg-black/60 transition-all hidden"><i class="fas fa-pause"></i></button>
                                </div>
                                <div id="forward-indicator" class="seek-indicator right-1/4">+10s <i class="fas fa-redo"></i></div>
                            </div>

                            <!-- Bottom controls -->
                            <div class="w-full">
                                <div class="flex items-center gap-2"><span id="current-time" class="text-white text-xs">00:00</span><input type="range" id="seek-bar" value="0" min="0" class="w-full"><span id="total-time" class="text-white text-xs">00:00</span></div>
                                <div class="flex justify-between items-center mt-2">
                                    <div class="flex items-center gap-4">
                                        <button id="play-pause-btn" class="text-white text-2xl w-8 text-center"><i class="fas fa-play"></i></button>
                                        <button id="volume-btn" class="text-white text-xl w-8 text-center"><i class="fas fa-volume-up"></i></button>
                                    </div>
                                    <button id="fullscreen-btn" class="text-white text-xl w-8 text-center"><i class="fas fa-expand"></i></button>
                                </div>
                            </div>
                        </div>
                        <!-- Settings Panel -->
                        <div id="player-settings-panel">
                            <div id="settings-main-view">
                                <div class="p-4 border-b border-gray-700/50 flex items-center">
                                    <h3 class="font-bold text-lg" data-lang-key="playerSettings"></h3>
                                </div>
                                <div class="flex-grow overflow-y-auto">
                                    <div id="quality-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-high-definition"></i> <span data-lang-key="quality"></span></div> <div class="flex items-center gap-2"><span id="current-quality-label" class="text-gray-400 text-sm">720p</span><i class="fas fa-chevron-right text-gray-500"></i></div></div>
                                    <div id="speed-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-tachometer-alt"></i> <span data-lang-key="playbackSpeed"></span></div> <div class="flex items-center gap-2"><span id="current-speed-label" class="text-gray-400 text-sm" data-lang-key="normalSpeed"></span><i class="fas fa-chevron-right text-gray-500"></i></div></div>
                                    <!-- Audio settings: foydalanuvchi uchun audio trekni tanlash -->
                                    <div id="audio-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-headphones"></i> <span>Audio</span></div> <div class="flex items-center gap-2"><span id="current-audio-label" class="text-gray-400 text-sm">Auto</span><i class="fas fa-chevron-right text-gray-500"></i></div></div>
                                    <div id="subtitles-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-closed-captioning"></i> <span data-lang-key="subtitles"></span></div> <div class="flex items-center gap-2"><span id="current-subtitle-label" class="text-gray-400 text-sm" data-lang-key="noSubtitles"></span><i class="fas fa-chevron-right text-gray-500"></i></div></div>
                                    <div id="more-settings-btn" class="settings-item"><div class="flex items-center gap-4"><i class="fas fa-ellipsis-h"></i> <span data-lang-key="more"></span></div> <i class="fas fa-chevron-right text-gray-500"></i></div>
                                </div>
                            </div>
                            <div id="settings-quality-view" class="hidden flex-grow flex-col"></div>
                            <div id="settings-speed-view" class="hidden flex-grow flex-col"></div>
                            <!-- Audio settings view container -->
                            <div id="settings-audio-view" class="hidden flex-grow flex-col"></div>
                            <div id="settings-subtitles-view" class="hidden flex-grow flex-col"></div>
                            <div id="settings-more-view" class="hidden flex-grow flex-col"></div>
                        </div>
                    </div>
                </div>
                ${episodesHTML}
            </div>`;
    }


    function setupPageEventListeners(state) {
        const pageContainer = document.getElementById(state.page);
        if (!pageContainer) return;

        const pageId = state.page;
        if (pageId === 'main') {
            if (movies.length > 0) {
                populateCategories();
                const activeCategoryButton = document.querySelector('#category-nav .category-btn.active');
                const currentCategory = activeCategoryButton ? activeCategoryButton.dataset.categoryValue : 'categoryAll';
                filterAndDisplayMovies(currentCategory);
            }
        } else if (pageId === 'movie-details') {
            // Back button
            const backBtn = pageContainer.querySelector('#back-button');
            backBtn?.addEventListener('click', () => history.back());
            // Episode items (if series controls rendered)
            pageContainer.querySelectorAll('.episode-item').forEach(item => item.addEventListener('click', handlePlayClick));
            // Favorite button
            pageContainer.querySelector('#fav-button')?.addEventListener('click', handleFavoriteClick);
            // Download button
            pageContainer.querySelector('#download-button')?.addEventListener('click', handleDownloadClick);
            // SND rating button event
            const rateBtn = pageContainer.querySelector('#snd-rate-btn');
            if (rateBtn) {
                rateBtn.addEventListener('click', () => {
                    openRatingModal(state.movieId);
                });
            }
            // Cast button event
            const castBtn = pageContainer.querySelector('#cast-button');
            if (castBtn) {
                castBtn.addEventListener('click', requestCastingSession);
            }
            // Info tab buttons (description, actors, rating)
            const tabButtons = pageContainer.querySelectorAll('.info-tab-btn');
            tabButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    const tab = btn.dataset.tab;
                    // update active classes on buttons
                    tabButtons.forEach(b => {
                        b.classList.remove('bg-red-600', 'active');
                        b.classList.add('bg-gray-800');
                    });
                    btn.classList.remove('bg-gray-800');
                    btn.classList.add('bg-red-600', 'active');
                    // hide all sections
                    pageContainer.querySelectorAll('.info-tab-content').forEach(div => div.classList.add('hidden'));
                    const section = pageContainer.querySelector(`#info-${tab}`);
                    section?.classList.remove('hidden');
                    // If the rating tab is activated, animate the rating bars to their final widths
                    if (tab === 'rating' && section) {
                        const bars = section.querySelectorAll('.rating-bar-fill');
                        bars.forEach(bar => {
                            const finalWidth = bar.dataset.final || '0';
                            // Reset width to 0 then animate to final width after a tiny delay
                            bar.style.width = '0%';
                            setTimeout(() => {
                                bar.style.width = `${finalWidth}%`;
                            }, 10);
                        });
                    }
                });
            });
            // Initialize series controls for series-type movies on mobile
            initializeSeriesControls(state.movieId);

            // Video control panel events for the sticky card
            const videoEl = pageContainer.querySelector('#card-video');
            // Overlays and controls
            const centerOverlay = pageContainer.querySelector('#card-center-overlay');
            const bottomControls = pageContainer.querySelector('#card-bottom-controls');
            const progress = pageContainer.querySelector('#card-progress');
            const currentTimeEl = pageContainer.querySelector('#card-current-time');
            const durationEl = pageContainer.querySelector('#card-duration');
            const playPauseBtn = pageContainer.querySelector('#card-play-pause-button');
            const speedIndicator = pageContainer.querySelector('#card-speed-indicator');
            const fullscreenBtn = pageContainer.querySelector('#card-fullscreen-button');
            const settingsTopBtn = pageContainer.querySelector('#card-settings-button');
            const settingsMenu = pageContainer.querySelector('#card-settings-menu');
            const miniToggle = pageContainer.querySelector('#card-mini-toggle');

            // Format time helper for video controls
            const formatTime = (secs) => {
                if (secs === undefined || secs === null || isNaN(secs)) return '00:00';
                const m = Math.floor(secs / 60);
                const s = Math.floor(secs % 60);
                return `${String(m).padStart(2, '0')}:${String(s).padStart(2, '0')}`;
            };

            // Show/hide overlay and bottom controls
            let hideControlsTimeout;
            const showControls = () => {
                if (centerOverlay) centerOverlay.classList.remove('hidden');
                if (bottomControls) bottomControls.classList.remove('hidden');
                // reset hide timer
                if (hideControlsTimeout) clearTimeout(hideControlsTimeout);
                hideControlsTimeout = setTimeout(() => {
                    if (centerOverlay) centerOverlay.classList.add('hidden');
                    if (bottomControls) bottomControls.classList.add('hidden');
                }, 5000);
            };
            const hideControls = () => {
                if (centerOverlay) centerOverlay.classList.add('hidden');
                if (bottomControls) bottomControls.classList.add('hidden');
                if (hideControlsTimeout) clearTimeout(hideControlsTimeout);
            };

            // Double tap and hold detection variables
            let lastTapTime = 0;
            let holdTimeout;
            let isHolding = false;

            // Resume handling logic will be applied after video element is initialized

            if (videoEl) {
                // Check for saved position and whether returning from the full player
                if (state.movieId) {
                    try {
                        const savedTimeRaw2 = localStorage.getItem(`soundora-play-position-${state.movieId}`);
                        const savedPos = savedTimeRaw2 ? parseFloat(savedTimeRaw2) : 0;
                        if (savedPos && savedPos > 0.1 && !isNaN(savedPos)) {
                            const returningFlag = sessionStorage.getItem('returnFromPlayer');
                            if (returningFlag === 'true') {
                                // If returning from full player, automatically resume at saved position and pause
                                videoEl.currentTime = savedPos;
                                videoEl.pause();
                                sessionStorage.removeItem('returnFromPlayer');
                                // Show controls to indicate position
                                showControls();
                            } else if (isResumePromptEnabled && !miniPlayerState.active) {
                                // Automatically resume from saved position without showing any overlay
                                videoEl.currentTime = savedPos;
                                videoEl.play();
                                showControls();
                            }
                        }
                    } catch (err) {}
                }

                // Ensure audio not muted by default
                videoEl.muted = false;
                // On loaded metadata, set duration
                videoEl.addEventListener('loadedmetadata', () => {
                    progress.max = videoEl.duration || 0;
                    durationEl.textContent = formatTime(videoEl.duration || 0);
                    currentTimeEl.textContent = formatTime(videoEl.currentTime || 0);
                });
                // Update current time, progress bar and save position
                videoEl.addEventListener('timeupdate', () => {
                    if (!isNaN(videoEl.currentTime)) {
                        progress.value = videoEl.currentTime;
                        currentTimeEl.textContent = formatTime(videoEl.currentTime);
                        // Persist current position to allow resume later
                        try {
                            if (state.movieId) {
                                localStorage.setItem(`soundora-play-position-${state.movieId}`, videoEl.currentTime);
                            }
                        } catch (err) {}
                    }
                });
                // Play/pause overlay behaviour: update icon on play/pause events
                const updatePlayIcon = () => {
                    if (!playPauseBtn) return;
                    if (videoEl.paused) {
                        playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
                    } else {
                        playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
                    }
                };
                videoEl.addEventListener('play', updatePlayIcon);
                videoEl.addEventListener('pause', updatePlayIcon);
                // Progress slider input sets current time
                progress?.addEventListener('input', () => {
                    try {
                        videoEl.currentTime = parseFloat(progress.value);
                    } catch (err) {}
                });
                // Play/Pause button click toggles play
                playPauseBtn?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    if (videoEl.paused) {
                        videoEl.play();
                    } else {
                        videoEl.pause();
                    }
                    showControls();
                });
                // Fullscreen button to open full player
                fullscreenBtn?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    // Save current playback position before navigating to full player
                    try {
                        const movieId = state.movieId;
                        if (videoEl && movieId) {
                            localStorage.setItem(`soundora-play-position-${movieId}`, videoEl.currentTime);
                        }
                    } catch (err) {}
                    handlePlayClick(e);
                });

                // When video plays or pauses, adjust control visibility
                videoEl.addEventListener('pause', () => {
                    // Show controls and keep overlay visible while paused
                    showControls();
                    if (hideControlsTimeout) clearTimeout(hideControlsTimeout);
                });
                videoEl.addEventListener('play', () => {
                    // Show controls and allow auto-hide after delay
                    showControls();
                });

                // Show controls on tap/click
                const handleTap = (event) => {
                    const now = Date.now();
                    const rect = videoEl.getBoundingClientRect();
                    const x = event instanceof TouchEvent ? event.touches[0].clientX : event.clientX;
                    const isDoubleTap = now - lastTapTime < 300;
                    lastTapTime = now;
                    if (isDoubleTap) {
                        // Determine left or right half
                        if (x < rect.left + rect.width / 2) {
                            // skip back 10 seconds
                            try {
                                videoEl.currentTime = Math.max(videoEl.currentTime - 10, 0);
                            } catch (err) {}
                        } else {
                            // skip forward 10 seconds
                            try {
                                const dur = videoEl.duration || 0;
                                const newTime = videoEl.currentTime + 10;
                                videoEl.currentTime = dur ? Math.min(newTime, dur) : newTime;
                            } catch (err) {}
                        }
                        showControls();
                    } else {
                        showControls();
                    }
                };

                // Hold detection for 2x speed on card (touch or mouse)
                const startHold = () => {
                    if (holdTimeout) clearTimeout(holdTimeout);
                    holdTimeout = setTimeout(() => {
                        isHolding = true;
                        videoEl.playbackRate = 2;
                        if (speedIndicator) {
                            speedIndicator.style.opacity = '1';
                        }
                    }, 300); // start 2x after long press of 300ms
                };
                const endHold = () => {
                    if (holdTimeout) clearTimeout(holdTimeout);
                    if (isHolding) {
                        isHolding = false;
                        videoEl.playbackRate = 1;
                        if (speedIndicator) {
                            speedIndicator.style.opacity = '0';
                        }
                    }
                };

                // Bind events for tap, hold
                videoEl.addEventListener('click', handleTap);
                videoEl.addEventListener('touchend', handleTap);
                videoEl.addEventListener('mousedown', startHold);
                videoEl.addEventListener('touchstart', startHold);
                videoEl.addEventListener('mouseup', endHold);
                videoEl.addEventListener('mouseleave', endHold);
                videoEl.addEventListener('touchend', endHold);
                videoEl.addEventListener('touchcancel', endHold);
            }

            // Toggle settings menu on settings button
            settingsTopBtn?.addEventListener('click', (e) => {
                e.stopPropagation();
                if (settingsMenu) {
                    settingsMenu.classList.toggle('hidden');
                }
            });
            // Close settings when clicking outside the menu
            pageContainer.addEventListener('click', (e) => {
                // If click is outside settings button and menu
                if (settingsMenu && !settingsMenu.classList.contains('hidden')) {
                    const btnElem = settingsTopBtn;
                    if (btnElem && !btnElem.contains(e.target) && !settingsMenu.contains(e.target)) {
                        settingsMenu.classList.add('hidden');
                    }
                }
            }, true);
            // Set mini player toggle state from persistent setting
            if (miniToggle) {
                miniToggle.checked = isMiniPlayerEnabled;
                miniToggle.addEventListener('change', (e) => {
                    isMiniPlayerEnabled = e.target.checked;
                    localStorage.setItem('soundora-miniPlayerEnabled', JSON.stringify(isMiniPlayerEnabled));
                });
            }

            // Handle clicks on settings rows inside the video card. Each row shows a toast
            // or performs simple logic when tapped.
            if (pageId === 'movie-details' && settingsMenu) {
                const qualityRow = pageContainer.querySelector('#card-settings-quality-row');
                const speedRow   = pageContainer.querySelector('#card-settings-speed-row');
                const subRow     = pageContainer.querySelector('#card-settings-subtitles-row');
                const lockRow    = pageContainer.querySelector('#card-settings-screenlock-row');
                const moreRow    = pageContainer.querySelector('#card-settings-more-row');
                // Implement quality and speed selection logic for the card video.
                // Retrieve the movie and sources dynamically so we don't rely on closures.
                qualityRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    // Determine current movie id from dataset attributes
                    const movieId = e.currentTarget.closest('[data-movie-id]')?.dataset?.movieId || (state && state.movieId);
                    const movie    = movies.find(m => m.id === String(movieId));
                    if (!movie) { showToast('Sources unavailable'); return; }
                    const epIdx    = (state && state.episodeIndex) || 0;
                    const sources  = movie.type === 'series' && movie.episodes ? movie.episodes[epIdx].sources : movie.sources;
                    if (!sources) { showToast('Sources unavailable'); return; }
                    const qualities = Object.keys(sources).filter(q => sources[q]);
                    // Simple prompt-based selector; you may replace with a modal for better UX.
                    const choice   = prompt('Select quality (' + qualities.join(', ') + '):', qualities[0]);
                    if (choice && sources[choice]) {
                        const videoEl    = pageContainer.querySelector('#card-video');
                        if (videoEl) {
                            const currentTime = videoEl.currentTime;
                            videoEl.src       = sources[choice];
                            videoEl.currentTime = currentTime;
                            videoEl.play();
                            const labelEl = document.getElementById('card-settings-quality');
                            if (labelEl) labelEl.textContent = choice;
                        }
                    }
                });
                speedRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    const videoEl = pageContainer.querySelector('#card-video');
                    if (!videoEl) { showToast('Video unavailable'); return; }
                    // Provide common playback rates
                    const speeds  = [0.5, 0.75, 1, 1.5, 2];
                    const current = videoEl.playbackRate || 1;
                    const choice  = prompt('Select speed (' + speeds.join(', ') + '):', current);
                    const newRate = parseFloat(choice);
                    if (!isNaN(newRate)) {
                        videoEl.playbackRate = newRate;
                        const labelEl = document.getElementById('card-settings-speed');
                        if (labelEl) {
                            labelEl.textContent = (newRate === 1 ? translations[currentLanguage].normalSpeed : `${newRate}x`);
                        }
                    }
                });
                // Subtitles, screen lock and more rows remain placeholders for now
                subRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    showToast('Subtitles are not available.');
                });
                lockRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    showToast('Screen lock is not available.');
                });
                moreRow?.addEventListener('click', (e) => {
                    e.stopPropagation();
                    showToast('More options coming soon.');
                });
            }

            // Bind fullscreen button. If video is present, open full player; otherwise, use fallback
            const fullscreenButton = pageContainer.querySelector('#card-fullscreen-button');
            if (fullscreenButton) {
                fullscreenButton.addEventListener('click', (e) => {
                    e.stopPropagation();
                    // If video exists, navigate to full player page using movieId and episodeIndex
                    if (videoEl) {
                        const movieId = e.currentTarget.dataset.movieId || ((state && state.movieId) ? state.movieId : undefined);
                        const epIndex = e.currentTarget.dataset.episodeIndex ? parseInt(e.currentTarget.dataset.episodeIndex, 10) : ((state && state.episodeIndex) || 0);
                        if (movieId) {
                            navigate({ page: 'player', movieId: movieId, episodeIndex: epIndex });
                        }
                    } else {
                        // Fallback for image-based card
                        handlePlayClick(e);
                    }
                });
            }
        } else if (pageId === 'favorites') {
            pageContainer.querySelectorAll('.movie-card-link').forEach(card => card.addEventListener('click', handleMovieCardClick));
        } else if (pageId === 'downloads') {
            // Attach movie card click handlers on downloads page
            pageContainer.querySelectorAll('.movie-card-link').forEach(card => card.addEventListener('click', handleMovieCardClick));
        } else if (pageId === 'profile') {
            pageContainer.querySelector('#settings-btn').addEventListener('click', () => navigate({ page: 'settings' }));
            pageContainer.querySelector('#premium-btn').addEventListener('click', () => navigate({ page: 'premium' }));
            pageContainer.querySelector('#privacy-policy-btn').addEventListener('click', () => navigate({ page: 'privacy-policy' }));
            pageContainer.querySelector('#faq-btn').addEventListener('click', () => navigate({ page: 'faq' }));
            pageContainer.querySelector('#copy-id-btn').addEventListener('click', copyUserId);
            pageContainer.querySelector('#profile-ai-chat-btn').addEventListener('click', showAiChatModal);
            // New account switch and logout handlers
            const switchTop = pageContainer.querySelector('#switch-account-btn');
            const switchBottom = pageContainer.querySelector('#switch-account-btn-bottom');
            const logoutBottom = pageContainer.querySelector('#logout-btn-bottom');
            switchTop?.addEventListener('click', openAccountSwitchModal);
            switchBottom?.addEventListener('click', openAccountSwitchModal);
            logoutBottom?.addEventListener('click', handleLogout);
            // Backwards compatibility for existing logout button
            pageContainer.querySelector('#logout-btn')?.addEventListener('click', handleLogout);

            // Navigate to Downloads page when the downloads button is clicked
            pageContainer.querySelector('#downloads-btn')?.addEventListener('click', () => navigate({ page: 'downloads' }));
        } else if (pageId === 'guest-profile') {
            pageContainer.querySelector('#guest-ai-chat-btn').addEventListener('click', showAiChatModal);
            pageContainer.querySelector('#guest-login-btn').addEventListener('click', () => navigate({ page: 'login' }));
        } else if (pageId === 'login') {
            populateCountrySelector('login-country-code');
            // Email login
            pageContainer.querySelector('#login-form').addEventListener('submit', handleLoginSubmit);
            pageContainer.querySelector('#go-to-register-btn').addEventListener('click', () => navigate({ page: 'register' }));

            // Phone login
            pageContainer.querySelector('#send-code-btn').addEventListener('click', () => handleSendCode('login'));
            pageContainer.querySelector('#verify-code-btn').addEventListener('click', () => handleVerifyCode('login'));

            // Tab switching
            const emailTab = pageContainer.querySelector('#email-login-tab');
            const phoneTab = pageContainer.querySelector('#phone-login-tab');
            const emailForm = pageContainer.querySelector('#email-login-form-container');
            const phoneForm = pageContainer.querySelector('#phone-login-form-container');

            emailTab.addEventListener('click', () => {
                emailTab.classList.add('active');
                phoneTab.classList.remove('active');
                emailForm.classList.remove('hidden');
                phoneForm.classList.add('hidden');
            });
            phoneTab.addEventListener('click', () => {
                phoneTab.classList.add('active');
                emailTab.classList.remove('active');
                phoneForm.classList.remove('hidden');
                emailForm.classList.add('hidden');
            });

        } else if (pageId === 'register') {
            populateCountrySelector('register-country-code');
            // Email register
            pageContainer.querySelector('#register-form').addEventListener('submit', handleRegisterSubmit);
            pageContainer.querySelector('#go-to-login-btn').addEventListener('click', () => navigate({ page: 'login' }));

            // Phone register
            pageContainer.querySelector('#register-send-code-btn').addEventListener('click', () => handleSendCode('register'));
            pageContainer.querySelector('#register-verify-code-btn').addEventListener('click', () => handleVerifyCode('register'));

            // Tab switching
            const emailTab = pageContainer.querySelector('#email-register-tab');
            const phoneTab = pageContainer.querySelector('#phone-register-tab');
            const emailForm = pageContainer.querySelector('#email-register-form-container');
            const phoneForm = pageContainer.querySelector('#phone-register-form-container');

            emailTab.addEventListener('click', () => {
                emailTab.classList.add('active');
                phoneTab.classList.remove('active');
                emailForm.classList.remove('hidden');
                phoneForm.classList.add('hidden');
            });
            phoneTab.addEventListener('click', () => {
                phoneTab.classList.add('active');
                emailTab.classList.remove('active');
                phoneForm.classList.remove('hidden');
                emailForm.classList.add('hidden');
            });

        } else if (pageId === 'settings') {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            pageContainer.querySelector('#edit-profile-btn').addEventListener('click', () => navigate({ page: 'edit-profile' }));
            pageContainer.querySelector('#language-settings-btn').addEventListener('click', () => navigate({ page: 'language-settings' }));
            pageContainer.querySelector('#playback-settings-btn').addEventListener('click', () => navigate({ page: 'playback-settings' }));
            pageContainer.querySelector('#content-settings-btn').addEventListener('click', () => navigate({ page: 'content-settings' }));
        } else if (pageId === 'playback-settings') {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            // Mini-player toggle change handler
            pageContainer.querySelector('#mini-player-toggle').addEventListener('change', (e) => {
                isMiniPlayerEnabled = e.target.checked;
                localStorage.setItem('soundora-miniPlayerEnabled', JSON.stringify(isMiniPlayerEnabled));
            });
            // Resume prompt toggle change handler
            const resumeToggle = pageContainer.querySelector('#resume-prompt-toggle');
            if (resumeToggle) {
                resumeToggle.addEventListener('change', (e) => {
                    isResumePromptEnabled = e.target.checked;
                    localStorage.setItem('soundora-resumePromptEnabled', JSON.stringify(isResumePromptEnabled));
                });
            }
        } else if (['privacy-policy', 'faq', 'premium'].includes(pageId)) {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            // Setup promo code redemption on premium page
            if (pageId === 'premium') {
                const redeemBtn = pageContainer.querySelector('#redeem-promo-btn');
                redeemBtn?.addEventListener('click', async () => {
                    const inputEl = pageContainer.querySelector('#promo-code-input');
                    const feedbackEl = pageContainer.querySelector('#promo-feedback');
                    if (!inputEl || !feedbackEl) return;
                    const code = inputEl.value.trim();
                    feedbackEl.className = 'text-sm mt-2';
                    feedbackEl.textContent = '';
                    if (!code) {
                        feedbackEl.textContent = 'Введите промокод';
                        feedbackEl.classList.add('text-red-500');
                        return;
                    }
                    try {
                        if (!(currentUser && currentUser.uid)) {
                            feedbackEl.textContent = 'Авторизуйтесь, чтобы активировать';
                            feedbackEl.classList.add('text-red-500');
                            return;
                        }
                        // Promo codes are stored in Firestore using the code itself as the document ID.
                        // Therefore, fetch the document directly by its ID and ensure it hasn't been used yet.
                        const promoRef = doc(db, 'promo_codes', code);
                        const promoDocSnap = await getDoc(promoRef);
                        if (!promoDocSnap.exists()) {
                            feedbackEl.textContent = 'Неверный или использованный код';
                            feedbackEl.classList.add('text-red-500');
                            return;
                        }
                        const promoData = promoDocSnap.data();
                        // For multi-use promo codes, check usage limits
                        const maxUses = promoData.maxUses || 1;
                        const usedCount = promoData.usedCount || 0;
                        const usedBy = Array.isArray(promoData.usedBy) ? promoData.usedBy : (promoData.usedBy ? [promoData.usedBy] : []);
                        // If the promo is flagged as used or usage limit reached, treat as invalid
                        if (promoData.used || usedCount >= maxUses) {
                            feedbackEl.textContent = 'Неверный или использованный код';
                            feedbackEl.classList.add('text-red-500');
                            return;
                        }
                        // Prevent the same user from redeeming the same code multiple times
                        if (usedBy.includes(currentUser.uid)) {
                            feedbackEl.textContent = 'Вы уже использовали этот промокод';
                            feedbackEl.classList.add('text-red-500');
                            return;
                        }
                        // Determine duration in milliseconds
                        let ms = 0;
                        switch (promoData.duration) {
                            case '3d': ms = 3 * 24 * 60 * 60 * 1000; break;
                            case '1m': ms = 30 * 24 * 60 * 60 * 1000; break;
                            case '3m': ms = 90 * 24 * 60 * 60 * 1000; break;
                            case '7m': ms = 210 * 24 * 60 * 60 * 1000; break;
                            case '12m': ms = 365 * 24 * 60 * 60 * 1000; break;
                            default: ms = 0; break;
                        }
                        const expiresAtDate = new Date(Date.now() + ms);
                        // Update user doc with premium status and expiry
                        await updateDoc(doc(db, 'users', currentUser.uid), { isPremium: true, premiumExpiresAt: expiresAtDate });
                        // Increment usage count and record the user; mark as used if limit reached
                        const newCount = usedCount + 1;
                        const newUsed = newCount >= maxUses;
                        await updateDoc(promoRef, {
                            usedCount: newCount,
                            used: newUsed,
                            usedBy: arrayUnion(currentUser.uid),
                            usedAt: serverTimestamp()
                        });
                        currentUser.isPremium = true;
                        feedbackEl.textContent = 'Промокод активирован!';
                        feedbackEl.classList.add('text-green-500');
                        showToast('Премиум активирован!', false);
                    } catch (e) {
                        console.error('Error redeeming promo code', e);
                        feedbackEl.textContent = 'Ошибка, попробуйте позже';
                        feedbackEl.classList.add('text-red-500');
                    }
                });
            }
        } else if (['language-settings', 'content-settings'].includes(pageId)) {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            if (pageId === 'language-settings') {
                pageContainer.querySelectorAll('.lang-btn').forEach(btn => btn.addEventListener('click', (e) => setLanguage(e.currentTarget.dataset.lang)));
            }
            if (pageId === 'content-settings') {
                pageContainer.querySelector('#content-toggle').addEventListener('change', (e) => {
                    localStorage.setItem('soundora-show18plus', e.target.checked);
                });
            }
        } else if (pageId === 'edit-profile') {
            pageContainer.querySelector('#back-button').addEventListener('click', () => history.back());
            pageContainer.querySelector('#save-profile-btn').addEventListener('click', handleSaveProfile);
            const changePasswordForm = pageContainer.querySelector('#change-password-form');
            if (changePasswordForm) {
                changePasswordForm.addEventListener('submit', handleChangePassword);
            }
        } else if (pageId === 'player') {
            setupPlayerControls(state);
        }
    }

    function handleMovieCardClick(e) { e.preventDefault(); navigate({ page: 'movie-details', movieId: e.currentTarget.dataset.movieId }); }

    async function handleFavoriteClick(e) {
        e.stopPropagation();
        if (!currentUser) {
            showToast(translations[currentLanguage].loginRequired);
            postLoginRedirect = { page: 'movie-details', movieId: e.currentTarget.dataset.movieId };
            navigate({ page: 'login' });
            return;
        }
        const button = e.currentTarget;
        button.disabled = true;
        const movieId = button.dataset.movieId;
        const userRef = doc(db, "users", currentUser.uid);
        const newFavorites = [...(currentUser.favorites || [])];
        const index = newFavorites.indexOf(movieId);

        if (index > -1) newFavorites.splice(index, 1);
        else newFavorites.push(movieId);

        try {
            await updateDoc(userRef, { favorites: newFavorites });
            showToast(index > -1 ? translations[currentLanguage].removeFromFavorites : translations[currentLanguage].addToFavorites);
        } catch (error) {
            console.error("Error updating favorites:", error);
        } finally {
            button.disabled = false;
        }
    }

    function handlePlayClick(e) {
        const movieId = e.currentTarget.dataset.movieId;
        const episodeIndex = e.currentTarget.dataset.episodeIndex;
        const targetState = { page: 'player', movieId: movieId, episodeIndex: episodeIndex ? parseInt(episodeIndex, 10) : 0 };

        const movie = movies.find(m => m.id === String(movieId));
        if (!movie) return;

        if (!currentUser) {
            postLoginRedirect = targetState;
            showToast(translations[currentLanguage].loginRequired);
            navigate({ page: 'login' });
            return;
        }

        if (movie.isPremium && !currentUser.isPremium) {
            showPremiumRequiredModal();
            return;
        }

        if(miniPlayerState.active && miniPlayerState.state.movieId === movieId) {
            hideMiniPlayer();
        }
        navigate(targetState);
    }

    async function handleLoginSubmit(e) {
        e.preventDefault();
        const email = document.getElementById('login-email-input').value;
        const password = document.getElementById('login-password-input').value;
        const errorEl = document.getElementById('login-error');
        errorEl.textContent = '';
        loadingOverlay.classList.remove('hidden');

        try {
            await signInWithEmailAndPassword(auth, email, password);

            // After successful login, store or update account info including password for quick switch
            try {
                const user = auth.currentUser;
                if (user) {
                    const accounts = JSON.parse(localStorage.getItem('soundora-accounts')) || [];
                    // remove existing record for this uid
                    const filtered = accounts.filter(acc => acc.uid !== user.uid);
                    filtered.push({
                        uid: user.uid,
                        displayName: user.displayName,
                        email: user.email,
                        phoneNumber: user.phoneNumber,
                        password: password
                    });
                    localStorage.setItem('soundora-accounts', JSON.stringify(filtered));
                }
            } catch (e) {
                console.error('Error updating account list on login', e);
            }
        } catch (error) {
            errorEl.textContent = translations[currentLanguage].invalidCredentials;
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    // --- Telefon raqami orqali kirish/ro'yxatdan o'tish funksiyalari ---
    function setupRecaptcha(containerId) {
        const recaptchaContainer = document.getElementById(containerId);
        if (!recaptchaContainer) {
            console.error("reCAPTCHA container not found:", containerId);
            return;
        }
        // Oldingi verifierni tozalash
        if (window.recaptchaVerifier && window.recaptchaVerifier.clear) {
            window.recaptchaVerifier.clear();
        }

        window.recaptchaVerifier = new RecaptchaVerifier(auth, containerId, {
            'size': 'invisible',
            'callback': (response) => {
                // reCAPTCHA solved, allow signInWithPhoneNumber.
            },
            'expired-callback': () => {
                // Response expired. Ask user to solve reCAPTCHA again.
                showToast("reCAPTCHA muddati tugadi. Qaytadan urining.", true);
            }
        });
        window.recaptchaVerifier.render(); // reCAPTCHAni darhol ishga tushirish
    }

    // Davlat tanlash menyusini to'ldirish
    function populateCountrySelector(selectId) {
        const selectElement = document.getElementById(selectId);
        if (!selectElement) return;
        selectElement.innerHTML = ''; // Oldingi optionlarni tozalash
        countries.forEach(country => {
            const option = document.createElement('option');
            option.value = country.code;
            option.textContent = `${country.flag} ${country.code}`;
            // Set Russia (+7) as the default selection instead of Uzbekistan
            if (country.code === '+7') {
                option.selected = true;
            }
            selectElement.appendChild(option);
        });
    }

    async function handleSendCode(pageType) { // pageType: 'login' or 'register'
        const countryCode = document.getElementById(`${pageType}-country-code`).value;
        const phoneNumberInput = document.getElementById(`${pageType}-phone-number-input`);
        const errorEl = document.getElementById(pageType === 'login' ? 'login-error' : 'register-page-error');
        const phoneNumber = countryCode + phoneNumberInput.value.replace(/\D/g, '');
        errorEl.textContent = '';

        if (phoneNumber.length < 10) { // Umumiyroq tekshiruv
            errorEl.textContent = translations[currentLanguage].invalidPhoneNumber;
            return;
        }

        loadingOverlay.classList.remove('hidden');
        setupRecaptcha(pageType === 'login' ? 'recaptcha-container' : 'register-recaptcha-container');
        const appVerifier = window.recaptchaVerifier;

        try {
            window.confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, appVerifier);
            showToast(translations[currentLanguage].smsSent);
            document.getElementById(`${pageType}-phone-entry-view`).classList.add('hidden');
            document.getElementById(`${pageType}-code-entry-view`).classList.remove('hidden');
            document.getElementById(`${pageType}-verification-code-input`).focus();
        } catch (error) {
            console.error("SMS yuborishda xatolik:", error);
            if (error.code === 'auth/operation-not-allowed') {
                 errorEl.textContent = "SMS yuborish uchun ruxsat yo'q. Administrator bilan bog'laning.";
            } else {
                 errorEl.textContent = "SMS yuborishda xatolik. Qaytadan urining.";
            }
            if (window.recaptchaVerifier) {
                window.recaptchaVerifier.render().then(widgetId => {
                    grecaptcha.reset(widgetId);
                });
            }
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    async function handleVerifyCode(pageType) {
        const codeInput = document.getElementById(`${pageType}-verification-code-input`);
        const code = codeInput.value;
        const errorEl = document.getElementById(pageType === 'login' ? 'login-error' : 'register-page-error');
        errorEl.textContent = '';

        if (code.length < 6) {
            errorEl.textContent = translations[currentLanguage].invalidCode;
            return;
        }

        loadingOverlay.classList.remove('hidden');
        try {
            await window.confirmationResult.confirm(code);
            // onAuthStateChanged qolgan ishlarni bajaradi
            // Yangi ro'yxatdan o'tgan bo'lsa, onAuthStateChanged ichida createUserData chaqiriladi
        } catch (error) {
            console.error("Kodni tasdiqlashda xatolik:", error);
            errorEl.textContent = translations[currentLanguage].invalidCode;
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }
    // --- Telefon raqami funksiyalari tugadi ---

    async function handleRegisterSubmit(e) {
        e.preventDefault();
        const name = document.getElementById('register-name-input').value;
        const email = document.getElementById('register-email-input').value; // This is the login
        const password = document.getElementById('register-password-input').value;
        const dob = document.getElementById('register-dob-input').value;
        const secretWord = document.getElementById('register-secret-input').value;
        const errorEl = document.getElementById('register-error');
        errorEl.textContent = '';

        if (!name || !email || !password || !dob || !secretWord) {
            errorEl.textContent = "Barcha maydonlarni to'ldiring.";
            return;
        }

        loadingOverlay.classList.remove('hidden');

        try {
            const userCredential = await createUserWithEmailAndPassword(auth, email, password);
            const user = userCredential.user;

            // createUserData onAuthStateChanged ichida chaqiriladi, lekin qo'shimcha ma'lumotlarni o'tkazish kerak
            await createUserData(user, {
                name: name,
                dob: dob,
                secretWord: secretWord
            });

            // Store account info including password for quick switch between accounts
            try {
                const accounts = JSON.parse(localStorage.getItem('soundora-accounts')) || [];
                // remove any existing record for this uid
                const filtered = accounts.filter(acc => acc.uid !== user.uid);
                filtered.push({ uid: user.uid, displayName: name, email: email, phoneNumber: user.phoneNumber, password: password });
                localStorage.setItem('soundora-accounts', JSON.stringify(filtered));
            } catch (e) {
                console.error('Error storing new account', e);
            }

        } catch (error) {
            if (error.code === 'auth/email-already-in-use') {
                errorEl.textContent = "Bu login (email) allaqachon mavjud.";
            } else if (error.code === 'auth/weak-password') {
                errorEl.textContent = "Parol juda oddiy (kamida 6 ta belgi bo'lishi kerak).";
            } else {
                errorEl.textContent = "Ro'yxatdan o'tishda xatolik yuz berdi.";
            }
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    async function handleLogout() {
        // Capture UID before logging out
        const uid = currentUser?.uid;
        try {
            await signOut(auth);
        } catch (error) {
            console.error("Logout Error:", error);
        } finally {
            // Clear account data so profiles and accounts do not persist across logins
            localStorage.removeItem('soundora-accounts');
            localStorage.removeItem('soundora-selected-account');
            if (uid) {
                localStorage.removeItem(`soundora-profiles-${uid}`);
            }
        }
    }

    async function handleSaveProfile() {
        const usernameInput = document.getElementById('username-input');
        if (!usernameInput || !currentUser) return;

        const newName = usernameInput.value.trim();
        if (newName === '' || newName === currentUser.displayName) {
            return;
        }

        loadingOverlay.classList.remove('hidden');
        const userRef = doc(db, "users", currentUser.uid);
        try {
            await updateDoc(userRef, { displayName: newName });
            showToast(translations[currentLanguage].profileUpdateSuccess);
        } catch (error) {
            showToast(translations[currentLanguage].profileUpdateError, true);
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    async function handleChangePassword(e) {
        e.preventDefault();
        const currentPassword = document.getElementById('current-password-input').value;
        const newPassword = document.getElementById('new-password-input').value;
        const confirmPassword = document.getElementById('confirm-password-input').value;
        const errorEl = document.getElementById('password-error');
        errorEl.textContent = '';

        if (newPassword !== confirmPassword) {
            errorEl.textContent = translations[currentLanguage].passwordsDoNotMatch;
            return;
        }
        if (newPassword.length < 6) {
            errorEl.textContent = "Parol kamida 6 belgidan iborat bo'lishi kerak.";
            return;
        }

        loadingOverlay.classList.remove('hidden');
        try {
            const user = auth.currentUser;
            const credential = EmailAuthProvider.credential(user.email, currentPassword);
            await reauthenticateWithCredential(user, credential);
            await updatePassword(user, newPassword);
            showToast(translations[currentLanguage].passwordUpdateSuccess);
            e.target.reset();
        } catch (error) {
            console.error("Parolni o'zgartirish xatosi:", error);
            errorEl.textContent = translations[currentLanguage].passwordUpdateError;
        } finally {
            loadingOverlay.classList.add('hidden');
        }
    }

    function copyUserId() {
        const idElement = document.getElementById('user-profile-id');
        if (idElement) {
            copyToClipboard(idElement.textContent);
            showToast(translations[currentLanguage].idCopied);
        }
    }

    function handleDownloadClick(e) {
        const movieId = e.currentTarget.dataset.movieId;
        const movie = movies.find(m => m.id === String(movieId));
        if (!movie || !movie.sources) {
            showToast("Yuklab olish manbasi topilmadi.", true);
            return;
        }

        const availableQualities = ['1080p', '720p', '480p'];
        let downloadUrl = '';
        for (const quality of availableQualities) {
            if (movie.sources[quality]) {
                downloadUrl = movie.sources[quality];
                break;
            }
        }

        if (!downloadUrl) {
            showToast("Yuklab olish manbasi topilmadi.", true);
            return;
        }

        // Save movie information to local storage for offline downloads. Include status and progress.
        try {
            const storageKey = 'soundora-downloads';
            let downloaded = JSON.parse(localStorage.getItem(storageKey)) || [];
            const idStr = String(movie.id);
            // Avoid duplicates by checking existing entries
            if (!downloaded.some(item => (typeof item === 'object' ? item.id : item) === idStr)) {
                downloaded.push({ id: idStr, title: movie.title, url: downloadUrl, status: 'downloading', progress: 0 });
                localStorage.setItem(storageKey, JSON.stringify(downloaded));
            }
        } catch (err) {
            console.error('Error storing download', err);
        }

        // Notify user that download has started and is added to downloads page
        const startedMsg = translations[currentLanguage]?.downloadStarted || 'Download started. Check downloads page.';
        showToast(startedMsg);
        // Show toast that movie added to downloads
        const message = translations[currentLanguage]?.downloadAdded || 'Added to downloads';
        showToast(message);

        // Reference to progress bar elements inside modal (optional). We do not display the modal during download.
        const progressModal = document.getElementById('download-progress-modal');
        const progressBar   = document.getElementById('download-progress-bar');
        const progressText  = document.getElementById('download-progress-text');
        downloadVideoWithProgress(downloadUrl, (received, total) => {
            if (total) {
                const percent = (received / total) * 100;
                // Update progress bar in the modal
                if (progressBar && progressText) {
                    progressBar.style.width = `${percent.toFixed(2)}%`;
                    const receivedMB = (received / (1024 * 1024)).toFixed(1);
                    const totalMB    = (total / (1024 * 1024)).toFixed(1);
                    progressText.textContent = `${receivedMB} MB / ${totalMB} MB`;
                }
                // Persist progress state for this movie so downloads page can reflect it
                updateDownloadEntry(movie.id, { progress: Math.min(100, percent), status: 'downloading' });
                // Also update progress bar in downloads page if present
                const bar = document.getElementById(`download-progress-${movie.id}`);
                const label = document.getElementById(`download-progress-text-${movie.id}`);
                if (bar) {
                    bar.style.width = `${percent.toFixed(2)}%`;
                }
                if (label) {
                    label.textContent = `${percent.toFixed(0)}%`;
                }
            }
        }).then(blob => {
            // Save the video blob to IndexedDB for offline playback
            saveVideoToDB(movie.id, blob).then(() => {
                // Update status to completed and progress to 100%
                updateDownloadEntry(movie.id, { status: 'completed', progress: 100 });
                // Hide modal
                if (progressModal) {
                    progressModal.classList.add('hidden');
                    progressBar.style.width = '0%';
                    progressText.textContent = '0 MB / 0 MB';
                }
                const message = translations[currentLanguage]?.downloadAdded || 'Added to downloads';
                showToast(message);
                // Update downloads page UI to mark completed
                const bar = document.getElementById(`download-progress-${movie.id}`);
                const label = document.getElementById(`download-progress-text-${movie.id}`);
                if (bar) bar.style.width = '100%';
                if (label) label.textContent = '100%';
            }).catch(err => {
                console.error('Error saving video to DB:', err);
                if (progressModal) progressModal.classList.add('hidden');
            });
        }).catch(err => {
            console.error('Error downloading video:', err);
            if (progressModal) progressModal.classList.add('hidden');
        });
    }

    /**
     * Opens (and upgrades if necessary) the IndexedDB database used for storing
     * downloaded videos. Returns a promise that resolves with the database instance.
     */
    function openDownloadsDB() {
        return new Promise((resolve, reject) => {
            const request = indexedDB.open('soundoraDownloads', 1);
            request.onupgradeneeded = (ev) => {
                const db = ev.target.result;
                if (!db.objectStoreNames.contains('videos')) {
                    db.createObjectStore('videos');
                }
            };
            request.onsuccess = (ev) => resolve(ev.target.result);
            request.onerror = (ev) => reject(ev.target.error);
        });
    }

    /**
     * Saves a video Blob to the IndexedDB under the given movie ID key.
     */
    function saveVideoToDB(movieId, blob) {
        return openDownloadsDB().then((db) => {
            return new Promise((resolve, reject) => {
                const tx = db.transaction('videos', 'readwrite');
                const store = tx.objectStore('videos');
                store.put(blob, String(movieId));
                tx.oncomplete = () => resolve();
                tx.onerror = (ev) => reject(ev.target.error);
            });
        });
    }

    /**
     * Updates an existing entry in the downloads list stored in localStorage.
     * Accepts a movieId and an object containing the fields to update (e.g., { progress: 50, status: 'downloading' }).
     */
    function updateDownloadEntry(movieId, updates) {
        try {
            const storageKey = 'soundora-downloads';
            let downloaded = JSON.parse(localStorage.getItem(storageKey)) || [];
            const idStr = String(movieId);
            downloaded = downloaded.map(item => {
                if ((typeof item === 'object' ? item.id : item) === idStr) {
                    if (typeof item === 'object') {
                        return Object.assign({}, item, updates);
                    }
                    // If item is string (legacy), convert to object
                    return Object.assign({ id: idStr }, updates);
                }
                return item;
            });
            localStorage.setItem(storageKey, JSON.stringify(downloaded));
        } catch (err) {
            console.error('Failed to update download entry', err);
        }
    }

    /**
     * Downloads a file using Fetch and reports progress via a callback. Returns a promise
     * that resolves with the resulting Blob once the download completes.
     */
    function downloadVideoWithProgress(url, onProgress) {
        return fetch(url).then((response) => {
            if (!response.ok) throw new Error('Network response was not ok');
            const contentLength = response.headers.get('Content-Length');
            const total = contentLength ? parseInt(contentLength, 10) : 0;
            const reader = response.body.getReader();
            let received = 0;
            const chunks = [];
            function pump() {
                return reader.read().then(({ done, value }) => {
                    if (done) {
                        return new Blob(chunks);
                    }
                    chunks.push(value);
                    received += value.length;
                    if (onProgress && total) {
                        onProgress(received, total);
                    }
                    return pump();
                });
            }
            return pump();
        });
    }

    /**
     * Generate a shareable promo code for the current user. Free users may generate
     * up to 2 promo codes, while premium users may generate up to 4 codes. Each
     * generated code contains an expiry timestamp (7 days from now) and is stored
     * in localStorage under the key `soundora-promo-codes`. If the user has
     * reached the limit, a toast message is shown and no new code is created.
     * Otherwise a new code is generated, saved, copied to the clipboard and a
     * success toast is displayed.
     */
    function handleShareSubscription() {
        if (!currentUser) {
            showToast('Please log in to generate a promo code.', true);
            return;
        }
        try {
            const allCodes = JSON.parse(localStorage.getItem('soundora-promo-codes')) || [];
            const userId = currentUser.uid;
            const userCodes = allCodes.filter(c => c.userId === userId);
            const limit = currentUser.isPremium ? 4 : 2;
            if (userCodes.length >= limit) {
                showToast('Promo code limit reached.', true);
                return;
            }
            // Generate a random 8‑character alphanumeric code
            const generateCode = () => Math.random().toString(36).substring(2, 10).toUpperCase();
            let code;
            // Ensure uniqueness across all codes
            do {
                code = generateCode();
            } while (allCodes.some(c => c.code === code));
            const now = Date.now();
            const expiresAt = now + 7 * 24 * 60 * 60 * 1000; // 7 days in ms
            const newCode = { code, userId, createdAt: now, expiresAt, used: false };
            allCodes.push(newCode);
            localStorage.setItem('soundora-promo-codes', JSON.stringify(allCodes));
            // Copy to clipboard
            copyToClipboard(code);
            showToast(`Promo code ${code} copied to clipboard!`);
        } catch (err) {
            console.error('Error generating promo code', err);
            showToast('Error generating promo code', true);
        }
    }

    function setLanguage(lang) {
        currentLanguage = ['en', 'ru', 'uz'].includes(lang) ? lang : 'ru';
        localStorage.setItem('soundora-lang', currentLanguage);
        document.documentElement.lang = lang;

        document.querySelectorAll('[data-lang-key]').forEach(el => {
            const key = el.getAttribute('data-lang-key');
            let translation = translations[currentLanguage]?.[key];
            if (translation === undefined) return;

            if (key === 'deviceLimitInfo') {
                const current = el.dataset.current;
                const max = el.dataset.max;
                translation = translation.replace('{CURRENT}', current).replace('{MAX}', max);
            }

            if (el.tagName === 'INPUT' && !['checkbox', 'radio', 'submit'].includes(el.type)) {
                el.placeholder = translation;
            } else {
                el.textContent = translation;
            }
        });
    }

    function createMovieCardHTML(movie) {
        const posterSrc = movie.poster || `https://placehold.co/400x600/1f2937/ffffff?text=${encodeURIComponent(movie.title)}`;
        return `
            <a href="#" class="movie-card-link group relative overflow-hidden rounded-lg shadow-lg cursor-pointer" data-movie-id="${movie.id}" onclick="event.preventDefault(); handleMovieCardClick(event)">
                <img src="${posterSrc}" onerror="this.onerror=null;this.src='https://placehold.co/400x600/ef4444/ffffff?text=Error';" alt="${movie.title}" class="w-full h-full object-cover transition duration-500 group-hover:scale-110">
                ${movie.isPremium ? `<div class="absolute top-2 left-2 bg-gradient-to-r from-amber-500 to-yellow-400 text-white text-xs font-bold px-2 py-1 rounded-full flex items-center gap-1"><i class="fas fa-crown text-xs"></i><span data-lang-key="premium">Premium</span></div>` : ''}
                ${movie.type === 'series' ? `<span class="absolute top-2 right-2 bg-blue-600 text-white text-xs font-bold px-2 py-1 rounded-full" data-lang-key="series">Сериал</span>` : ''}
                <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"><i class="fas fa-play-circle text-white text-5xl"></i></div>
                <div class="absolute bottom-0 left-0 right-0 p-2 bg-gradient-to-t from-black to-transparent"><h3 class="text-white font-semibold text-md truncate">${movie.title}</h3><p class="text-gray-400 text-xs">${movie.year}</p></div>
            </a>`;
    }

    function populateCategories() {
        const categoryNav = document.getElementById('category-nav');
        if (!categoryNav) return;
        const years = [...new Set(movies.map(m => String(m.year)))].sort((a, b) => b.localeCompare(a)).filter(y => y && y !== 'undefined');
        const categories = [ { key: 'categoryAll' }, { key: 'categoryNew' }, { key: 'categoryTrending' }, ...years ];
        categoryNav.innerHTML = categories.map((cat, index) => {
            const isYear = typeof cat === 'string';
            const value = isYear ? cat : cat.key;
            const text = isYear ? cat : (translations[currentLanguage][cat.key] || cat.key);
            const langKeyAttr = isYear ? '' : `data-lang-key="${cat.key}"`;
            return `<button class="category-btn shrink-0 px-4 py-2 text-sm font-semibold rounded-full bg-gray-700 text-gray-300 ${index === 0 ? 'active' : ''}" data-category-value="${value}" ${langKeyAttr}>${text}</button>`;
        }).join('');

        categoryNav.querySelectorAll('.category-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                document.querySelector('#category-nav .category-btn.active')?.classList.remove('active');
                e.currentTarget.classList.add('active');
                filterAndDisplayMovies(e.currentTarget.dataset.categoryValue);
            });
        });

    }

    /**
     * Katalog uchun til filtrini yaratadi. Mavjud til tugmalarini yaratib, ularning bosilishi natijasida
     * selectedLangFilter o'zgaruvchisini yangilaydi va filmlar ro'yxatini qayta filtrlaydi.
     */
    function populateLanguageFilter() {
        const langNav = document.getElementById('lang-filter-nav');
        if (!langNav) return;
        langNav.innerHTML = LANGUAGE_FILTERS.map(lang => {
            const isActive = selectedLangFilter === lang;
            const label = (lang === 'all') ? 'All' : lang.toUpperCase();
            return `<button class="lang-filter-btn shrink-0 px-4 py-2 text-sm font-semibold rounded-full bg-gray-700 text-gray-300 ${isActive ? 'active' : ''}" data-lang-value="${lang}">${label}</button>`;
        }).join('');
        langNav.querySelectorAll('.lang-filter-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                document.querySelector('#lang-filter-nav .lang-filter-btn.active')?.classList.remove('active');
                e.currentTarget.classList.add('active');
                selectedLangFilter = e.currentTarget.dataset.langValue;
                // Joriy kategoriya bo'yicha filmlarni qayta filtrla
                const activeCategoryButton = document.querySelector('#category-nav .category-btn.active');
                const currentCategory = activeCategoryButton ? activeCategoryButton.dataset.categoryValue : 'categoryAll';
                filterAndDisplayMovies(currentCategory);
            });
        });
    }

    function filterAndDisplayMovies(category) {
        const moviesGrid = document.getElementById('movies-grid');
        if (!moviesGrid) return;
        let filteredMovies;
        const show18Plus = JSON.parse(localStorage.getItem('soundora-show18plus')) || false;
        const baseMovies = show18Plus ? movies : movies.filter(m => !m.is18Plus);

        switch(category) {
            case 'categoryAll': filteredMovies = baseMovies; break;
            case 'categoryNew': filteredMovies = [...baseMovies].sort((a, b) => (b.createdAt?.toDate() || 0) - (a.createdAt?.toDate() || 0)).slice(0, 30); break;
            case 'categoryTrending': filteredMovies = baseMovies.filter(m => m.isTrending); break;
            default: filteredMovies = baseMovies.filter(m => String(m.year) === String(category)); break;
        }
        // Til bo'yicha filtrlash: agar tanlangan til 'all' bo'lmasa, quyidagi shartlar bo'yicha filtrlaymiz:
        // 1) Filmning asosiy tili (m.language) tanlangan tilga teng bo'lsa;
        // 2) audioLangs yoki subtitleLangs massivlarida ushbu til mavjud bo'lsa.
        if (selectedLangFilter && selectedLangFilter !== 'all') {
            const sel = String(selectedLangFilter).toLowerCase();
            filteredMovies = filteredMovies.filter(m => {
                // Asosiy tilni tekshiramiz
                const langMatch = m.language && String(m.language).toLowerCase() === sel;
                // Audio tillari orasida bor-yo'qligini tekshiramiz
                const audioMatch = Array.isArray(m.audioLangs) && m.audioLangs.map(l => String(l).toLowerCase()).includes(sel);
                // Subtitr tillari orasida bor-yo'qligini tekshiramiz
                const subMatch = Array.isArray(m.subtitleLangs) && m.subtitleLangs.map(l => String(l).toLowerCase()).includes(sel);
                return langMatch || audioMatch || subMatch;
            });
        }
        moviesGrid.innerHTML = filteredMovies.length > 0 ? filteredMovies.map(createMovieCardHTML).join('') : `<p class="col-span-full text-center text-gray-400 mt-8" data-lang-key="noResults"></p>`;
        window.handleMovieCardClick = (e) => { e.preventDefault(); navigate({ page: 'movie-details', movieId: e.currentTarget.dataset.movieId }); };
        setLanguage(currentLanguage);
    }

    function updateActiveNav(pageId) {
        document.querySelectorAll('.bottom-nav-link').forEach(link => link.classList.remove('active'));
        let selector;
        if (pageId === 'main') selector = '#home-link-bottom';
        else if (pageId === 'favorites') selector = '#favorites-link-bottom';
        else if (['profile', 'guest-profile', 'settings', 'edit-profile', 'language-settings', 'playback-settings', 'content-settings', 'privacy-policy', 'faq', 'login', 'register', 'premium'].includes(pageId)) selector = '#profile-link-bottom';
        if (selector) document.querySelector(selector)?.classList.add('active');
    }

    function showModal(contentHTML, onOpen = null) {
        modalOverlay.innerHTML = contentHTML;
        modalOverlay.classList.remove('hidden');
        modalOverlay.querySelector('.close-modal-btn')?.addEventListener('click', closeModal);
        modalOverlay.addEventListener('click', (e) => { if (e.target === modalOverlay) closeModal(); });
        setLanguage(currentLanguage);
        if (onOpen) onOpen();
    }

    function closeModal() {
        if (operatorCountdownInterval) {
            clearInterval(operatorCountdownInterval);
            operatorCountdownInterval = null;
        }
        modalOverlay.classList.add('hidden');
        modalOverlay.innerHTML = '';
    }

    function renderAiChatModal() {
        return `
            <div class="relative bg-gray-900 rounded-lg w-full max-w-md h-[70vh] flex flex-col shadow-xl">
                <div class="flex items-center justify-between p-4 border-b border-gray-700">
                    <h3 class="text-lg font-bold" data-lang-key="aiChatTitle"></h3>
                    <button class="close-modal-btn text-gray-500 hover:text-white text-3xl">&times;</button>
                </div>
                <div id="ai-chat-messages" class="flex-grow p-4 space-y-4 overflow-y-auto">
                </div>
                <div class="p-4 border-t border-gray-700">
                    <!-- Quick reply buttons container. These buttons allow users to quickly trigger actions like contacting an operator. -->
                    <div id="ai-quick-buttons" class="flex flex-wrap gap-2 mb-2"></div>
                    <form id="ai-chat-form" class="flex items-center gap-3">
                        <input type="text" id="ai-chat-input" data-lang-key="aiChatPlaceholder" class="w-full bg-gray-800 border border-gray-700 rounded-lg p-3 focus:border-red-500 focus:ring-red-500 transition" autocomplete="off">
                        <button type="submit" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-5 rounded-lg transition-colors">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </form>
                </div>
            </div>
        `;
    }

    function showAiChatModal() {
        let aiChatHistory = [];
        showModal(renderAiChatModal(), () => {
            const chatMessages = document.getElementById('ai-chat-messages');
            const chatForm = document.getElementById('ai-chat-form');
            const chatInput = document.getElementById('ai-chat-input');

            const welcomeMessage = translations[currentLanguage].aiChatWelcome;
            appendMessageToChat('ai', welcomeMessage);

            // Render quick reply buttons (e.g. Operator) in the dedicated container. This helps users quickly connect to a human agent
            const quickButtonsContainer = document.getElementById('ai-quick-buttons');
            if (quickButtonsContainer) {
                // Clear any existing buttons
                quickButtonsContainer.innerHTML = '';
                // Create the operator quick button
                const operatorQuickBtn = document.createElement('button');
                operatorQuickBtn.type = 'button';
                // Style as a pill button similar to messaging apps
                operatorQuickBtn.className = 'border border-red-500 text-red-500 rounded-full px-3 py-1 text-sm hover:bg-red-500 hover:text-white transition-colors';
                operatorQuickBtn.textContent = translations[currentLanguage].supportChatOperatorQuick || 'Operator';
                operatorQuickBtn.addEventListener('click', () => {
                    startSupportChatWithinAi();
                });
                quickButtonsContainer.appendChild(operatorQuickBtn);
                // Show or hide quick buttons depending on whether support chat is already active
                if (isSupportChatActive) {
                    quickButtonsContainer.style.display = 'none';
                } else {
                    quickButtonsContainer.style.display = 'flex';
                }
            }

            // Restore any active support chat from localStorage if it exists for this user
            if (currentUser && currentUser.uid) {
                try {
                    const storedId = localStorage.getItem(`supportChatId_${currentUser.uid}`);
                    const storedActive = localStorage.getItem(`supportChatActive_${currentUser.uid}`);
                    if (storedId && storedActive === 'true') {
                        isSupportChatActive = true;
                        supportChatId = storedId;
                        // Subscribe to the stored chat to load history
                        subscribeToSupportChat(storedId);
                    }
                } catch (e) {
                    console.warn('Failed to restore support chat from localStorage', e);
                }
            }

            chatForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const userInput = chatInput.value.trim();
                if (!userInput) return;

                // If support chat is active, send the message to Firestore instead of the AI
                if (isSupportChatActive && supportChatId) {
                    await sendSupportChatMessage(supportChatId, userInput);
                    // Locally append the user message so it appears instantly
                    appendSupportChatMessage({ sender: 'user', content: userInput, timestamp: new Date() });
                } else {
                    appendMessageToChat('user', userInput);
                    aiChatHistory.push({ role: "user", content: userInput });

                    showTypingIndicator(true);
                    const aiResponse = await getAiResponse(aiChatHistory);
                    showTypingIndicator(false);

                    aiChatHistory.push({ role: "assistant", content: aiResponse });

                    if (aiResponse.startsWith('ACTION:')) {
                        handleAiAction(aiResponse);
                    } else {
                        appendMessageToChat('ai', aiResponse);
                    }
                }
                chatInput.value = '';
            });
        });
    }

    function appendMessageToChat(sender, message) {
        const chatMessages = document.getElementById('ai-chat-messages');
        if (!chatMessages) return;
        const bubbleClass = sender === 'user' ? 'chat-bubble-user self-end' : 'chat-bubble-ai self-start';
        const messageEl = document.createElement('div');
        messageEl.className = `w-fit max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${bubbleClass}`;
        messageEl.textContent = message;
        chatMessages.appendChild(messageEl);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }

    function showTypingIndicator(show) {
        const chatMessages = document.getElementById('ai-chat-messages');
        let indicator = document.getElementById('typing-indicator');
        if (show) {
            if (indicator) return;
            indicator = document.createElement('div');
            indicator.id = 'typing-indicator';
            indicator.className = 'typing-indicator self-start';
            indicator.innerHTML = '<span></span><span></span><span></span>';
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        } else {
            if (indicator) indicator.remove();
        }
    }

    async function getAiResponse(currentChatHistory) {
        // IMPORTANT: Do not hardcode API keys. This is for demonstration purposes.
        // In a real application, this key should be handled securely, e.g., via a backend proxy.
        const GEMINI_API_KEY = ''; // API Key removed for security
        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${GEMINI_API_KEY}`;

        const userInput = currentChatHistory[currentChatHistory.length - 1].content;

        const operatorKeywords = ['operator', 'оператор', 'admin', 'админ', 'odam', 'человек'];
        if (operatorKeywords.some(kw => userInput.toLowerCase().includes(kw))) {
            return "ACTION:OPERATOR";
        }

        const moviesContext = movies.map(m => `ID: ${m.id}, Title: ${m.title}, Year: ${m.year}, Genre: ${m.genre}, Description: ${m.description}`).join('\n');
        const premiumInfo = `${translations[currentLanguage].howToSubscribe} ${translations[currentLanguage].subscribeStep1} ${translations[currentLanguage].subscribeStep2} ${translations[currentLanguage].subscribeStep3}`;

        const prompt = `
            You are "Emro AI", a helpful and friendly assistant for a movie streaming site called "Soundora Films".
            You MUST respond in the same language as the user's query. The user's query is in: ${currentLanguage}.

            Here is the context you need:
            1.  **Available Movies:**
                ---
                ${moviesContext}
                ---
            2.  **Premium Subscription Info:** "${premiumInfo}"
            3.  **App Sections:** The app has the following sections: 'main', 'favorites', 'profile', 'settings', 'premium'.

            **Your Task:**
            Analyze the user's request and respond according to these rules, in this exact order of priority:

            1.  **Navigation Request:** If the user wants to go to a specific section (e.g., "show my profile", "sevimlilarga o't", "открой избранное"), respond ONLY with the action string: "ACTION:NAVIGATE:PAGE:page_name".
                -   'favorites' for favorites/sevimlilar/избранное.
                -   'profile' for profile/profil/профиль.
                -   'settings' for settings/sozlamalar/настройки.
                -   'premium' for premium/premium/премиум.

            2.  **Movie Search Request:** If the user asks for a specific movie by title, find its ID from the list. Respond ONLY with the action string: "ACTION:NAVIGATE:MOVIE:MOVIE_ID".

            3.  **Movie Information Request:** If the user asks for information ABOUT a movie (e.g., "tell me about Avatar", "Avatar haqida ma'lumot ber"), find the movie and provide a short, conversational summary based on its description. DO NOT use an action string.

            4.  **Registration Help:** If the user asks how to register or create an account, explain that they need to go to the Profile tab and click "Register".

            5.  **Premium Help:** If the user asks about premium features or how to subscribe, provide the information from the "Premium Subscription Info" context above.

            6.  **General Conversation:** If the request doesn't match any of the above, answer it as a friendly, helpful assistant. If you don't know the answer, say so politely.

            User's request: "${userInput}"
        `;

        const payload = {
            contents: [{ parts: [{ text: prompt }] }]
        };

        try {
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                console.error("API Error:", response.status, await response.text());
                return translations[currentLanguage].aiDefaultSorry;
            }

            const data = await response.json();
            if (data.candidates && data.candidates.length > 0) {
                return data.candidates[0].content.parts[0].text;
            }
            return translations[currentLanguage].aiDefaultSorry;

        } catch (error) {
            console.error('Error calling Gemini API:', error);
            return translations[currentLanguage].aiDefaultSorry;
        }
    }


    function handleAiAction(action) {
        const parts = action.split(':');
        const actionType = parts[1];
        const actionTarget = parts[2];
        const actionValue = parts[3];

        if (actionType === 'NAVIGATE') {
            // When navigation is requested, close the AI chat modal and navigate to the desired page
            closeModal();
            if (actionTarget === 'MOVIE') {
                navigate({ page: 'movie-details', movieId: actionValue });
            } else if (actionTarget === 'PAGE') {
                navigate({ page: actionValue });
            }
        } else if (actionType === 'OPERATOR' || actionType === 'AGENT') {
            // When the user requests an operator or agent, start the support chat inside the existing AI chat modal.
            startSupportChatWithinAi();
        }
    }

    /**
     * Start the support chat within the existing AI chat modal. This avoids opening a separate
     * support chat window and keeps the conversation history in the same view. If the user
     * is not logged in, a toast message is shown instead. When invoked for the first time,
     * this function creates a new support chat document for the current user and subscribes
     * to it to display incoming messages in the AI chat message container.
     */
    async function startSupportChatWithinAi() {
        if (isSupportChatActive) return;
        if (!currentUser) {
            showToast(translations[currentLanguage].loginRequired, true);
            return;
        }
        try {
            const { id } = await createOrGetSupportChat();
            supportChatId = id;
            isSupportChatActive = true;
            // Clear existing AI messages from the chat container so support messages show cleanly
            const messagesContainer = document.getElementById('ai-chat-messages');
            if (messagesContainer) {
                messagesContainer.innerHTML = '';
            }
            // Persist the active support chat ID in localStorage keyed by user ID so history is retained
            if (currentUser && currentUser.uid) {
                try {
                    localStorage.setItem(`supportChatId_${currentUser.uid}`, id);
                    localStorage.setItem(`supportChatActive_${currentUser.uid}`, 'true');
                } catch (e) {
                    console.warn('Failed to store support chat ID in localStorage', e);
                }
            }
            // Subscribe to support chat updates so messages appear in real time
            subscribeToSupportChat(id);
        } catch (err) {
            console.error('Failed to start support chat within AI:', err);
            showToast('Failed to open support chat', true);
        }
    }

    function renderOperatorRedirectModal() {
        return `
            <div class="relative bg-gray-900 rounded-lg p-6 text-center shadow-xl max-w-sm w-full">
                <h3 class="text-xl font-bold mb-2" data-lang-key="operatorRedirectTitle"></h3>
                <p class="text-gray-400 mb-4">
                    <span data-lang-key="operatorRedirectText"></span>
                    <span id="operator-countdown" class="font-bold text-white">10</span>s...
                </p>
                <button id="action-operator-redirect" class="w-full bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                    <span data-lang-key="operatorRedirectCancel"></span>
                </button>
            </div>`;
    }

    function showOperatorRedirectModal() {
        showModal(renderOperatorRedirectModal(), () => {
            const countdownEl = document.getElementById('operator-countdown');
            const actionButton = document.getElementById('action-operator-redirect');
            let timeLeft = 10;

            if (operatorCountdownInterval) clearInterval(operatorCountdownInterval);

            const openChat = () => {
                let tawkToUrl = 'https://tawk.to/chat/68797b3c292e07191a22d357/1j0d8ip7e';
                if (currentUser) {
                    const nameWithId = `${currentUser.displayName || 'Foydalanuvchi'} (ID: ${currentUser.customId})`;
                    const name = encodeURIComponent(nameWithId);
                    const email = encodeURIComponent(currentUser.email || '');
                    tawkToUrl += `/?$tawk_name=${name}&$tawk_email=${email}`;
                }
                window.open(tawkToUrl, '_blank');
                closeModal();
            };

            const cancelRedirect = () => {
                clearInterval(operatorCountdownInterval);
                operatorCountdownInterval = null;
                closeModal();
            };

            actionButton.addEventListener('click', cancelRedirect);

            operatorCountdownInterval = setInterval(() => {
                timeLeft--;
                if (countdownEl) {
                   countdownEl.textContent = timeLeft;
                }

                if (timeLeft <= 0) {
                    clearInterval(operatorCountdownInterval);
                    operatorCountdownInterval = null;

                    const textEl = countdownEl.parentElement;
                    if(textEl) {
                       textEl.textContent = translations[currentLanguage].operatorConnectPrompt;
                    }

                    actionButton.innerHTML = `<span data-lang-key="operatorConnectNow"></span>`;
                    setLanguage(currentLanguage);
                    actionButton.classList.remove('bg-gray-600', 'hover:bg-gray-700');
                    actionButton.classList.add('bg-red-600', 'hover:bg-red-700');
                    actionButton.removeEventListener('click', cancelRedirect);
                    actionButton.addEventListener('click', openChat);
                }
            }, 1000);
        });
    }

    // ------------------ Internal Support Chat Implementation ------------------
    // Variables to track the current support chat and its listener
    let supportChatId = null;
    let unsubscribeSupportChat = null;
    // Flag indicating whether the support chat is currently active within the AI chat modal
    let isSupportChatActive = false;

    // Create a new support chat or retrieve an existing open chat for the current user.
    async function createOrGetSupportChat() {
        if (!currentUser) {
            throw new Error("User must be logged in to start support chat");
        }
        // Always create a new support chat for the user rather than reusing an existing one.
        /**
         * Always create a new support chat for the user rather than reusing an existing one.
         * To avoid Firestore read permission issues when counting pending chats from other users,
         * we no longer attempt to query the supportChats collection. Instead, we default
         * the queue position to 1 for all new chats. This ensures that the chat creation
         * request only performs a write operation, which is permitted by the Firestore rules
         * and avoids reading documents belonging to other users.
         */
        const queuePosition = 1;
        // Create a system message informing the user of their (default) queue position
        const systemMessage = {
            sender: "system",
            content: `${translations[currentLanguage].supportChatQueue} ${queuePosition}. ${translations[currentLanguage].supportChatWaiting}`,
            timestamp: new Date()
        };
        const newChatData = {
            userId: currentUser.uid,
            userName: currentUser.displayName || currentUser.email || "User",
            status: "pending",
            createdAt: new Date(),
            messages: [systemMessage]
        };
        const chatDocRef = await addDoc(collection(db, "supportChats"), newChatData);
        return { id: chatDocRef.id, data: newChatData };
    }

    // Render the HTML for the support chat modal.
    function renderSupportChatModal() {
        return `
            <div class="relative bg-gray-900 rounded-lg p-6 w-11/12 max-w-lg flex flex-col h-[80vh]">
                <button id="support-chat-close" class="absolute top-3 right-3 text-gray-500 hover:text-white text-2xl">&times;</button>
                <h3 class="text-xl font-bold mb-2 text-center">${translations[currentLanguage].supportChatTitle}</h3>
                <div id="support-chat-messages" class="flex-1 overflow-y-auto mb-4 space-y-2 bg-gray-800/50 p-3 rounded-lg"></div>
                <div class="flex mt-auto gap-2">
                    <input id="support-chat-input" class="flex-1 bg-gray-700 text-white p-2 rounded-md focus:outline-none" placeholder="${translations[currentLanguage].supportChatPlaceholder}" />
                    <button id="support-chat-send" class="bg-red-600 hover:bg-red-700 text-white font-semibold px-4 py-2 rounded-md">${translations[currentLanguage].supportChatSend}</button>
                </div>
            </div>`;
    }

    // Helper to append a single support chat message into the messages container.
    function appendSupportChatMessage(msg) {
        // Choose the appropriate message container: if the support chat is being shown inside the AI chat,
        // append messages to the AI chat container; otherwise append to the dedicated support chat container.
        const container = isSupportChatActive
            ? document.getElementById('ai-chat-messages')
            : document.getElementById('support-chat-messages');
        if (!container) return;
        const div = document.createElement('div');
        // Normalize timestamp
        let ts;
        if (msg.timestamp && typeof msg.timestamp.toDate === 'function') {
            ts = msg.timestamp.toDate();
        } else if (msg.timestamp instanceof Date) {
            ts = msg.timestamp;
        } else {
            ts = new Date();
        }
        const timeStr = ts ? ts.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : '';
        let prefix;
        if (msg.sender === 'user') {
            prefix = translations[currentLanguage].supportChatUserPrefix;
            div.className = 'self-end bg-red-600/50 text-white px-3 py-2 rounded-lg max-w-xs';
        } else if (msg.sender === 'admin') {
            const name = msg.adminName || '';
            prefix = translations[currentLanguage].supportChatAgentPrefix + (name ? (': ' + name) : '');
            div.className = 'self-start bg-gray-700 text-white px-3 py-2 rounded-lg max-w-xs';
        } else {
            prefix = translations[currentLanguage].supportChatSystem;
            div.className = 'self-center bg-gray-600/50 text-gray-300 px-3 py-2 rounded-lg max-w-xs text-sm text-center';
        }
        div.innerHTML = `<div><strong>${prefix}</strong>${timeStr ? `<span class="ml-2 text-xs text-gray-400">${timeStr}</span>` : ''}</div><div class="mt-1">${msg.content}</div>`;
        container.appendChild(div);
        container.scrollTop = container.scrollHeight;
    }

    // Subscribe to updates on a support chat document and render messages.
    function subscribeToSupportChat(chatId) {
        const chatRef = doc(db, "supportChats", chatId);
        unsubscribeSupportChat = onSnapshot(chatRef, (docSnap) => {
            const data = docSnap.data();
            const msgs = (data && data.messages) || [];
            // Select the correct container based on whether support chat is active in AI chat
            const container = isSupportChatActive
                ? document.getElementById('ai-chat-messages')
                : document.getElementById('support-chat-messages');
            if (!container) return;
            // Clear existing messages and re-append all messages from Firestore
            container.innerHTML = '';
            msgs.forEach(m => appendSupportChatMessage(m));
        });
    }

    // Send a new message to the support chat document.
    async function sendSupportChatMessage(chatId, content) {
        if (!content) return;
        const chatRef = doc(db, "supportChats", chatId);
        await updateDoc(chatRef, {
            messages: arrayUnion({
                sender: 'user',
                content: content,
                timestamp: new Date()
            })
        });
    }

    // Show the support chat modal and initialize chat.
    async function showSupportChatModal() {
        if (!currentUser) {
            showToast(translations[currentLanguage].loginRequired, true);
            return;
        }
        try {
            const { id } = await createOrGetSupportChat();
            supportChatId = id;
            showModal(renderSupportChatModal(), () => {
                subscribeToSupportChat(id);
                const closeBtn = document.getElementById('support-chat-close');
                const sendBtn = document.getElementById('support-chat-send');
                const input = document.getElementById('support-chat-input');
                if (closeBtn) {
                    closeBtn.addEventListener('click', () => {
                        if (unsubscribeSupportChat) unsubscribeSupportChat();
                        unsubscribeSupportChat = null;
                        supportChatId = null;
                        closeModal();
                    });
                }
                if (sendBtn) {
                    sendBtn.addEventListener('click', async () => {
                        const message = input.value.trim();
                        if (!message) return;
                        await sendSupportChatMessage(id, message);
                        input.value = '';
                    });
                }
                if (input) {
                    input.addEventListener('keypress', async (e) => {
                        if (e.key === 'Enter') {
                            e.preventDefault();
                            const message = input.value.trim();
                            if (!message) return;
                            await sendSupportChatMessage(id, message);
                            input.value = '';
                        }
                    });
                }
            });
        } catch (err) {
            console.error('Failed to open support chat:', err);
            showToast('Failed to open support chat', true);
        }
    }

    function showPremiumRequiredModal() {
        const content = `
            <div class="relative bg-gray-900 rounded-lg p-6 text-center shadow-xl max-w-sm w-full">
                <button class="close-modal-btn absolute top-2 right-3 text-gray-500 hover:text-white text-3xl">&times;</button>
                <i class="fas fa-gem text-4xl text-amber-400 mb-4"></i>
                <h3 class="text-xl font-bold mb-2" data-lang-key="premiumRequiredTitle"></h3>
                <p class="text-gray-400 mb-6" data-lang-key="premiumRequiredText"></p>
                <button id="modal-go-premium-btn" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg">
                    <span data-lang-key="goToPremium"></span>
                </button>
            </div>`;
        showModal(content);
        document.getElementById('modal-go-premium-btn').addEventListener('click', () => {
            closeModal();
            navigate({ page: 'premium' });
        });
    }

    function showSearchModal() {
        const content = `
            <div class="relative bg-gray-900 rounded-lg w-11/12 max-w-lg shadow-xl">
                <button class="close-modal-btn absolute top-4 right-4 text-gray-500 hover:text-white text-2xl">&times;</button>
                <div class="p-6">
                    <div class="flex items-center border-b-2 border-red-500 pb-2 mb-6">
                        <i class="fas fa-search text-gray-500 mr-3"></i>
                        <input type="text" id="search-input" data-lang-key="searchPlaceholder" class="w-full bg-transparent text-white text-xl focus:outline-none">
                    </div>
                    <div id="search-results" class="max-h-[60vh] overflow-y-auto"></div>
                </div>
            </div>`;
        showModal(content, () => {
            const searchInput = document.getElementById('search-input');
            searchInput.addEventListener('input', debounce(handleSearchInput, 300));
            searchInput.focus();
        });
    }

    function handleSearchInput(e) {
        const query = e.target.value.trim().toLowerCase();
        const resultsEl = document.getElementById('search-results');
        if (!resultsEl) return;
        if (!query) {
            resultsEl.innerHTML = '';
            return;
        }
        const filteredMovies = movies.filter(m =>
            (m.title?.toLowerCase().includes(query)) ||
            (m.originalTitle?.toLowerCase().includes(query))
        );
        const uniqueIds = new Set();
        const uniqueMovies = filteredMovies.filter(movie => {
            if (uniqueIds.has(movie.id)) {
                return false;
            } else {
                uniqueIds.add(movie.id);
                return true;
            }
        });
        displaySearchResults(uniqueMovies, resultsEl);
    }

    function displaySearchResults(results, container) {
        if (results.length === 0) {
            container.innerHTML = `<p class="text-gray-400 text-center" data-lang-key="noResults"></p>`;
            setLanguage(currentLanguage);
            return;
        }
        container.innerHTML = results.map(movie => `
            <a href="#" class="search-result-item flex items-center p-3 hover:bg-gray-800 rounded-md transition-colors" data-movie-id="${movie.id}">
                <img src="${movie.poster}" onerror="this.onerror=null;this.src='https://placehold.co/150x225/ef4444/ffffff?text=Error';" alt="${movie.title}" class="w-16 h-24 object-cover rounded-md mr-4">
                <div><h3 class="text-white font-bold text-lg">${movie.title}</h3><p class="text-gray-400 text-sm">${movie.genre} - ${movie.year}</p></div>
            </a>`).join('');
        container.querySelectorAll('.search-result-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.preventDefault();
                closeModal();
                navigate({ page: 'movie-details', movieId: item.dataset.movieId });
            });
        });
    }

    function copyToClipboard(text) {
        navigator.clipboard?.writeText(text).catch(err => console.error(err));
    }

    function showToast(message, isError = false) {
        toastNotification.textContent = message;
        toastNotification.className = `toast-notification fixed bottom-20 left-1/2 -translate-x-1/2 text-white px-4 py-2 rounded-lg shadow-lg opacity-0 transform translate-y-4 ${isError ? 'bg-red-600' : 'bg-gray-800'}`;
        toastNotification.classList.remove('hidden');
        setTimeout(() => toastNotification.classList.remove('opacity-0', 'translate-y-4'), 10);
        setTimeout(() => {
            toastNotification.classList.add('opacity-0', 'translate-y-4');
            setTimeout(() => toastNotification.classList.add('hidden'), 3000);
        }, 3000);
    }

    function formatTime(time) {
        if (isNaN(time)) return "00:00";
        const mins = Math.floor(time / 60);
        const secs = Math.floor(time % 60);
        return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;
    }

    function showMiniPlayer(state) {
        if (!activeVideoElement) return;
        miniPlayerState = { active: true, state: state };

        const movie = movies.find(m => m.id === String(state.movieId));
        miniPlayerContainer.innerHTML = `
            <div id="mini-player-video-wrapper" class="w-full h-full"></div>
            <div class="absolute inset-0 bg-black/20 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
                <button id="mini-player-expand" class="w-10 h-10 bg-black/50 text-white rounded-full flex items-center justify-center text-lg"><i class="fas fa-expand-arrows-alt"></i></button>
            </div>
            <button id="mini-player-close" class="absolute top-1 right-1 w-6 h-6 bg-black/50 text-white rounded-full flex items-center justify-center text-xs opacity-70 hover:opacity-100">&times;</button>
            <div class="absolute bottom-1 left-1 text-white text-xs font-bold bg-black/50 px-1 rounded truncate max-w-[90%]">${movie?.title || ''}</div>
        `;

        document.getElementById('mini-player-video-wrapper').appendChild(activeVideoElement);
        miniPlayerContainer.classList.remove('hidden');

        document.getElementById('mini-player-close').addEventListener('click', (e) => { e.stopPropagation(); hideMiniPlayer(true); });
        document.getElementById('mini-player-expand').addEventListener('click', (e) => { e.stopPropagation(); navigate(miniPlayerState.state); });

        makeDraggable(miniPlayerContainer);
    }

    function hideMiniPlayer(shouldStop = false) {
        if (shouldStop && activeVideoElement) {
            activeVideoElement.pause();
            activeVideoElement.src = '';
            activeVideoElement.remove();
            activeVideoElement = null;
        }
        miniPlayerState.active = false;
        miniPlayerContainer.classList.add('hidden');
        miniPlayerContainer.innerHTML = '';
    }

    function makeDraggable(elmnt) {
        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;

        const dragMouseDown = (e) => {
            if (e.target.closest('#mini-player-close') || e.target.closest('#mini-player-expand')) {
                return;
            }

            e = e || window.event;
            if (e.type === 'touchstart') {
                // e.preventDefault();
            }

            elmnt.classList.add('grabbing');

            pos3 = e.clientX || e.touches[0].clientX;
            pos4 = e.clientY || e.touches[0].clientY;

            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;

            document.ontouchend = closeDragElement;
            document.ontouchmove = elementDrag;
        };

        const elementDrag = (e) => {
            e = e || window.event;
            if (e.type === 'touchmove'){
                 e.preventDefault();
            }

            const clientX = e.clientX || e.touches[0].clientX;
            const clientY = e.clientY || e.touches[0].clientY;

            pos1 = pos3 - clientX;
            pos2 = pos4 - clientY;
            pos3 = clientX;
            pos4 = clientY;

            let newTop = elmnt.offsetTop - pos2;
            let newLeft = elmnt.offsetLeft - pos1;

            const screenWidth = window.innerWidth;
            const screenHeight = window.innerHeight;
            const elmntWidth = elmnt.offsetWidth;
            const elmntHeight = elmnt.offsetHeight;

            newTop = Math.max(0, newTop);
            newLeft = Math.max(0, newLeft);
            newTop = Math.min(screenHeight - elmntHeight, newTop);
            newLeft = Math.min(screenWidth - elmntWidth, newLeft);

            elmnt.style.top = newTop + "px";
            elmnt.style.left = newLeft + "px";
        };

        const closeDragElement = () => {
            elmnt.classList.remove('grabbing');
            document.onmouseup = null;
            document.onmousemove = null;
            document.ontouchend = null;
            document.ontouchmove = null;
        };

        elmnt.onmousedown = dragMouseDown;
        elmnt.ontouchstart = dragMouseDown;
    }

    function setupPlayerControls(state) {
        const playerPage = document.getElementById('player');
        const playerContainer = playerPage.querySelector('#player-container');
        const controls = playerPage.querySelector('.player-controls');
        const playerLoadingSpinner = playerPage.querySelector('#player-loading-spinner');

        if (activeVideoElement) {
            activeVideoElement.remove();
            activeVideoElement = null;
        }

        let video = null;
        let isVideoInitialized = false;
        let isNativeFullscreen = false;

        window.exitNativeFullscreen = () => {
            isNativeFullscreen = false;
            fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
        };

        const movie = movies.find(m => m.id === String(state.movieId));
        const episodeIndex = state.episodeIndex || 0;
        const sources = movie.type === 'series' && movie.episodes ? movie.episodes[episodeIndex].sources : movie.sources;
        const defaultQuality = '720p';

        const playPauseBtn = playerPage.querySelector('#play-pause-btn');
        const centerPlayBtn = playerPage.querySelector('#center-play-btn');
        const centerPauseBtn = playerPage.querySelector('#center-pause-btn');
        const seekBar = playerPage.querySelector('#seek-bar');
        const currentTimeEl = playerPage.querySelector('#current-time');
        const totalTimeEl = playerPage.querySelector('#total-time');
        const volumeBtn = playerPage.querySelector('#volume-btn');
        const fullscreenBtn = playerPage.querySelector('#fullscreen-btn');
        const backBtn = playerPage.querySelector('#player-back-button');
        const rewindIndicator = playerPage.querySelector('#rewind-indicator');
        const forwardIndicator = playerPage.querySelector('#forward-indicator');
        const settingsBtn = playerPage.querySelector('#player-settings-btn');
        const settingsPanel = playerPage.querySelector('#player-settings-panel');

        // Cast tugmasi
        const castBtn = playerPage.querySelector('#cast-btn');

        let touchTimer = null;
        let lastTap = 0;
        let pressTimer = null;
        let originalPlaybackRate = 1.0;
        let startX = 0;
        let startY = 0;
        const speedIndicator = document.createElement('div');
        speedIndicator.className = 'speed-indicator';
        speedIndicator.textContent = '2x';
        playerContainer.appendChild(speedIndicator);

        const initializeVideoPlayback = () => {
            if (isVideoInitialized) return;
            isVideoInitialized = true;

            playerLoadingSpinner.classList.remove('hidden');
            centerPlayBtn.classList.add('hidden');

            video = document.createElement('video');
            activeVideoElement = video;
            video.id = 'main-video';
            video.className = 'w-full h-full';
            video.style.objectFit = 'contain';
            video.autoplay = true;
            video.controls = false;
            video.setAttribute('playsinline', '');
            // Bu atribut kross-origin video oqimlari uchun kerak bo'lishi mumkin
            video.setAttribute('crossorigin', 'anonymous');

            // Xatolik yuz berganda foydalanuvchiga bildirish. Bu xabar CORS yoki tarmoq muammosiga ishora qiladi.
            video.addEventListener('error', (e) => {
                try {
                    playerLoadingSpinner.classList.add('hidden');
                    centerPlayBtn.classList.remove('hidden');
                } catch (ex) {}
                showToast('Videoni yuklashda xatolik: manba mavjud emas yoki CORS siyosati bloklagan.');
            });

            // HLS oqimini qo'llab-quvvatlash: agar filmning oqim turi hls bo'lsa va hls.js brauzer tomonidan qo'llab-quvvatlansa
            const isHls = movie.streamType === 'hls' || (movie.streamType === undefined && sources['hls']);
            let chosenUrl = null;
            if (isHls && window.Hls && Hls.isSupported()) {
                // HLS manbasini aniqlash: admin tomonidan saqlangan sources['hls'] yoki default sifat oqimi
                chosenUrl = sources['hls'] || sources[defaultQuality] || Object.values(sources).find(s => s);
                window.currentVideoUrl = chosenUrl;
                const hls = new Hls();
                hls.loadSource(chosenUrl);
                hls.attachMedia(video);
                hls.on(Hls.Events.MANIFEST_PARSED, () => {
                    video.play().catch(() => {});
                });
            } else {
                // DASH yoki MP4 uchun oddiy video oqimi
                chosenUrl = sources[defaultQuality] || Object.values(sources).find(s => s);
                window.currentVideoUrl = chosenUrl;
                video.src = chosenUrl;
            }

            // Subtitles qo'shish
            if (movie.subtitles && typeof movie.subtitles === 'object') {
                Object.keys(movie.subtitles).forEach(lang => {
                    if (movie.subtitles[lang]) {
                        const track = document.createElement('track');
                        track.kind = 'subtitles';
                        track.label = lang.toUpperCase();
                        track.srclang = lang;
                        track.src = movie.subtitles[lang];
                        video.appendChild(track);
                    }
                });
            }

            playerContainer.prepend(video);

            // Saqlangan vaqtni tiklash
            try {
                const savedTime = localStorage.getItem(`soundora-play-position-${movie.id}`);
                if (savedTime) {
                    video.currentTime = parseFloat(savedTime);
                }
            } catch (e) {}

            // Video hodisalarini qo'shish
            video.addEventListener('waiting', onWaiting);
            video.addEventListener('playing', onPlaying);
            video.addEventListener('play', onPlay);
            video.addEventListener('pause', onPause);
            video.addEventListener('timeupdate', onTimeUpdate);
            video.addEventListener('loadedmetadata', onLoadedMetadata);
            video.addEventListener('ended', onEnded);
            video.addEventListener('volumechange', onVolumeChange);
        };

        const showIndicator = (indicator) => {
            indicator.classList.add('show');
            setTimeout(() => indicator.classList.remove('show'), 600);
        };

        const togglePlay = () => {
            if (!isVideoInitialized) {
                initializeVideoPlayback();
            } else if (video) {
                if (video.paused) {
                    video.play();
                } else {
                    video.pause();
                }
            }
        };

        const showControls = () => {
            controls.classList.add('visible');
            clearTimeout(playerControlTimeout);
            if (video && !video.paused) {
                playerControlTimeout = setTimeout(() => {
                    // Only hide controls if the settings panel is not open; do not forcibly close the settings panel here
                    if (!settingsPanel.classList.contains('open')) {
                        controls.classList.remove('visible');
                    }
                }, 4000);
            }
        };

        const onPlay = () => {
            playPauseBtn.innerHTML = '<i class="fas fa-pause"></i>';
            if (playerLoadingSpinner.classList.contains('hidden')) {
                centerPlayBtn.classList.add('hidden');
                centerPauseBtn.classList.remove('hidden');
            }
            showControls();
        };
        const onPause = () => {
            playPauseBtn.innerHTML = '<i class="fas fa-play"></i>';
            if (playerLoadingSpinner.classList.contains('hidden')) {
                centerPlayBtn.classList.remove('hidden');
            }
            centerPauseBtn.classList.add('hidden');
            showControls();
        };
        const onTimeUpdate = () => {
            if (!video) return;
            seekBar.value = video.currentTime;
            currentTimeEl.textContent = formatTime(video.currentTime);
            if (Math.round(video.currentTime) % 5 === 0) {
                localStorage.setItem(`soundora-play-position-${movie.id}`, video.currentTime);
            }
        };
        const onLoadedMetadata = () => {
            if (!video) return;
            seekBar.max = video.duration;
            totalTimeEl.textContent = formatTime(video.duration);
        };
        const onEnded = () => {
            if(movie.type === 'series' && episodeIndex < movie.episodes.length - 1) {
                navigate({ page: 'player', movieId: movie.id, episodeIndex: episodeIndex + 1 });
            }
        };
        const onVolumeChange = () => {
            if (!video) return;
            volumeBtn.innerHTML = `<i class="fas ${video.muted || video.volume === 0 ? 'fa-volume-mute' : 'fa-volume-up'}"></i>`;
        };

        const onWaiting = () => {
            playerLoadingSpinner.classList.remove('hidden');
            centerPlayBtn.classList.add('hidden');
            centerPauseBtn.classList.add('hidden');
        };
        const onPlaying = () => {
            playerLoadingSpinner.classList.add('hidden');
            if (video && !video.paused) {
                centerPlayBtn.classList.add('hidden');
                centerPauseBtn.classList.remove('hidden');
            }
        };

        const handleTouchStart = (e) => {
            if (e.target.closest('button') || e.target.closest('input[type="range"]')) {
                return;
            }

            startX = e.touches[0].clientX;
            startY = e.touches[0].clientY;

            const currentTime = new Date().getTime();
            const tapLength = currentTime - lastTap;
            clearTimeout(touchTimer);

            if (tapLength < 300 && tapLength > 0) {
                e.preventDefault();
                if (!isVideoInitialized) return;

                const rect = playerContainer.getBoundingClientRect();
                const tapX = e.touches[0].clientX - rect.left;

                if (tapX < rect.width / 3) {
                    video.currentTime -= 10;
                    showIndicator(rewindIndicator);
                } else if (tapX > rect.width * 2 / 3) {
                    video.currentTime += 10;
                    showIndicator(forwardIndicator);
                } else {
                    togglePlay();
                }
                lastTap = 0;
            } else {
                pressTimer = setTimeout(() => {
                    if (!video) return;
                    originalPlaybackRate = video.playbackRate;
                    video.playbackRate = 2.0;
                    speedIndicator.style.opacity = '1';
                }, 400);
                lastTap = currentTime;
            }
        };

        const handleTouchEnd = (e) => {
            clearTimeout(pressTimer);
            if (video && video.playbackRate === 2.0) {
                video.playbackRate = originalPlaybackRate;
            }
            speedIndicator.style.opacity = '0';

            const currentTime = new Date().getTime();
            const tapLength = currentTime - lastTap;
            if (tapLength < 300 && tapLength > 0 && !e.target.closest('button') && !e.target.closest('input[type="range"]')) {
                 touchTimer = setTimeout(() => {
                    if (settingsPanel.classList.contains('open')) {
                        settingsPanel.classList.remove('open');
                    } else {
                        controls.classList.toggle('visible');
                    }
                    if (controls.classList.contains('visible') && video && !video.paused) {
                        showControls();
                    } else {
                        clearTimeout(playerControlTimeout);
                    }
                 }, 300);
            }
        };

        const handleTouchMove = (e) => {
            const moveX = Math.abs(e.touches[0].clientX - startX);
            const moveY = Math.abs(e.touches[0].clientY - startY);
            if (moveX > 10 || moveY > 10) {
                clearTimeout(pressTimer);
                clearTimeout(touchTimer);
                lastTap = 0;
                if (video && video.playbackRate === 2.0) {
                    video.playbackRate = originalPlaybackRate;
                }
                speedIndicator.style.opacity = '0';
            }
        };

        playerContainer.addEventListener('touchstart', handleTouchStart);
        playerContainer.addEventListener('touchend', handleTouchEnd);
        playerContainer.addEventListener('touchmove', handleTouchMove);

        playerContainer.addEventListener('click', (e) => {
            if ('ontouchstart' in document.documentElement) return;
            if (e.target.closest('button') || e.target.closest('input[type="range"]')) return;
            if (settingsPanel.classList.contains('open')) {
                settingsPanel.classList.remove('open');
            } else {
                controls.classList.toggle('visible');
            }
            showControls();
        });

        playPauseBtn.addEventListener('click', (e) => { e.stopPropagation(); togglePlay(); });
        centerPlayBtn.addEventListener('click', (e) => { e.stopPropagation(); togglePlay(); });
        centerPauseBtn.addEventListener('click', (e) => { e.stopPropagation(); togglePlay(); });

        seekBar.addEventListener('input', (e) => {
            e.stopPropagation();
            if (video) video.currentTime = seekBar.value;
        });
        volumeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (video) video.muted = !video.muted;
        });

        fullscreenBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            if (window.Android && typeof window.Android.toggleFullscreen === 'function') {
                isNativeFullscreen = !isNativeFullscreen;
                window.Android.toggleFullscreen(isNativeFullscreen);
                fullscreenBtn.innerHTML = isNativeFullscreen ? '<i class="fas fa-compress"></i>' : '<i class="fas fa-expand"></i>';
                // Ensure video continues playing when toggling fullscreen on Android
                if (video && video.paused) {
                    video.play().catch(() => {});
                }
            } else {
                // Prefer using the video element for fullscreen to ensure proper rendering on mobile and desktop.
                if (!document.fullscreenElement) {
                    if (video && typeof video.requestFullscreen === 'function') {
                        video.requestFullscreen().catch(err => console.error(err));
                    } else {
                        const playerEl = document.getElementById('player-container');
                        playerEl.requestFullscreen().catch(err => console.error(err));
                    }
                } else {
                    document.exitFullscreen();
                }
                // Ensure video continues playing after entering/exiting fullscreen
                if (video && video.paused) {
                    video.play().catch(() => {});
                }
            }
        });

        document.addEventListener('fullscreenchange', () => {
            if (!window.Android) {
                if (document.fullscreenElement) {
                    fullscreenBtn.innerHTML = '<i class="fas fa-compress"></i>';
                } else {
                    fullscreenBtn.innerHTML = '<i class="fas fa-expand"></i>';
                }
            }
        });

        backBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            try {
                // Mark that we are returning from the player page to allow auto-resume on movie card
                sessionStorage.setItem('returnFromPlayer', 'true');
            } catch (err) {}
            history.back();
        });

        const mainSettings = settingsPanel.querySelector('#settings-main-view');
        const qualitySettings = settingsPanel.querySelector('#settings-quality-view');
        const speedSettings = settingsPanel.querySelector('#settings-speed-view');
        const subtitlesSettings = settingsPanel.querySelector('#settings-subtitles-view');
        const moreSettings = settingsPanel.querySelector('#settings-more-view');

        const showSettingsView = (viewToShow) => {
            // Har bir sozlamalar paneli yashiriladi, shu jumladan audio sozlamalar ko'rinishi
            [mainSettings, qualitySettings, speedSettings, audioSettings, subtitlesSettings, moreSettings].forEach(v => v.classList.add('hidden'));
            viewToShow.classList.remove('hidden');
        };

        settingsBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            settingsPanel.classList.toggle('open');
            showSettingsView(mainSettings);
            showControls();
        });

        // Prevent clicks inside the settings panel from bubbling up to the playerContainer. Without this, clicking a sub-setting
        // (like quality, speed, audio or subtitles) would bubble to the playerContainer click handler and close the panel
        // immediately. By stopping propagation here, we ensure the user can interact with the settings submenus without
        // accidentally hiding the entire panel.
        settingsPanel.addEventListener('click', (e) => {
            e.stopPropagation();
        });
        // On touch devices, also stop touch events from propagating out of the settings panel (prevents panel from closing on mobile)
        settingsPanel.addEventListener('touchstart', (e) => { e.stopPropagation(); });
        settingsPanel.addEventListener('touchend', (e) => { e.stopPropagation(); });

        const currentQualityLabel = settingsPanel.querySelector('#current-quality-label');
        currentQualityLabel.textContent = defaultQuality;
        settingsPanel.querySelector('#quality-settings-btn').addEventListener('click', () => {
            const qualities = Object.keys(sources).filter(q => sources[q]);
            qualitySettings.innerHTML = `
                <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                    <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                    <h3 class="font-bold text-lg" data-lang-key="quality"></h3>
                </div>
                <div class="flex-grow overflow-y-auto">
                ${qualities.map(q => `<div class="settings-item quality-option ${q === currentQualityLabel.textContent ? 'active' : ''}" data-quality="${q}"><span>${q}</span><i class="fas fa-check ${q === currentQualityLabel.textContent ? '' : 'text-transparent'}"></i></div>`).join('')}
                </div>
            `;
            setLanguage(currentLanguage);
            qualitySettings.querySelector('.back-to-main-settings').addEventListener('click', () => showSettingsView(mainSettings));
            qualitySettings.querySelectorAll('.quality-option').forEach(opt => {
                opt.addEventListener('click', () => {
                    if (!video) return;
                    const newQuality = opt.dataset.quality;
                    const currentTime = video.currentTime;
                        // Yangilangan manba URLsi
                        const newSrc = sources[newQuality];
                        // HLS oqimi uchun sifatni qo'lda o'zgartirishni qo'llab-quvvatlamaymiz, faqat MP4/DASH uchun
                        if (newSrc) {
                            video.src = newSrc;
                            window.currentVideoUrl = newSrc;
                            video.currentTime = currentTime;
                            video.play().catch(() => {});
                            currentQualityLabel.textContent = newQuality;
                        }
                        // Do not close the entire settings panel immediately upon selecting a quality; instead return to the main
                        // settings view to allow further changes. If you still wish to close the panel, you can tap outside.
                        showSettingsView(mainSettings);
                });
            });
            showSettingsView(qualitySettings);
        });

        const currentSpeedLabel = settingsPanel.querySelector('#current-speed-label');
        // Audio settings: label element and view container. This will display the currently selected audio language.
        const currentAudioLabel = settingsPanel.querySelector('#current-audio-label');
        const audioSettings = settingsPanel.querySelector('#settings-audio-view');
        // Initialize default audio label
        if (currentAudioLabel) {
            currentAudioLabel.textContent = 'Auto';
        }
        settingsPanel.querySelector('#speed-settings-btn').addEventListener('click', () => {
            const speeds = [0.5, 0.75, 1, 1.5, 2];
            const currentRate = video ? video.playbackRate : 1;
            speedSettings.innerHTML = `
                <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                    <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                    <h3 class="font-bold text-lg" data-lang-key="playbackSpeed"></h3>
                </div>
                <div class="flex-grow overflow-y-auto">
                ${speeds.map(s => `<div class="settings-item speed-option ${s === currentRate ? 'active' : ''}" data-speed="${s}"><span>${s === 1 ? `${s}x (${translations[currentLanguage].normalSpeed})` : `${s}x`}</span><i class="fas fa-check ${s === currentRate ? '' : 'text-transparent'}"></i></div>`).join('')}
                </div>
            `;
            setLanguage(currentLanguage);
            speedSettings.querySelector('.back-to-main-settings').addEventListener('click', () => showSettingsView(mainSettings));
            speedSettings.querySelectorAll('.speed-option').forEach(opt => {
                opt.addEventListener('click', () => {
                    if (!video) return;
                    const newSpeed = parseFloat(opt.dataset.speed);
                    video.playbackRate = newSpeed;
                    currentSpeedLabel.textContent = newSpeed === 1 ? translations[currentLanguage].normalSpeed : `${newSpeed}x`;
                    setLanguage(currentLanguage);
                    // Do not close the panel entirely; return to the main settings view so users can adjust more settings
                    showSettingsView(mainSettings);
                });
            });
            showSettingsView(speedSettings);
        });

        // Audio settings button handler
        const audioButton = settingsPanel.querySelector('#audio-settings-btn');
        if (audioButton) {
            audioButton.addEventListener('click', (ev) => {
                // Prevent bubbling to player container which would close the panel
                ev.stopPropagation();
                if (!video) return;
                // Determine available audio languages. Prefer movie.audioLangs if defined; otherwise parse from stored audio files; lastly fall back to video.audioTracks.
                let audioLangs = [];
                // 1. Use explicitly defined audioLangs on the movie document
                if (Array.isArray(movie.audioLangs) && movie.audioLangs.length > 0) {
                    audioLangs = movie.audioLangs;
                }
                // 2. If no audioLangs defined, attempt to infer languages from audioFiles names (e.g. "en.mp3" -> "en")
                if (audioLangs.length === 0 && Array.isArray(movie.audioFiles) && movie.audioFiles.length > 0) {
                    audioLangs = movie.audioFiles.map(f => {
                        const name = f.split('/').pop();
                        const base = name.split('.')[0];
                        return base.toLowerCase();
                    });
                }
                // 3. Fallback to audioTracks API
                if (audioLangs.length === 0 && video && video.audioTracks && video.audioTracks.length > 0) {
                    audioLangs = Array.from(video.audioTracks).map(at => at.language || at.label || '').filter(Boolean);
                }
                // Remove duplicates and falsy values
                audioLangs = Array.from(new Set(audioLangs.filter(Boolean)));
                // Always include a default/auto option
                const options = ['default', ...audioLangs];
                // Build options HTML
                const optionsHTML = options.map(lang => {
                    const isActive = (currentAudioLabel && ((currentAudioLabel.textContent || '').toLowerCase() === lang.toLowerCase() || (lang === 'default' && currentAudioLabel.textContent === 'Auto')));
                    const label = (lang === 'default') ? 'Auto' : lang.toUpperCase();
                    return `<div class="settings-item audio-option ${isActive ? 'active' : ''}" data-lang="${lang}"><span>${label}</span><i class="fas fa-check ${isActive ? '' : 'text-transparent'}"></i></div>`;
                }).join('');
                audioSettings.innerHTML = `
                    <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                        <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                        <h3 class="font-bold text-lg">Audio</h3>
                    </div>
                    <div class="flex-grow overflow-y-auto">${optionsHTML}</div>
                `;
                // Back button returns to main view without closing the panel
                audioSettings.querySelector('.back-to-main-settings').addEventListener('click', (evt) => { evt.stopPropagation(); showSettingsView(mainSettings); });
                // Set click events for each audio option
                audioSettings.querySelectorAll('.audio-option').forEach(opt => {
                    opt.addEventListener('click', (e2) => {
                        e2.stopPropagation();
                        const selected = opt.dataset.lang;
                        // Update video audio tracks if supported
                        if (video && video.audioTracks && video.audioTracks.length > 0) {
                            Array.from(video.audioTracks).forEach(track => {
                                if (selected === 'default') {
                                    track.enabled = false;
                                } else {
                                    track.enabled = (track.language || track.label || '').toLowerCase() === selected.toLowerCase();
                                }
                            });
                        }
                        // Update label
                        if (currentAudioLabel) {
                            currentAudioLabel.textContent = (selected === 'default') ? 'Auto' : selected.toUpperCase();
                        }
                        // Return to main settings instead of closing panel completely
                        showSettingsView(mainSettings);
                    });
                });
                showSettingsView(audioSettings);
            });
        }

        const currentSubtitleLabel = settingsPanel.querySelector('#current-subtitle-label');
        settingsPanel.querySelector('#subtitles-settings-btn').addEventListener('click', () => {
            // When opening subtitle settings, prevent event from bubbling to the player container
            if (!video) return;
            // Determine available subtitle languages. Prefer explicit movie.subtitleLangs; otherwise parse from subtitleFiles names; lastly, fallback to video.textTracks.
            let subtitleLangs = [];
            if (Array.isArray(movie.subtitleLangs) && movie.subtitleLangs.length > 0) {
                subtitleLangs = movie.subtitleLangs;
            }
            // If no explicit subtitleLangs, infer from subtitleFiles names (e.g. "ru.vtt" -> "ru")
            if (subtitleLangs.length === 0 && Array.isArray(movie.subtitleFiles) && movie.subtitleFiles.length > 0) {
                subtitleLangs = movie.subtitleFiles.map(f => {
                    const name = f.split('/').pop();
                    const base = name.split('.')[0];
                    return base.toLowerCase();
                });
            }
            // If still none, use available text tracks on the video element
            const tracks = Array.from(video.textTracks);
            if (subtitleLangs.length === 0 && tracks.length > 0) {
                subtitleLangs = tracks.map(t => t.language || '').filter(Boolean);
            }
            // Build track info from the video element, but we also need labels to show in UI. We'll map languages to track objects if available.
            let trackOptions = [];
            if (tracks.length > 0) {
                trackOptions = tracks.map(track => ({ lang: track.language, label: track.label || track.language }));
            }
            // Remove duplicates
            subtitleLangs = Array.from(new Set(subtitleLangs.filter(Boolean)));
            // Determine currently active subtitle
            let activeTrackLang = 'off';
            tracks.forEach(track => { if (track.mode === 'showing') activeTrackLang = track.language; });
            // Build options: start with 'off'
            let optionsHTML = `<div class="settings-item subtitle-option ${activeTrackLang === 'off' ? 'active' : ''}" data-lang="off"><span>${translations[currentLanguage].noSubtitles}</span><i class="fas fa-check ${activeTrackLang === 'off' ? '' : 'text-transparent'}"></i></div>`;
            // For each subtitleLang, find a matching track label if available, otherwise just uppercase the language
            subtitleLangs.forEach(lang => {
                const matchingTrack = trackOptions.find(t => (t.lang || '').toLowerCase() === lang.toLowerCase());
                const label = matchingTrack ? matchingTrack.label : lang.toUpperCase();
                const isActive = lang.toLowerCase() === activeTrackLang.toLowerCase();
                optionsHTML += `<div class="settings-item subtitle-option ${isActive ? 'active' : ''}" data-lang="${lang}"><span>${label}</span><i class="fas fa-check ${isActive ? '' : 'text-transparent'}"></i></div>`;
            });
            subtitlesSettings.innerHTML = `
                <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                    <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                    <h3 class="font-bold text-lg" data-lang-key="subtitles"></h3>
                </div>
                <div class="flex-grow overflow-y-auto">${optionsHTML}</div>
            `;
            setLanguage(currentLanguage);
            // Back button returns to main settings instead of closing the panel
            subtitlesSettings.querySelector('.back-to-main-settings').addEventListener('click', (evt) => { evt.stopPropagation(); showSettingsView(mainSettings); });
            subtitlesSettings.querySelectorAll('.subtitle-option').forEach(opt => {
                opt.addEventListener('click', (e2) => {
                    e2.stopPropagation();
                    const selectedLang = opt.dataset.lang;
                    // Update text track visibility
                    Array.from(video.textTracks).forEach(track => {
                        track.mode = (selectedLang !== 'off' && track.language && track.language.toLowerCase() === selectedLang.toLowerCase()) ? 'showing' : 'hidden';
                    });
                    currentSubtitleLabel.textContent = selectedLang === 'off' ? translations[currentLanguage].noSubtitles : selectedLang.toUpperCase();
                    setLanguage(currentLanguage);
                    // Return to main settings instead of closing the panel
                    showSettingsView(mainSettings);
                });
            });
            showSettingsView(subtitlesSettings);
        });

        settingsPanel.querySelector('#more-settings-btn').addEventListener('click', () => {
            moreSettings.innerHTML = `
                <div class="p-4 border-b border-gray-700/50 flex items-center gap-4">
                    <button class="back-to-main-settings"><i class="fas fa-arrow-left"></i></button>
                    <h3 class="font-bold text-lg" data-lang-key="more"></h3>
                </div>
                <div class="flex-grow overflow-y-auto">
                    <div class="settings-item">
                        <span data-lang-key="loopVideo"></span>
                        <div class="relative inline-block w-12 mr-2 align-middle select-none transition duration-200 ease-in">
                            <input type="checkbox" id="loop-toggle" class="toggle-checkbox absolute block w-7 h-7 rounded-full bg-white border-4 appearance-none cursor-pointer" ${video && video.loop ? 'checked' : ''}/>
                            <label for="loop-toggle" class="toggle-label block overflow-hidden h-7 rounded-full bg-gray-600 cursor-pointer"></label>
                        </div>
                    </div>
                </div>
            `;
            setLanguage(currentLanguage);
            moreSettings.querySelector('.back-to-main-settings').addEventListener('click', () => showSettingsView(mainSettings));
            moreSettings.querySelector('#loop-toggle').addEventListener('change', (e) => {
                if (video) video.loop = e.target.checked;
            });
            showSettingsView(moreSettings);
        });

        const closeEpisodesBtn = playerPage.querySelector('#close-episodes-btn');
        const toggleEpisodesBtn = playerPage.querySelector('#toggle-episodes-btn');
        const episodeListPanel = playerPage.querySelector('#episode-list-panel');

        if (toggleEpisodesBtn) {
            toggleEpisodesBtn.addEventListener('click', e => {
                e.stopPropagation();
                episodeListPanel.classList.toggle('translate-x-full');
            });
        }
        if (closeEpisodesBtn) {
            closeEpisodesBtn.addEventListener('click', e => {
                e.stopPropagation();
                episodeListPanel.classList.add('translate-x-full');
            });
        }

        playerPage.querySelectorAll('.episode-item').forEach(item => {
            item.addEventListener('click', (e) => {
                e.stopPropagation();
                const movieId = e.currentTarget.dataset.movieId;
                const episodeIndex = parseInt(e.currentTarget.dataset.episodeIndex, 10);
                navigate({ page: 'player', movieId, episodeIndex });
            });
        });

        // Chromecast tugmasi: foydalanuvchi bosganda video TV-ga uzatiladi
        if (castBtn && window.cast && cast.framework) {
            castBtn.addEventListener('click', async (e) => {
                e.stopPropagation();
                try {
                    const castContext = cast.framework.CastContext.getInstance();
                    let session = castContext.getCurrentSession();
                    if (!session) {
                        session = await castContext.requestSession();
                    }
                    if (session && window.currentVideoUrl) {
                        const mimeType = (movie.streamType === 'hls') ? 'application/x-mpegurl' : 'video/mp4';
                        const mediaInfo = new chrome.cast.media.MediaInfo(window.currentVideoUrl, mimeType);
                        mediaInfo.metadata = new chrome.cast.media.GenericMediaMetadata();
                        mediaInfo.metadata.title = movie.title;
                        const request = new chrome.cast.media.LoadRequest(mediaInfo);
                        await session.loadMedia(request);
                    }
                } catch (err) {
                    console.error('Cast load error', err);
                }
            });
        }

        initializeVideoPlayback();
        showControls();
    }

    let unsubMovies = null;
    let unsubUser = null;
    let unsubNotifications = null;

    async function createUserData(user, extraData = {}) {
        const userRef = doc(db, "users", user.uid);
        const userDoc = await getDoc(userRef);
        if (userDoc.exists()) return userDoc.data();

        const counterRef = doc(db, "counters", "userCounter");
        let newCount;
        try {
            await runTransaction(db, async (transaction) => {
                const counterDoc = await transaction.get(counterRef);
                const currentCount = counterDoc.exists() ? counterDoc.data().count : 1000;
                newCount = currentCount + 1;
                transaction.set(counterRef, { count: newCount }, { merge: true });
            });
        } catch (e) {
            console.error("Transaction failed: ", e);
            newCount = Math.floor(1000 + Math.random() * 9000);
        }
        const customId = `A-${String(newCount).padStart(4, '0')}`;

        const newUser = {
            uid: user.uid,
            email: user.email || null,
            phoneNumber: user.phoneNumber || null,
            displayName: extraData.name || user.displayName || user.phoneNumber || user.email?.split('@')[0],
            photoURL: user.photoURL || '',
            createdAt: serverTimestamp(),
            favorites: [],
            isPremium: false,
            role: 'user',
            customId: customId,
            dob: extraData.dob || null,
            secretWord: extraData.secretWord || null,
            devices: []
        };
        await setDoc(userRef, newUser);
        return newUser;
    }

    function initFirebaseAndLoadContent() {
        let isInitialAuthCheckDone = false;

        onAuthStateChanged(auth, async (user) => {
            if (unsubUser) unsubUser();
            if (user) {
                // Save signed-in account to localStorage for account switching
                try {
                    const accounts = JSON.parse(localStorage.getItem('soundora-accounts')) || [];
                    if (!accounts.some(acc => acc.uid === user.uid)) {
                        accounts.push({ uid: user.uid, displayName: user.displayName, email: user.email, phoneNumber: user.phoneNumber });
                        localStorage.setItem('soundora-accounts', JSON.stringify(accounts));
                    }
                } catch (e) {
                    console.error('Error storing account info', e);
                }
                // Foydalanuvchi ma'lumotlarini yaratish yoki olish
                const userData = await createUserData(user);

                if (user.email) {
                    setupPushNotifications();
                }
                // Listen for changes to the current user's document and update UI in real time.
                unsubUser = onSnapshot(doc(db, "users", user.uid), (userDoc) => {
                    currentUser = { uid: userDoc.id, ...userDoc.data() };
                    // Foydalanuvchining til filtri ma'lumotini hujjatdan o'qish va qo'llash. Agar mavjud bo'lsa,
                    // selectedLangFilter o'zgaruvchisini yangilaymiz va tugmani qayta chizamiz.
                    try {
                        const data = userDoc.data();
                        if (data && data.preferredMovieLang) {
                            selectedLangFilter = data.preferredMovieLang;
                            // UI yangilanishi
                            renderLanguageButton();
                            buildLanguageDropdown();
                            // Agar hozirgi sahifa asosiy bo'lsa, filmlar ro'yxatini qayta filtrlaymiz
                            if (currentHistoryState?.page === 'main') {
                                const activeCategoryButton = document.querySelector('#category-nav .category-btn.active');
                                const currentCategory = activeCategoryButton ? activeCategoryButton.dataset.categoryValue : 'categoryAll';
                                filterAndDisplayMovies(currentCategory);
                            }
                        }
                    } catch (err) {
                        console.error('Error retrieving preferred movie language', err);
                    }
                    // If initial auth check is done, re-render the current page. When on the profile
                    // page specifically, call renderProfilePage() directly to ensure the latest user
                    // information (like premium status or profile data) is reflected without
                    // navigating away and back. Otherwise fall back to renderPage with the
                    // current history state.
                    if (isInitialAuthCheckDone) {
                        if (currentHistoryState?.page === 'profile') {
                            renderProfilePage();
                        } else {
                            renderPage(currentHistoryState);
                        }
                    }
                });
            } else {
                currentUser = null;
            }

            if (!isInitialAuthCheckDone) {
                isInitialAuthCheckDone = true;
                const initialHash = window.location.hash.substring(1);
                const stateFromHash = pageRenderers[initialHash] ? { page: initialHash, ...Object.fromEntries(new URLSearchParams(window.location.search)) } : { page: 'main' };
                processNavigation(history.state || stateFromHash, !history.state);
            } else {
                renderPage(currentHistoryState);
                if (currentHistoryState?.page === 'main' && movies.length > 0) {
                    populateCategories();
                    filterAndDisplayMovies('categoryAll');
                }
                 if (postLoginRedirect) {
                     const dest = { ...postLoginRedirect };
                     postLoginRedirect = null;
                     navigate(dest);
                 } else if (['login', 'register', 'guest-profile'].includes(currentHistoryState?.page)) {
                     navigate({ page: 'main' });
                 }
            }
        });

        unsubMovies = onSnapshot(collection(db, "movies"), (snapshot) => {
            movies = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            if (isInitialAuthCheckDone) {
                renderPage(currentHistoryState);
                if (currentHistoryState?.page === 'main') {
                    populateCategories();
                    filterAndDisplayMovies('categoryAll');
                }
            }
        }, (error) => {
            console.error("Error fetching movies: ", error);
            const moviesGrid = document.getElementById('movies-grid');
            if(moviesGrid) {
                moviesGrid.innerHTML = `<p class="col-span-full text-center text-red-500 mt-8">Ma'lumotlarni yuklab bo'lmadi. Internet aloqasini tekshiring.</p>`;
            }
        });
    }

    // -- Modal helper functions for rating and account switching --
    let ratingMovieId = null;
    // Holds the current rating value selected in the modal
    let selectedRatingValue = 0;
    function setupRatingModal() {
        const modal = document.getElementById('rating-modal');
        const starsContainer = document.getElementById('rating-stars');
        const closeBtn = document.getElementById('rating-modal-close');
        const submitBtn = document.getElementById('rating-submit');
        // Build stars only once
        if (starsContainer && starsContainer.children.length === 0) {
            for (let i = 1; i <= 10; i++) {
                const star = document.createElement('i');
                star.className = 'fas fa-star text-2xl text-gray-500 cursor-pointer';
                star.dataset.value = i;
                star.addEventListener('click', () => updateRatingStars(i));
                starsContainer.appendChild(star);
            }
        }
        closeBtn?.addEventListener('click', () => {
            modal?.classList.add('hidden');
        });
        submitBtn?.addEventListener('click', () => {
            // Submit the rating and update the movie rating
            if (ratingMovieId && selectedRatingValue > 0) {
                submitRating(ratingMovieId, selectedRatingValue);
            }
            modal?.classList.add('hidden');
            // Show thank you message
            showToast(translations[currentLanguage]?.thankYouForRating || 'Спасибо за оценку!');
        });
    }
    function updateRatingStars(value) {
        selectedRatingValue = value;
        const stars = document.querySelectorAll('#rating-stars i');
        stars.forEach(star => {
            const starVal = parseInt(star.dataset.value);
            if (starVal <= value) {
                star.classList.add('text-yellow-400');
                star.classList.remove('text-gray-500');
            } else {
                star.classList.remove('text-yellow-400');
                star.classList.add('text-gray-500');
            }
        });
    }

    /**
     * Saves the rating for the given movie and updates the displayed SND rating.
     * Ratings are stored per user in localStorage under the key
     * `soundora-ratings` as an object mapping userIds to movie rating maps.
     * A user may only rate a movie once; subsequent ratings overwrite the previous one.
     * After saving, the average rating across all stored ratings is computed and
     * stored on the movie object under `sndRating`. The UI is updated to reflect
     * the new average immediately.
     *
     * @param {string|number} movieId The ID of the movie being rated
     * @param {number} value The rating value selected (1-10)
     */
    function submitRating(movieId, value) {
        if (!currentUser || !currentUser.uid) {
            showToast('Please log in to rate this movie.', true);
            return;
        }
        const userId = currentUser.uid;
        try {
            const key = 'soundora-ratings';
            let ratings = {};
            try {
                ratings = JSON.parse(localStorage.getItem(key)) || {};
            } catch (err) {
                ratings = {};
            }
            // Ensure user map exists
            if (!ratings[userId]) ratings[userId] = {};
            ratings[userId][String(movieId)] = value;
            localStorage.setItem(key, JSON.stringify(ratings));
            // Recalculate average rating for this movie across all users
            let total = 0;
            let count = 0;
            for (const uid in ratings) {
                if (ratings[uid][String(movieId)]) {
                    total += ratings[uid][String(movieId)];
                    count++;
                }
            }
            const avgNum = count > 0 ? total / count : 0;
            const avg = count > 0 ? avgNum.toFixed(1) : '0.0';
            // Update movie object with average and votes count
            const movie = movies.find(m => m.id === String(movieId));
            if (movie) {
                movie.sndRating = avg;
                movie.sndVotes = count;
            }
            // Update rating UI if present
            const valueEl = document.querySelector('#info-rating .rating-value');
            const votesEl = document.querySelector('#info-rating .rating-votes-count');
            if (valueEl) valueEl.textContent = avg;
            if (votesEl) votesEl.textContent = count;
            const bars = document.querySelectorAll('#info-rating .rating-bar-fill');
            bars.forEach(bar => {
                // Update data-final to new width and animate from 0 to final
                bar.dataset.final = `${avgNum * 10}`;
                bar.style.width = '0%';
                setTimeout(() => {
                    bar.style.width = `${avgNum * 10}%`;
                }, 10);
            });
        } catch (err) {
            console.error('Error saving rating', err);
        }
    }
    function openRatingModal(movieId) {
        ratingMovieId = movieId;
        setupRatingModal();
        const modal = document.getElementById('rating-modal');
        modal?.classList.remove('hidden');
    }
    function setupAccountSwitchModal() {
        const modal = document.getElementById('account-switch-modal');
        const closeBtn = document.getElementById('account-switch-close');
        const otherBtn = document.getElementById('account-switch-other');
        const shareBtn = document.getElementById('account-share-subscription');
        closeBtn?.addEventListener('click', () => modal?.classList.add('hidden'));
        otherBtn?.addEventListener('click', () => {
            modal?.classList.add('hidden');
            handleLogout();
        });
        // Show share subscription modal with promo codes instead of directly generating a code
        shareBtn?.addEventListener('click', (e) => {
            e.preventDefault();
            modal?.classList.add('hidden');
            openShareSubscriptionModal();
        });
    }
    function openAccountSwitchModal() {
        const modal = document.getElementById('account-switch-modal');
        const list = document.getElementById('account-list');
        if (!list) return;
        list.innerHTML = '';
        // Display accounts in a flexible grid of circles
        list.className = 'flex flex-wrap justify-center gap-6';
        const accounts = JSON.parse(localStorage.getItem('soundora-accounts')) || [];
        accounts.forEach(acc => {
            const wrapper = document.createElement('div');
            wrapper.className = 'flex flex-col items-center gap-2 cursor-pointer';
            const isActive = currentUser && currentUser.uid === acc.uid;
            const circle = document.createElement('div');
            circle.className = `w-20 h-20 rounded-full flex items-center justify-center text-white text-3xl font-bold bg-gray-700 ${isActive ? 'border-4 border-green-500' : 'border-2 border-gray-600'}`;
            const labelText = (acc.displayName || acc.email || acc.phoneNumber || 'U')[0];
            circle.textContent = labelText ? labelText.toUpperCase() : 'U';
            const nameLabel = document.createElement('span');
            nameLabel.className = 'text-sm text-center text-gray-300 w-24 truncate';
            nameLabel.textContent = acc.displayName || acc.email || acc.phoneNumber || 'User';
            wrapper.appendChild(circle);
            wrapper.appendChild(nameLabel);
            wrapper.addEventListener('click', async () => {
                // Save selected account ID
                localStorage.setItem('soundora-selected-account', acc.uid);
                // If we have stored credentials, sign into this account directly
                if (acc.email && acc.password) {
                    try {
                        await signOut(auth);
                    } catch (e) {
                        console.error('Error signing out before switching', e);
                    }
                    try {
                        await signInWithEmailAndPassword(auth, acc.email, acc.password);
                        // Hide modal after successful sign in
                        modal?.classList.add('hidden');
                        return;
                    } catch (e) {
                        console.error('Error signing in selected account', e);
                    }
                }
                // Fallback: just log out and go to login page
                handleLogout();
            });
            list.appendChild(wrapper);
        });
        // Add 'add profile' option
        const addProfileWrapper = document.createElement('div');
        addProfileWrapper.className = 'flex flex-col items-center gap-2 cursor-pointer';
        const addCircle = document.createElement('div');
        addCircle.className = 'w-20 h-20 rounded-full flex items-center justify-center text-white text-4xl font-bold bg-gray-600 border-2 border-gray-500';
        addCircle.textContent = '+';
        const addLabel = document.createElement('span');
        addLabel.className = 'text-sm text-center text-gray-300 w-24 truncate';
        addLabel.textContent = translations[currentLanguage]?.addProfile || 'Add profile';
        addProfileWrapper.appendChild(addCircle);
        addProfileWrapper.appendChild(addLabel);
        addProfileWrapper.addEventListener('click', () => {
            showToast(translations[currentLanguage]?.thankYouForRating || 'Coming soon', true);
        });
        list.appendChild(addProfileWrapper);
        // Add 'add kids' option
        const addKidsWrapper = document.createElement('div');
        addKidsWrapper.className = 'flex flex-col items-center gap-2 cursor-pointer';
        const kidsCircle = document.createElement('div');
        kidsCircle.className = 'w-20 h-20 rounded-full flex items-center justify-center text-white text-4xl font-bold bg-gray-600 border-2 border-gray-500';
        kidsCircle.textContent = '+';
        const kidsLabel = document.createElement('span');
        kidsLabel.className = 'text-sm text-center text-gray-300 w-24 truncate';
        kidsLabel.textContent = translations[currentLanguage]?.addKids || 'Add kids';
        addKidsWrapper.appendChild(kidsCircle);
        addKidsWrapper.appendChild(kidsLabel);
        addKidsWrapper.addEventListener('click', () => {
            showToast(translations[currentLanguage]?.thankYouForRating || 'Coming soon', true);
        });
        list.appendChild(addKidsWrapper);
        setupAccountSwitchModal();
        modal?.classList.remove('hidden');
    }

    // Open the share subscription modal which lists existing promo codes and allows generating new ones
    function openShareSubscriptionModal() {
        const modal = document.getElementById('share-modal');
        if (!modal || !currentUser) return;
        const listEl = modal.querySelector('#promo-codes-list');
        listEl.innerHTML = '';
        let allCodes = [];
        try {
            allCodes = JSON.parse(localStorage.getItem('soundora-promo-codes')) || [];
        } catch (e) {
            allCodes = [];
        }
        const userId = currentUser?.uid;
        const codes = allCodes.filter(c => c.userId === userId);
        if (codes.length === 0) {
            listEl.innerHTML = `<p class="text-gray-400" data-lang-key="noPromoCodes"></p>`;
        } else {
            codes.forEach((codeObj) => {
                const row = document.createElement('div');
                row.className = 'flex items-center justify-between bg-gray-800/50 p-3 rounded-lg';
                // Code label
                const label = document.createElement('span');
                label.className = 'text-white font-mono';
                label.textContent = codeObj.code;
                // Status badge
                const status = document.createElement('span');
                status.className = 'text-xs px-2 py-1 rounded-full ' + (codeObj.used ? 'bg-gray-700 text-gray-300' : 'bg-green-700 text-green-200');
                status.setAttribute('data-lang-key', codeObj.used ? 'codeUsed' : 'codeUnused');
                // Copy button
                const copyBtn = document.createElement('button');
                copyBtn.className = 'ml-3 px-2 py-1 bg-gray-700 hover:bg-gray-600 text-white text-xs rounded';
                copyBtn.setAttribute('data-lang-key', 'copy');
                copyBtn.addEventListener('click', () => {
                    copyToClipboard(codeObj.code);
                    showToast(translations[currentLanguage]?.promoCodeCopied || 'Promo code copied!');
                });
                row.appendChild(label);
                row.appendChild(status);
                row.appendChild(copyBtn);
                listEl.appendChild(row);
            });
        }
        const limit = currentUser && currentUser.isPremium ? 4 : 2;
        const unusedExists = codes.some(c => !c.used);
        const generateBtn = modal.querySelector('#generate-promo-btn');
        // Hide generate button if user has reached limit and still has unused codes
        if (codes.length >= limit && unusedExists) {
            generateBtn.style.display = 'none';
        } else {
            generateBtn.style.display = 'block';
        }
        generateBtn.onclick = () => {
            let codesAll = [];
            try {
                codesAll = JSON.parse(localStorage.getItem('soundora-promo-codes')) || [];
            } catch (e) {
                codesAll = [];
            }
            const userCodes = codesAll.filter(c => c.userId === userId);
            const unused = userCodes.find(c => !c.used);
            // If there is an unused code, simply copy it and show a toast
            if (unused) {
                copyToClipboard(unused.code);
                showToast(`Promo code ${unused.code} copied to clipboard!`);
                openShareSubscriptionModal();
                return;
            }
            if (userCodes.length >= limit) {
                showToast('Promo code limit reached.', true);
                return;
            }
            // Generate a unique new code
            const generateCode = () => Math.random().toString(36).substring(2, 10).toUpperCase();
            let newCode;
            do {
                newCode = generateCode();
            } while (codesAll.some(c => c.code === newCode));
            const now = Date.now();
            const expiresAt = now + 7 * 24 * 60 * 60 * 1000;
            const newCodeObj = { code: newCode, userId, createdAt: now, expiresAt, used: false };
            codesAll.push(newCodeObj);
            localStorage.setItem('soundora-promo-codes', JSON.stringify(codesAll));
            copyToClipboard(newCode);
            showToast(`Promo code ${newCode} copied to clipboard!`);
            openShareSubscriptionModal();
        };
        modal.classList.remove('hidden');
    }

    // Setup event listeners for the share modal (close action)
    function setupShareModal() {
        const modal = document.getElementById('share-modal');
        const closeBtn = document.getElementById('share-modal-close');
        closeBtn?.addEventListener('click', () => {
            modal?.classList.add('hidden');
        });
    }

    /**
     * Initialize series controls (seasons, ranges, episodes) for a given movie ID.
     * This will dynamically populate three rows of buttons: season numbers,
     * episode ranges (e.g., "1-10"), and individual episode numbers. When a range
     * or season is selected, the corresponding episodes are displayed. Clicking
     * an episode button will trigger playback via handlePlayClick.
     * This UI is shown only on mobile (via CSS classes) and for series with episodes.
     *
     * @param {string|number} movieId The movie ID to initialize controls for.
     */
    function initializeSeriesControls(movieId) {
        const movie = movies.find(m => m.id === String(movieId));
        if (!movie || !Array.isArray(movie.episodes) || movie.episodes.length === 0) return;
        const seasonRow = document.getElementById('season-row');
        const rangeRow = document.getElementById('range-row');
        const episodeRow = document.getElementById('episode-row');
        if (!seasonRow || !rangeRow || !episodeRow) return;
        // Clear any existing buttons
        seasonRow.innerHTML = '';
        rangeRow.innerHTML = '';
        episodeRow.innerHTML = '';
        const totalRanges = Math.ceil(movie.episodes.length / 10);
        // Populate season buttons (1,2,3,...)
        for (let i = 0; i < totalRanges; i++) {
            const btn = document.createElement('button');
            btn.className = 'season-btn px-3 py-2 rounded bg-gray-800 text-white hover:bg-red-600 transition-colors';
            btn.dataset.index = i;
            btn.textContent = String(i + 1);
            seasonRow.appendChild(btn);
        }
        // Populate range buttons (1-10,11-20,...)
        for (let i = 0; i < totalRanges; i++) {
            const start = i * 10 + 1;
            const end = Math.min((i + 1) * 10, movie.episodes.length);
            const btn = document.createElement('button');
            btn.className = 'range-btn px-3 py-2 rounded bg-gray-800 text-white hover:bg-red-600 transition-colors';
            btn.dataset.index = i;
            btn.textContent = `${start}-${end}`;
            rangeRow.appendChild(btn);
        }
        // Helper to render episodes for a selected range index
        function renderEpisodes(rangeIndex) {
            episodeRow.innerHTML = '';
            const startIdx = rangeIndex * 10;
            const endIdx = Math.min(startIdx + 10, movie.episodes.length);
            for (let i = startIdx; i < endIdx; i++) {
                const epBtn = document.createElement('button');
                epBtn.className = 'episode-btn flex-1 text-center px-3 py-2 rounded bg-gray-800 text-white hover:bg-red-600 transition-colors';
                epBtn.dataset.index = i;
                epBtn.textContent = String(i + 1);
                episodeRow.appendChild(epBtn);
            }
        }
        // Highlight the selected season and range buttons
        function highlightSelection(index) {
            seasonRow.querySelectorAll('.season-btn').forEach(btn => {
                const btnIdx = parseInt(btn.dataset.index);
                if (btnIdx === index) {
                    btn.classList.add('bg-red-600');
                    btn.classList.remove('bg-gray-800');
                } else {
                    btn.classList.remove('bg-red-600');
                    btn.classList.add('bg-gray-800');
                }
            });
            rangeRow.querySelectorAll('.range-btn').forEach(btn => {
                const btnIdx = parseInt(btn.dataset.index);
                if (btnIdx === index) {
                    btn.classList.add('bg-red-600');
                    btn.classList.remove('bg-gray-800');
                } else {
                    btn.classList.remove('bg-red-600');
                    btn.classList.add('bg-gray-800');
                }
            });
        }
        // Initial render of first range
        highlightSelection(0);
        renderEpisodes(0);
        // Event listeners for season and range row
        seasonRow.addEventListener('click', (e) => {
            const btn = e.target.closest('.season-btn');
            if (!btn) return;
            const idx = parseInt(btn.dataset.index);
            highlightSelection(idx);
            renderEpisodes(idx);
        });
        rangeRow.addEventListener('click', (e) => {
            const btn = e.target.closest('.range-btn');
            if (!btn) return;
            const idx = parseInt(btn.dataset.index);
            highlightSelection(idx);
            renderEpisodes(idx);
        });
        // Episode click: reuse handlePlayClick for playback
        episodeRow.addEventListener('click', (e) => {
            const btn = e.target.closest('.episode-btn');
            if (!btn) return;
            const epIndex = parseInt(btn.dataset.index);
            // Build a synthetic target to match handlePlayClick signature
            handlePlayClick({
                currentTarget: { dataset: { movieId: String(movieId), episodeIndex: epIndex } }
            });
        });
    }

    /**
     * Request a Google Cast session. If the Cast SDK is available, this will prompt
     * the user to choose a Cast-enabled device and start casting the current player.
     */
    function requestCastingSession() {
        try {
            if (window.cast && cast.framework) {
                const context = cast.framework.CastContext.getInstance();
                context.setOptions({ receiverApplicationId: window.SOUNDORA_CAST_APP_ID });
                context.requestSession().catch((error) => {
                    console.error('Cast session error', error);
                    showToast('Ошибка кастинга');
                });
            } else {
                showToast('Cast SDK недоступен');
            }
        } catch (err) {
            console.error('Cast error', err);
            showToast('Cast SDK недоступен');
        }
    }

    function initApp() {
        const savedLang = localStorage.getItem('soundora-lang') || 'ru';
        setLanguage(savedLang);
        // Initialize rating, account switch and share subscription modals
        setupRatingModal();
        setupAccountSwitchModal();
        setupShareModal();

        // Til filtri tugmasini va dropdownni dastlabki holatga o'rnatamiz.
        initLanguageFilter();

        initFirebaseAndLoadContent();

        document.getElementById('home-link-header').addEventListener('click', (e) => { e.preventDefault(); navigate({ page: 'main' }); });
        document.getElementById('notification-button-header').addEventListener('click', toggleNotificationPanel);
        document.getElementById('home-link-bottom').addEventListener('click', (e) => { e.preventDefault(); navigate({ page: 'main' }); });
        document.getElementById('favorites-link-bottom').addEventListener('click', (e) => { e.preventDefault(); navigate({ page: 'favorites' }); });
        document.getElementById('profile-link-bottom').addEventListener('click', (e) => {
            e.preventDefault();
            navigate({ page: 'profile' });
        });
        document.getElementById('search-button-bottom-nav').addEventListener('click', showSearchModal);

        window.addEventListener('popstate', (e) => {
            if (!modalOverlay.classList.contains('hidden')) {
                closeModal();
                history.pushState(currentHistoryState, '', `#${currentHistoryState.page}`);
                return;
            }

            const currentPage = currentHistoryState?.page;

            if (currentPage === 'main') {
                if (navigator.app && navigator.app.exitApp) {
                    navigator.app.exitApp();
                }
                return;
            }

            const topLevelSections = ['favorites', 'profile', 'guest-profile', 'premium'];
            if (topLevelSections.includes(currentPage)) {
                e.preventDefault();
                navigate({ page: 'main' });
                return;
            }

            const newState = e.state || { page: 'main' };
            processNavigation(newState, false);
        });

        document.addEventListener('visibilitychange', () => {
            if (document.visibilityState === 'hidden' && activeVideoElement && !activeVideoElement.paused && document.pictureInPictureEnabled && !activeVideoElement.disablePictureInPicture) {
                activeVideoElement.requestPictureInPicture().catch(error => {
                    console.error('PiP Error:', error);
                });
            }
        });
    }

    initApp();
});
</script>

<!-- Script to handle offline/online status and restore last state -->
<script>
    // Functions to show and hide offline/online banners
    function showOfflineBanner() {
        const banner = document.getElementById('offline-banner');
        if (banner) banner.classList.remove('hidden');
    }
    function hideOfflineBanner() {
        const banner = document.getElementById('offline-banner');
        if (banner) banner.classList.add('hidden');
    }
    function showOnlineBanner() {
        const banner = document.getElementById('online-banner');
        if (banner) banner.classList.remove('hidden');
    }
    function hideOnlineBanner() {
        const banner = document.getElementById('online-banner');
        if (banner) banner.classList.add('hidden');
    }

    // Event listeners for network status
    window.addEventListener('offline', () => {
        showOfflineBanner();
    });
    window.addEventListener('online', () => {
        showOnlineBanner();
    });

    document.addEventListener('DOMContentLoaded', () => {
        // Setup OK buttons for banners
        const offBtn = document.getElementById('offline-ok-btn');
        const onBtn  = document.getElementById('online-ok-btn');
        offBtn?.addEventListener('click', () => {
            hideOfflineBanner();
        });
        onBtn?.addEventListener('click', () => {
            hideOnlineBanner();
        });
        // Restore last navigation state if offline
        if (!navigator.onLine) {
            try {
                const lastStateRaw = localStorage.getItem('soundora-lastState');
                if (lastStateRaw) {
                    const lastState = JSON.parse(lastStateRaw);
                    if (lastState && lastState.page) {
                        processNavigation(lastState, false);
                    }
                }
            } catch (err) {
                console.error('Error restoring last state:', err);
            }
            showOfflineBanner();
        }
    });
</script>
<!-- Rating Modal -->
<div id="rating-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/60 hidden">
    <div class="bg-gray-900 rounded-lg w-11/12 max-w-md p-6 relative">
        <button id="rating-modal-close" class="absolute top-3 right-3 text-gray-500 hover:text-white"><i class="fas fa-times"></i></button>
        <h3 class="text-lg font-bold mb-2" data-lang-key="yourRatingTitle"></h3>
        <p class="text-sm text-gray-400 mb-4" data-lang-key="ratingImproves"></p>
        <div id="rating-stars" class="flex justify-center mb-4"></div>
        <div class="mb-4 space-y-2">
            <label class="flex items-center gap-2"><input type="checkbox" id="rating-dir" class="h-4 w-4 text-red-600"><span data-lang-key="directionCheckbox"></span></label>
            <label class="flex items-center gap-2"><input type="checkbox" id="rating-plot" class="h-4 w-4 text-red-600"><span data-lang-key="plotCheckbox"></span></label>
            <label class="flex items-center gap-2"><input type="checkbox" id="rating-spectacle" class="h-4 w-4 text-red-600"><span data-lang-key="spectacleCheckbox"></span></label>
            <label class="flex items-center gap-2"><input type="checkbox" id="rating-actors" class="h-4 w-4 text-red-600"><span data-lang-key="actorsCheckbox"></span></label>
        </div>
        <button id="rating-submit" class="w-full bg-red-600 hover:bg-red-700 text-white font-bold py-3 rounded-lg" data-lang-key="rateButton"></button>
    </div>
</div>
<!-- Account Switch Modal -->
<div id="account-switch-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/60 hidden">
    <div class="bg-gray-900 rounded-lg w-11/12 max-w-lg p-6 relative overflow-y-auto max-h-[80vh]">
        <button id="account-switch-close" class="absolute top-3 right-3 text-gray-500 hover:text-white"><i class="fas fa-times"></i></button>
        <h3 class="text-lg font-bold mb-4" data-lang-key="whoIsWatching"></h3>
        <div id="account-list" class="space-y-2"></div>
        <button id="account-switch-other" class="mt-4 w-full bg-gray-700 hover:bg-gray-600 text-white font-semibold py-2 px-4 rounded-lg" data-lang-key="otherAccount"></button>
        <button id="account-share-subscription" class="mt-2 w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white font-semibold py-2 px-4 rounded-lg" data-lang-key="shareSubscription"></button>
    </div>
</div>

<!-- Share Subscription Modal -->
<div id="share-modal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/60 hidden">
    <div class="bg-gray-900 rounded-lg w-11/12 max-w-lg p-6 relative overflow-y-auto max-h-[80vh]">
        <button id="share-modal-close" class="absolute top-3 right-3 text-gray-500 hover:text-white"><i class="fas fa-times"></i></button>
        <h3 class="text-lg font-bold mb-4" data-lang-key="promoCodesList"></h3>
        <div id="promo-codes-list" class="space-y-4"></div>
        <button id="generate-promo-btn" class="mt-4 w-full bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg" data-lang-key="generateCode"></button>
    </div>
</div>
<script>
    window.addEventListener('load', function() {
      handleLogout = async function() {
        const currentEmail = auth.currentUser?.email;
        await signOut(auth);
        const accountsJSON = localStorage.getItem('soundora-accounts');
        if (accountsJSON) {
          const accounts = JSON.parse(accountsJSON);
          if (Array.isArray(accounts) && accounts.length > 1) {
            let next = accounts.find(acc => acc.email !== currentEmail);
            if (!next) next = accounts[0];
            if (next?.email && next?.password) {
              await signInWithEmailAndPassword(auth, next.email, next.password).catch(err => {
                console.error('Auto-login error:', err);
              });
            }
          }
        }
      };
    });
</script>

</body>
</html>
